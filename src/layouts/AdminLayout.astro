---
import { getSessionUser } from '../utils/session';
import AdminTimer from '../components/AdminTimer';

export interface Props {
  title: string;
  currentPage?: string;
}

const { title, currentPage = 'dashboard' } = Astro.props;

// Get user session
const user = await getSessionUser(Astro);
const isAdmin = user && (user.role === 'admin' || user.role === 'developer');

// If not authenticated or not admin, we'll handle this in the template

const navItems = [
  { name: 'Dashboard', href: '/admin', icon: '📊' },
  { name: 'Projects', href: '/admin/projects', icon: '📁' },
  { name: 'Collaborations', href: '/admin/collaborations', icon: '👥' },
  { name: 'Team Members', href: '/admin/users', icon: '👤' },
  { name: 'Time Entries', href: '/admin/time-entries', icon: '⏱️' },
  // { name: 'Slack', href: '/admin/slack', icon: '💬' },
  { name: 'Settings', href: '/admin/settings', icon: '⚙️' },
  // { name: 'Generate Test Data', href: '/admin/generate-data', icon: '🧪' },
];
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Times10 Admin Dashboard" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    		<link rel="icon" type="image/png" href="/favicon.png" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Work+Sans:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <title>{title} - Times10 Admin</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/src/scripts/admin-realtime-updates.js"></script>
  </head>
  <body class="font-sans admin-layout" style="background-color: #f0eef5;">
    {!user || !isAdmin ? (
      <!-- Access Denied -->
      <div class="min-h-[100dvh] flex items-center justify-center" style="background-color: #f0eef5;">
        <div class="text-center">
          <div class="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-6">
            <span class="text-gray-700 text-2xl">🚫</span>
          </div>
          <h1 class="text-2xl font-bold text-gray-900 mb-4">Access Denied</h1>
          <p class="text-gray-600 mb-6">You don't have permission to access the admin panel.</p>
          <a href="/dashboard" class="inline-flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-colors">
            <span class="mr-2">←</span>
            Back to Dashboard
          </a>
        </div>
      </div>
    ) : (
      <>
        <!-- Loading State (shown immediately) -->
        <div id="loadingState" class="min-h-[100dvh] flex items-center justify-center" style="background-color: #f0eef5;">
          <div class="text-center">
            <div class="w-12 h-12 border-4 border-gray-300 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
            <p class="text-gray-600 text-lg">Loading admin panel...</p>
          </div>
        </div>

        <!-- Admin Content (hidden initially) -->
        <div id="adminContent" class="hidden">
      <div class="flex h-screen">
      <!-- Sidebar -->
      <div class="w-64 bg-white shadow-sm border-gray-200 flex flex-col sticky top-0 h-screen">
        <div class="h-[60px] px-4 py-2 pt-3 border-b border-gray-200">
          <div class="flex items-center h-full">
            <a href="/" class="flex items-center h-full hover:opacity-80 transition-opacity">
              <img src="/trackr-icon.png" alt="Times10 Logo" class="h-full w-auto" />
            </a>
          </div>
        </div>
        
        <!-- Navigation and Timer Section -->
        <div class="flex-1 flex flex-col">
          <nav class="mt-6 px-4">
            <div class="space-y-1">
              {navItems.map((item) => {
                const isActive = currentPage === item.href.split('/').pop() || (currentPage === 'dashboard' && item.href === '/admin');
                return (
                  <a
                    href={item.href}
                    class={`flex items-center px-4 py-3 text-sm font-medium rounded-lg transition-all duration-200 ${
                      isActive
                        ? 'bg-gray-100 text-gray-900 shadow-sm'
                        : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                    }`}
                  >
                    <span class="mr-3 text-lg">{item.icon}</span>
                    {item.name}
                  </a>
                );
              })}
            </div>
          </nav>
          
          <!-- Admin Timer Component -->
          <div class="px-4 mt-6 mb-4">
            <AdminTimer client:load />
          </div>
        </div>
        
        <!-- Sidebar Footer -->
        <div class="p-4 border-t border-gray-200">
          <div class="flex items-center text-gray-600 text-sm">
            <div class="w-8 h-8 bg-gray-200 rounded-lg flex items-center justify-center mr-3">
              <span class="text-gray-700 text-sm font-bold">{user?.name ? user.name.charAt(0).toUpperCase() : 'A'}</span>
            </div>
            <div>
              <div class="font-medium text-gray-900">{user?.name || 'Admin'}</div>
              <div class="text-gray-500 text-xs">{user?.email || 'admin@times10.com'}</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Main content -->
      <div class="flex-1 flex flex-col h-screen overflow-hidden">
        <!-- Top bar -->
        <header class="bg-white shadow-sm border-b border-gray-200 flex-shrink-0 flex justify-end items-center h-[60px] sticky top-0 z-10">
          <div class="flex items-center justify-between px-6 py-0">
            <div class="flex items-center">
              <!-- Title removed -->
            </div>
            <div class="flex items-center space-x-4">
              <div class={`px-3 py-1 text-sm font-medium rounded-full ${
                user?.role === 'admin' 
                  ? 'bg-black text-white' 
                  : user?.role === 'developer'
                  ? 'bg-red-600 text-white'
                  : 'bg-gray-100 text-gray-800'
              }`}>
                {user?.role === 'admin' ? 'Admin' : user?.role === 'developer' ? 'Developer' : 'Admin Panel'}
              </div>
              <button 
                id="logoutButton"
                class="inline-flex items-center px-3 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                </svg>
                Sign Out
              </button>
            </div>
          </div>
        </header>

        <!-- Page content -->
        <main class="flex-1 overflow-y-auto p-6" style="background-color: #f0eef5; max-height: calc(100vh - 60px);">
          <slot />
        </main>
      </div>
    </div>
        </div>
      </>
    )}
  </body>

  <script>
    // Show admin content after a brief delay to prevent flash
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(() => {
        const loadingState = document.getElementById('loadingState');
        const adminContent = document.getElementById('adminContent');
        
        if (loadingState && adminContent) {
          loadingState.classList.add('hidden');
          adminContent.classList.remove('hidden');
        }
      }, 100); // Brief delay to ensure smooth transition
    });
  </script>
</html>

<script>
  // Check session validity on page load
  async function checkSession() {
    try {
      const response = await fetch('/api/auth/me', {
        credentials: 'include'
      });
      
      if (!response.ok) {
        console.log('Session invalid, redirecting to login...');
        window.location.replace('/');
        return;
      }
      
      const data = await response.json();
      if (!data.user || (data.user.role !== 'admin' && data.user.role !== 'developer')) {
        console.log('User not admin or developer, redirecting...');
        window.location.replace('/');
        return;
      }
    } catch (error) {
      console.error('Session check error:', error);
      window.location.replace('/');
    }
  }

  // Check session when page loads
  checkSession();

  // Logout functionality
  document.getElementById('logoutButton')?.addEventListener('click', async () => {
    try {
      console.log('Logging out...');
      const response = await fetch('/api/auth/logout', {
        method: 'POST',
        credentials: 'include', // Include cookies
      });
      
      console.log('Logout response:', response.status);
      
      if (response.ok) {
        console.log('Logout successful, redirecting to login...');
        // Force a hard redirect to clear any cached state
        window.location.replace('/');
      } else {
        console.error('Logout failed:', response.status);
        // Still redirect to login even if logout API fails
        window.location.replace('/');
      }
    } catch (error) {
      console.error('Logout error:', error);
      // Redirect to login even if there's an error
      window.location.replace('/');
    }
  });
</script>

<style is:global>
  @tailwind base;
  @tailwind components;
  @tailwind utilities;
  @import "../styles/admin.css";
</style>