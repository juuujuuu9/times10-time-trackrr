---
import { getSessionUser } from '../utils/session';

export interface Props {
  title: string;
  currentPage?: string;
}

const { title, currentPage = 'dashboard' } = Astro.props;

// Get user session
const user = await getSessionUser(Astro);
const isAdmin = user && user.role === 'admin';

// If not authenticated or not admin, we'll handle this in the template

const navItems = [
  { name: 'Dashboard', href: '/admin', icon: '📊' },
  { name: 'Clients', href: '/admin/clients', icon: '👥' },
  { name: 'Projects', href: '/admin/projects', icon: '📁' },
  { name: 'Team Members', href: '/admin/users', icon: '👤' },
  { name: 'Time Entries', href: '/admin/time-entries', icon: '⏱️' },
  { name: 'Reports', href: '/admin/reports', icon: '📈' },
  { name: 'Settings', href: '/admin/settings', icon: '⚙️' },
  // { name: 'Generate Test Data', href: '/admin/generate-data', icon: '🧪' },
];
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Times10 Admin Dashboard" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Work+Sans:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <title>{title} - Times10 Admin</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  </head>
  <body class="bg-admin-black font-sans">
    {!user || !isAdmin ? (
      <!-- Access Denied -->
      <div class="min-h-screen bg-admin-black flex items-center justify-center">
        <div class="text-center">
          <div class="w-16 h-16 bg-admin-dark-gray rounded-full flex items-center justify-center mx-auto mb-6">
            <span class="text-admin-light-gray text-2xl">🚫</span>
          </div>
          <h1 class="text-2xl font-bold text-admin-light-gray mb-4">Access Denied</h1>
          <p class="text-admin-mid-gray mb-6">You don't have permission to access the admin panel.</p>
          <a href="/dashboard" class="inline-flex items-center px-4 py-2 bg-admin-dark-gray hover:bg-admin-mid-gray text-admin-light-gray font-medium rounded-lg transition-colors">
            <span class="mr-2">←</span>
            Back to Dashboard
          </a>
        </div>
      </div>
    ) : (
      <>
        <!-- Loading State (shown immediately) -->
        <div id="loadingState" class="min-h-screen bg-admin-black flex items-center justify-center">
          <div class="text-center">
            <div class="w-12 h-12 border-4 border-admin-mid-gray border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
            <p class="text-admin-mid-gray text-lg">Loading admin panel...</p>
          </div>
        </div>

        <!-- Admin Content (hidden initially) -->
        <div id="adminContent" class="hidden">
      <div class="flex h-screen">
      <!-- Sidebar -->
      <div class="w-64 bg-gradient-to-b from-admin-black to-admin-dark-gray shadow-xl border-r border-admin-dark-gray">
        <div class="p-6 border-b border-admin-dark-gray">
          <div class="flex items-center">
            <img src="/logo.png" alt="Times10 Logo" class="h-8 w-auto shadow-lg" />
          </div>
        </div>
        <nav class="mt-6 px-4">
          <div class="space-y-1">
            {navItems.map((item) => {
              const isActive = currentPage === item.href.split('/').pop() || (currentPage === 'dashboard' && item.href === '/admin');
              return (
                <a
                  href={item.href}
                  class={`flex items-center px-4 py-3 text-sm font-medium rounded-lg transition-all duration-200 ${
                    isActive
                      ? 'bg-admin-dark-gray text-admin-light-gray shadow-lg'
                      : 'text-admin-mid-gray hover:bg-admin-dark-gray hover:text-admin-light-gray'
                  }`}
                >
                  <span class="mr-3 text-lg">{item.icon}</span>
                  {item.name}
                </a>
              );
            })}
          </div>
        </nav>
        
        <!-- Sidebar Footer -->
        <div class="absolute bottom-0 w-56 p-4 border-t border-admin-dark-gray">
          <div class="flex items-center text-admin-mid-gray text-sm">
            <div class="w-8 h-8 bg-admin-dark-gray rounded-lg flex items-center justify-center mr-3">
              <span class="text-admin-light-gray text-sm font-bold">{user?.name ? user.name.charAt(0).toUpperCase() : 'A'}</span>
            </div>
            <div>
              <div class="font-medium text-admin-light-gray">{user?.name || 'Admin'}</div>
              <div class="text-admin-mid-gray text-xs">{user?.email || 'admin@times10.com'}</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Main content -->
      <div class="flex-1 flex flex-col overflow-hidden">
        <!-- Top bar -->
        <header class="bg-admin-dark-gray shadow-sm border-b border-admin-dark-gray">
          <div class="flex items-center justify-between px-6 py-4">
            <div class="flex items-center">
              <h2 class="text-2xl font-bold text-admin-light-gray">{title}</h2>
              <div class="ml-4 px-3 py-1 bg-admin-mid-gray text-admin-black text-sm font-medium rounded-full">
                Admin Panel
              </div>
            </div>
            <div class="flex items-center space-x-4">
              <button class="p-2 text-admin-mid-gray hover:text-admin-light-gray transition-colors">
                <span class="text-xl">🔔</span>
              </button>
              <button class="p-2 text-admin-mid-gray hover:text-admin-light-gray transition-colors">
                <span class="text-xl">⚙️</span>
              </button>
              <button 
                id="logoutButton"
                class="inline-flex items-center px-4 py-2 bg-admin-dark-gray hover:bg-admin-mid-gray text-admin-light-gray font-medium rounded-lg transition-colors"
              >
                <span class="mr-2">🚪</span>
                Sign Out
              </button>
            </div>
          </div>
        </header>

        <!-- Page content -->
        <main class="flex-1 overflow-y-auto p-6 bg-admin-black">
          <slot />
        </main>
      </div>
    </div>
        </div>
      </>
    )}
  </body>

  <script>
    // Show admin content after a brief delay to prevent flash
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(() => {
        const loadingState = document.getElementById('loadingState');
        const adminContent = document.getElementById('adminContent');
        
        if (loadingState && adminContent) {
          loadingState.classList.add('hidden');
          adminContent.classList.remove('hidden');
        }
      }, 100); // Brief delay to ensure smooth transition
    });
  </script>
</html>

<script>
  // Check session validity on page load
  async function checkSession() {
    try {
      const response = await fetch('/api/auth/me', {
        credentials: 'include'
      });
      
      if (!response.ok) {
        console.log('Session invalid, redirecting to login...');
        window.location.replace('/login');
        return;
      }
      
      const data = await response.json();
      if (!data.user || data.user.role !== 'admin') {
        console.log('User not admin, redirecting...');
        window.location.replace('/login');
        return;
      }
    } catch (error) {
      console.error('Session check error:', error);
      window.location.replace('/login');
    }
  }

  // Check session when page loads
  checkSession();

  // Logout functionality
  document.getElementById('logoutButton')?.addEventListener('click', async () => {
    try {
      console.log('Logging out...');
      const response = await fetch('/api/auth/logout', {
        method: 'POST',
        credentials: 'include', // Include cookies
      });
      
      console.log('Logout response:', response.status);
      
      if (response.ok) {
        console.log('Logout successful, redirecting to login...');
        // Force a hard redirect to clear any cached state
        window.location.replace('/login');
      } else {
        console.error('Logout failed:', response.status);
        // Still redirect to login even if logout API fails
        window.location.replace('/login');
      }
    } catch (error) {
      console.error('Logout error:', error);
      // Redirect to login even if there's an error
      window.location.replace('/login');
    }
  });
</script>

<style>
  @import "tailwindcss";
  @import "../styles/global.css";
  
  /* Force Istok Web font on admin pages */
  * {
    font-family: 'Istok Web', system-ui, sans-serif !important;
  }

  html, body {
    font-family: 'Istok Web', system-ui, sans-serif !important;
  }
  
  /* Override any Tailwind font classes in admin */
  .font-sans, .font-serif, .font-mono {
    font-family: 'Istok Web', system-ui, sans-serif !important;
  }
  
  /* Additional admin-specific styles with new color theme */
  .admin-sidebar {
    background: linear-gradient(to bottom, #1F292E, #415058);
  }
  
  .admin-card {
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.3), 0 1px 2px 0 rgba(0, 0, 0, 0.2);
  }
  
  .admin-card:hover {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.2);
  }
</style> 