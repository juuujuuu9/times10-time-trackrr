---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { projects, clients, tasks, timeEntries } from '../../../db/schema';
import { count, sql, eq } from 'drizzle-orm';

// Get all projects with client info - simplified to avoid database issues
const allProjects = await db
  .select({
    id: projects.id,
    name: projects.name,
    createdAt: projects.createdAt,
    clientId: projects.clientId,
    clientName: clients.name,
    clientArchived: clients.archived,
    projectArchived: projects.archived,
  })
  .from(projects)
  .leftJoin(clients, eq(projects.clientId, clients.id))
  .where(eq(clients.archived, false)) // Only show projects from active clients
  .orderBy(projects.name);

// Add default values for taskCount and totalHours to avoid complex queries
const projectStats = allProjects.map((project) => ({
  ...project,
  taskCount: 0, // Will be loaded dynamically via JavaScript
  totalHours: 0, // Will be loaded dynamically via JavaScript
}));

// Group projects by client
const projectsByClient = projectStats.reduce((acc, project) => {
  const clientName = project.clientName || 'Unknown Client';
  if (!acc[clientName]) {
    acc[clientName] = [];
  }
  acc[clientName].push(project);
  return acc;
}, {} as Record<string, typeof projectStats>);

// Filter to show only non-archived clients by default
const activeProjectsByClient = Object.entries(projectsByClient).reduce((acc, [clientName, clientProjects]) => {
  const firstProject = clientProjects[0];
  if (!firstProject?.clientArchived) {
    acc[clientName] = clientProjects;
  }
  return acc;
}, {} as Record<string, typeof projectStats>);

// Get all clients for the dropdown
const allClients = await db.select().from(clients).where(eq(clients.archived, false)).orderBy(clients.name);
---

<AdminLayout title="Projects" currentPage="projects">
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Projects</h1>
        <p class="text-gray-600">Manage projects organized by client</p>
      </div>
      <button
        id="createProjectBtn"
        class="inline-flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105"
      >
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        Add Project
      </button>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg shadow border border-gray-300 p-6">
      <div class="flex flex-col sm:flex-row gap-4">
        <div class="flex-1">
          <label for="search" class="block text-sm font-medium text-gray-700 mb-1">Search</label>
          <input
            type="text"
            id="search"
            placeholder="Search projects..."
            class="w-[calc(100%-5rem)] px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
          />
        </div>
        <div class="sm:w-48">
          <label for="clientFilter" class="block text-sm font-medium text-gray-700 mb-1">Filter by Client</label>
          <select
            id="clientFilter"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
          >
            <option value="">All Clients</option>
            {allClients.map((client) => (
              <option value={client.name}>{client.name}</option>
            ))}
            <option value="archived">[Archived Clients]</option>
          </select>
        </div>
        <div class="sm:w-48">
          <label class="block text-sm font-medium text-gray-700 mb-1">Show Archived Projects</label>
          <div class="flex items-center">
            <button
              id="showArchivedToggle"
              class="relative inline-flex h-6 w-11 items-center rounded-full bg-gray-200 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2"
              role="switch"
              aria-checked="false"
            >
              <span
                id="toggleThumb"
                class="inline-block h-4 w-4 transform rounded-full bg-white transition-transform shadow-sm"
              ></span>
            </button>
            <span id="toggleLabel" class="ml-2 text-sm text-gray-600">Off</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Projects by Client -->
    <div class="space-y-6">
      {Object.entries(projectsByClient).map(([clientName, clientProjects]) => {
        // Find the first project to get client archived status
        const firstProject = clientProjects[0];
        const isArchived = firstProject?.clientArchived || false;
        
        return (
        <div class="bg-white rounded-lg shadow border border-gray-300 overflow-hidden hover:shadow-lg transition-all duration-200 hover:border-gray-400" data-archived={isArchived}>
          <div class="px-6 py-4 bg-gray-50 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">{clientName}</h3>
            <p class="text-sm text-gray-600">{clientProjects.length} projects</p>
          </div>
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                    Project Name
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                    Tasks
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                    Total Hours
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                    Created Date
                  </th>
                  <th class="px-6 py-3 text-right text-xs font-medium text-gray-700 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                {clientProjects.map((project) => (
                  <tr class="hover:bg-gray-50" data-project-archived={project.projectArchived} data-project-id={project.id}>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="flex items-center">
                      <div class="text-sm font-medium text-gray-900">{project.name}</div>
                        {project.projectArchived && (
                          <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-600">
                            Archived
                          </span>
                        )}
                      </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span class="task-count inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-200 text-gray-700">
                        {project.taskCount} tasks
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 total-hours">
                      {project.totalHours ? Math.round(project.totalHours * 10) / 10 : 0} hours
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                      {new Date(project.createdAt).toLocaleDateString()}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div class="flex justify-end space-x-2">
                        <button
                          type="button"
                          class="view-tasks-btn inline-flex items-center px-3 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105"
                          data-project-id={project.id}
                          data-project-name={project.name}
                          title="View project tasks"
                        >
                          <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                          </svg>
                          View Tasks
                        </button>
                        <button
                          type="button"
                          class="edit-project-btn inline-flex items-center px-3 py-2 bg-white hover:bg-gray-100 text-gray-700 text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 border border-gray-300"
                          data-project-id={project.id}
                          title="Edit project details"
                        >
                          <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                          </svg>
                          Edit
                        </button>
                        <button
                          type="button"
                          class="archive-project-btn inline-flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 border"
                          data-project-id={project.id}
                          data-project-name={project.name}
                          data-project-archived={project.projectArchived}
                          class={project.projectArchived 
                            ? "bg-green-100 hover:bg-green-200 text-green-800 border-green-300" 
                            : "bg-gray-200 hover:bg-gray-300 text-gray-700 border-gray-300"
                          }
                          title={project.projectArchived ? "Restore project" : "Archive project"}
                        >
                          <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={project.projectArchived ? "M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" : "M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4"}></path>
                          </svg>
                          {project.projectArchived ? 'Restore' : 'Archive'}
                        </button>
                        <button
                          type="button"
                          class="delete-project-btn text-red-500 hover:text-red-600 transition-colors p-2 rounded-lg hover:bg-red-50"
                          data-project-id={project.id}
                          data-project-name={project.name}
                          title="Delete project"
                        >
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                          </svg>
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
        );
      })}
    </div>
  </div>

  <!-- Edit Task Modal -->
  <div id="editTaskModal" class="fixed inset-0 bg-black/50 hidden z-[60]">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full border border-gray-300">
        <div class="px-6 py-4 border-b border-gray-300">
          <h3 class="text-lg font-medium text-gray-900">Edit Task</h3>
        </div>
        <div class="px-6 py-4">
          <form id="editTaskForm">
            <input type="hidden" id="editTaskId" />
            <div class="mb-4">
              <label for="editTaskName" class="block text-sm font-medium text-gray-700 mb-1">
                Task Name
              </label>
              <input
                type="text"
                id="editTaskName"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#415058] bg-white text-gray-900"
                placeholder="Enter task name"
              />
            </div>
            <div class="mb-4">
              <label for="editTaskStatus" class="block text-sm font-medium text-gray-700 mb-1">
                Status
              </label>
              <select
                id="editTaskStatus"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#415058] bg-white text-gray-900"
              >
                <option value="pending">Pending</option>
                <option value="in-progress">In Progress</option>
                <option value="completed">Completed</option>
                <option value="cancelled">Cancelled</option>
              </select>
            </div>
            <div class="mb-4">
              <label for="editTaskPriority" class="block text-sm font-medium text-gray-700 mb-1">
                Priority
              </label>
              <select
                id="editTaskPriority"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#415058] bg-white text-gray-900"
              >
                <option value="regular">Regular</option>
                <option value="urgent">Urgent</option>
                <option value="low">Low</option>
              </select>
            </div>
          </form>
        </div>
        <div class="px-6 py-4 border-t border-gray-300 flex justify-end space-x-3">
          <button
            type="button"
            id="cancelEditTaskBtn"
            class="inline-flex items-center px-4 py-2 text-gray-700 bg-gray-200 hover:bg-gray-300 rounded-md transition-all duration-200 font-medium"
          >
            Cancel
          </button>
          <button
            type="button"
            id="saveEditTaskBtn"
            class="inline-flex items-center px-4 py-2 bg-[#415058] hover:bg-[#1F292E] text-white rounded-md transition-all duration-200 font-medium"
          >
            <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            Save Changes
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="deleteConfirmModal" class="fixed inset-0 bg-black/50 hidden z-[70]">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full border border-gray-300">
        <div class="px-6 py-4 border-b border-gray-300">
          <h3 class="text-lg font-medium text-gray-900">Confirm Deletion</h3>
        </div>
        <div class="px-6 py-4">
          <p class="text-sm text-gray-600 mb-4">
            Are you sure you want to delete <span id="deleteItemName" class="font-medium"></span>?
          </p>
          <p class="text-xs text-red-600 mb-4">
            This action cannot be undone. The task will be deleted and all user assignments will be removed. Time entries will be preserved for record keeping.
          </p>
        </div>
        <div class="px-6 py-4 border-t border-gray-300 flex justify-end space-x-3">
          <button
            type="button"
            id="cancelDeleteBtn"
            class="inline-flex items-center px-4 py-2 text-gray-700 bg-gray-200 hover:bg-gray-300 rounded-md transition-all duration-200 font-medium"
          >
            Cancel
          </button>
          <button
            type="button"
            id="confirmDeleteBtn"
            class="inline-flex items-center px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md transition-all duration-200 font-medium"
          >
            <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
            Delete
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Create/Edit Project Modal -->
        <div id="projectModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] border border-gray-300 flex flex-col" onclick="event.stopPropagation()">
        <div class="px-6 py-4 border-b border-gray-300 flex-shrink-0 flex justify-between items-center">
          <h3 id="projectModalTitle" class="text-lg font-medium text-gray-900">Add New Project</h3>
          <button
            type="button"
            id="closeProjectModal"
            class="text-gray-400 hover:text-gray-600 transition-colors p-1 rounded-lg hover:bg-gray-100"
            title="Close modal"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div class="flex-1 overflow-y-auto" style="scrollbar-width: thin; scrollbar-color: #9CA3AF #E5E7EB;">
          <form id="projectForm" class="px-6 py-4">
            <input type="hidden" id="projectId" />
            <div class="mb-4">
              <label for="projectName" class="block text-sm font-medium text-gray-700 mb-1">
                Project Name
              </label>
              <input
                type="text"
                id="projectName"
                required
                class="w-[calc(100%-1.5rem)] px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#415058] bg-white text-gray-900"
              />
            </div>
            <div class="mb-4">
              <label for="projectClient" class="block text-sm font-medium text-gray-700 mb-1">
                Client
              </label>
              <div class="flex space-x-2">
                <select
                  id="projectClient"
                  required
                  class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#415058] bg-white text-gray-900"
                >
                  <option value="">Select a client</option>
                  {allClients.map((client) => (
                    <option value={client.id}>{client.name}</option>
                  ))}
                </select>
                <button
                  type="button"
                  id="createClientBtn"
                  class="inline-flex items-center px-3 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-md transition-all duration-200 text-sm font-medium shadow-sm hover:shadow-md"
                >
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                  </svg>
                  New
                </button>
              </div>
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                id="cancelProjectBtn"
                class="inline-flex items-center px-4 py-2 text-gray-700 bg-white hover:bg-gray-50 rounded-md transition-all duration-200 font-medium border border-gray-300"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                Cancel
              </button>
              <button
                type="submit"
                class="inline-flex items-center px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-md transition-all duration-200 font-medium shadow-sm hover:shadow-md"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                Save Project
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Create New Client Modal -->
        <div id="clientModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] border border-gray-300 flex flex-col" onclick="event.stopPropagation()">
        <div class="px-6 py-4 border-b border-gray-300 flex-shrink-0 flex justify-between items-center">
          <h3 class="text-lg font-medium text-gray-900">Create New Client</h3>
          <button
            type="button"
            id="closeClientModal"
            class="text-gray-400 hover:text-gray-600 transition-colors p-1 rounded-lg hover:bg-gray-100"
            title="Close modal"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div class="flex-1 overflow-y-auto" style="scrollbar-width: thin; scrollbar-color: #9CA3AF #E5E7EB;">
          <form id="clientForm" class="px-6 py-4">
            <div class="mb-4">
              <label for="clientName" class="block text-sm font-medium text-gray-700 mb-1">
                Client Name
              </label>
              <input
                type="text"
                id="clientName"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#415058] bg-white text-gray-900"
                placeholder="Enter client name"
              />
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                id="cancelClientBtn"
                class="inline-flex items-center px-4 py-2 text-gray-700 bg-white hover:bg-gray-50 rounded-md transition-all duration-200 font-medium border border-gray-300"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                Cancel
              </button>
              <button
                type="submit"
                class="inline-flex items-center px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-md transition-all duration-200 font-medium shadow-sm hover:shadow-md"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                Create Client
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Tasks Modal -->
  <div id="tasksModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] border border-gray-300 flex flex-col" onclick="event.stopPropagation()">
        <div class="px-6 py-4 border-b border-gray-300 flex-shrink-0 flex justify-between items-center">
          <div>
            <h3 id="tasksModalTitle" class="text-lg font-medium text-gray-900">Project Tasks</h3>
            <p id="tasksModalSubtitle" class="text-sm text-gray-600">Manage tasks for this project</p>
          </div>
          <button
            type="button"
            id="closeTasksModal"
            class="text-gray-400 hover:text-gray-600 transition-colors p-1 rounded-lg hover:bg-gray-100"
            title="Close modal"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div class="flex-1 overflow-y-auto p-6">
          <div class="mb-4 flex justify-between items-center">
            <h4 class="text-md font-medium text-gray-900">Tasks</h4>
            <button
              type="button"
              id="addTaskBtn"
              class="inline-flex items-center px-3 py-2 bg-gray-600 hover:bg-gray-700 text-white text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md"
            >
              <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              Add Task
            </button>
          </div>
          <div id="tasksList" class="space-y-3">
            <!-- Tasks will be loaded here -->
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Quick Add Task Modal -->
  <div id="quickAddTaskModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] border border-gray-300 flex flex-col" onclick="event.stopPropagation()">
        <div class="px-6 py-4 border-b border-gray-300 flex-shrink-0 flex justify-between items-center">
          <h3 class="text-lg font-medium text-gray-900">Quick Add Task</h3>
          <button
            type="button"
            id="closeQuickAddTaskModal"
            class="text-gray-400 hover:text-gray-600 transition-colors p-1 rounded-lg hover:bg-gray-100"
            title="Close modal"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div class="flex-1 overflow-y-auto" style="scrollbar-width: thin; scrollbar-color: #9CA3AF #E5E7EB;">
          <form id="quickAddTaskForm" class="px-6 py-4">
            <input type="hidden" id="quickAddTaskProjectId" />
            <div class="mb-4">
              <label for="quickAddTaskName" class="block text-sm font-medium text-gray-700 mb-1">
                Task Name
              </label>
              <input
                type="text"
                id="quickAddTaskName"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#415058] bg-white text-gray-900"
                placeholder="Enter task name"
              />
            </div>
            <div class="mb-4">
              <label for="quickAddTaskPriority" class="block text-sm font-medium text-gray-700 mb-1">
                Priority
              </label>
              <select
                id="quickAddTaskPriority"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#415058] bg-white text-gray-900"
              >
                <option value="regular">Regular</option>
                <option value="urgent">Urgent</option>
              </select>
            </div>
            <div class="mb-4">
              <label for="quickAddTaskAssignees" class="block text-sm font-medium text-gray-700 mb-1">
                Assign Team Members
              </label>
              <div class="relative">
                <input
                  type="text"
                  id="quickAddTaskAssignees"
                  placeholder="Search for team members..."
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#415058] bg-white text-gray-900"
                />
                <div id="quickAddTaskAssigneesDropdown" class="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-y-auto hidden">
                  <!-- Search results will be populated here -->
                </div>
              </div>
              <div id="quickAddTaskSelectedAssignees" class="mt-2 space-y-1">
                <!-- Selected team members will be displayed here -->
              </div>
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                id="cancelQuickAddTaskBtn"
                class="inline-flex items-center px-4 py-2 text-gray-700 bg-white hover:bg-gray-50 rounded-md transition-all duration-200 font-medium border border-gray-300"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                Cancel
              </button>
              <button
                type="submit"
                class="inline-flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-md transition-all duration-200 font-medium shadow-sm hover:shadow-md"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                Add Task
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Add/Edit Task Modal -->
  <div id="taskModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] border border-gray-300 flex flex-col" onclick="event.stopPropagation()">
        <div class="px-6 py-4 border-b border-gray-300 flex-shrink-0 flex justify-between items-center">
          <h3 id="taskModalTitle" class="text-lg font-medium text-gray-900">Add New Task</h3>
          <button
            type="button"
            id="closeTaskModal"
            class="text-gray-400 hover:text-gray-600 transition-colors p-1 rounded-lg hover:bg-gray-100"
            title="Close modal"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div class="flex-1 overflow-y-auto" style="scrollbar-width: thin; scrollbar-color: #9CA3AF #E5E7EB;">
          <form id="taskForm" class="px-6 py-4">
            <input type="hidden" id="taskId" />
            <input type="hidden" id="taskProjectId" />
            <div class="mb-4">
              <label for="taskName" class="block text-sm font-medium text-gray-700 mb-1">
                Task Name
              </label>
              <input
                type="text"
                id="taskName"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#415058] bg-white text-gray-900"
                placeholder="Enter task name"
              />
            </div>
            <div class="mb-4">
              <label for="taskDescription" class="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <textarea
                id="taskDescription"
                rows="3"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#415058] bg-white text-gray-900"
                placeholder="Enter task description"
              ></textarea>
            </div>
            <div class="mb-4">
              <label for="taskStatus" class="block text-sm font-medium text-gray-700 mb-1">
                Status
              </label>
              <select
                id="taskStatus"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#415058] bg-white text-gray-900"
              >
                <option value="pending">Pending</option>
                <option value="in-progress">In Progress</option>
                <option value="completed">Completed</option>
                <option value="cancelled">Cancelled</option>
              </select>
            </div>
            <div class="mb-4">
              <label for="taskPriority" class="block text-sm font-medium text-gray-700 mb-1">
                Priority
              </label>
              <select
                id="taskPriority"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#415058] bg-white text-gray-900"
              >
                <option value="regular">Regular</option>
                <option value="urgent">Urgent</option>
              </select>
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                id="cancelTaskBtn"
                class="inline-flex items-center px-4 py-2 text-gray-700 bg-white hover:bg-gray-50 rounded-md transition-all duration-200 font-medium border border-gray-300"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                Cancel
              </button>
              <button
                type="submit"
                class="inline-flex items-center px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-md transition-all duration-200 font-medium shadow-sm hover:shadow-md"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                Save Task
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Project management JavaScript
    document.addEventListener('DOMContentLoaded', function() {
      const createProjectBtn = document.getElementById('createProjectBtn');
      const projectForm = document.getElementById('projectForm');
      const searchInput = document.getElementById('search');
      const clientFilter = document.getElementById('clientFilter');
      const showArchivedToggle = document.getElementById('showArchivedToggle');
      const toggleThumb = document.getElementById('toggleThumb');
      const toggleLabel = document.getElementById('toggleLabel');

      // Toggle functionality for showing archived projects
      let showArchivedProjects = localStorage.getItem('showArchivedProjects') === 'true';
      
      // Set initial toggle state
      if (showArchivedProjects) {
        showArchivedToggle?.classList.remove('bg-gray-200');
        showArchivedToggle?.classList.add('bg-gray-600');
        toggleThumb?.classList.add('translate-x-5');
        toggleLabel!.textContent = 'On';
        showArchivedToggle?.setAttribute('aria-checked', 'true');
      }

      if (showArchivedToggle && toggleThumb && toggleLabel) {
        showArchivedToggle.addEventListener('click', async () => {
          showArchivedProjects = !showArchivedProjects;
          
          // Update toggle appearance
          if (showArchivedProjects) {
            showArchivedToggle.classList.remove('bg-gray-200');
            showArchivedToggle.classList.add('bg-gray-600');
            toggleThumb.classList.add('translate-x-5');
            toggleLabel.textContent = 'On';
          } else {
            showArchivedToggle.classList.remove('bg-gray-600');
            showArchivedToggle.classList.add('bg-gray-200');
            toggleThumb.classList.remove('translate-x-5');
            toggleLabel.textContent = 'Off';
          }
          
          // Update aria-checked attribute
          showArchivedToggle.setAttribute('aria-checked', showArchivedProjects.toString());
          
          // Save state to localStorage
          localStorage.setItem('showArchivedProjects', showArchivedProjects.toString());
          
          // Apply filtering
          filterProjects();
        });
      }

      // Function to filter projects based on current settings
      function filterProjects() {
        console.log('Filtering projects, showArchivedProjects:', showArchivedProjects);
        const clientSections = document.querySelectorAll('.bg-white.rounded-lg.shadow.border.border-gray-300.overflow-hidden');
        
        clientSections.forEach(section => {
          const isClientArchived = section.getAttribute('data-archived') === 'true';
          const projectRows = section.querySelectorAll('tbody tr');
          let hasVisibleProjects = false;
          
          projectRows.forEach(row => {
            const isProjectArchived = row.getAttribute('data-project-archived') === 'true';
            
            // Show project if:
            // 1. Client is not archived AND (project is not archived OR showArchivedProjects is true)
            // 2. OR if we're showing archived clients (handled by client filter)
            const shouldShow = !isClientArchived && (!isProjectArchived || showArchivedProjects);
            
            console.log('Project row:', {
              projectName: row.querySelector('td:first-child')?.textContent?.trim(),
              isProjectArchived,
              shouldShow
            });
            
            (row as HTMLElement).style.display = shouldShow ? '' : 'none';
            if (shouldShow) {
              hasVisibleProjects = true;
            }
          });
          
          // Hide the entire client section if no projects match the filter
          (section as HTMLElement).style.display = hasVisibleProjects ? '' : 'none';
        });
      }

    if (createProjectBtn) {
      createProjectBtn.addEventListener('click', () => {
        const modalTitle = document.getElementById('projectModalTitle');
        const projectId = document.getElementById('projectId') as HTMLInputElement;
        const projectName = document.getElementById('projectName') as HTMLInputElement;
        const projectClient = document.getElementById('projectClient') as HTMLSelectElement;
        const projectModal = document.getElementById('projectModal');
        
        if (modalTitle) modalTitle.textContent = 'Add New Project';
        if (projectId) projectId.value = '';
        if (projectName) projectName.value = '';
        if (projectClient) projectClient.value = '';
        if (projectModal) {
          projectModal.classList.remove('hidden');
          projectModal.style.display = 'block';
        }
      });
    }

    if (projectForm) {
      projectForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const projectId = (document.getElementById('projectId') as HTMLInputElement)?.value;
        const projectName = (document.getElementById('projectName') as HTMLInputElement)?.value;
        const projectClient = (document.getElementById('projectClient') as HTMLSelectElement)?.value;
        
        console.log('Form submission:', { projectId, projectName, projectClient });
        const method = projectId ? 'PUT' : 'POST';
        console.log('Using method:', method);
        
        try {
          const response = await fetch('/api/admin/projects', {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ 
              id: projectId, 
              name: projectName, 
              clientId: parseInt(projectClient) 
            }),
          });
          
          console.log('Response status:', response.status);
          if (response.ok) {
            console.log('Success! Reloading page...');
            window.location.reload();
          } else {
            const errorText = await response.text();
            console.error('Error response:', errorText);
            alert('Error saving project');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error saving project');
        }
      });
    }

    // Global functions
    function closeProjectModal() {
      const projectModal = document.getElementById('projectModal');
      if (projectModal) {
        projectModal.classList.add('hidden');
        projectModal.style.display = 'none';
      }
    }
    
    function editProject(id: number) {
      const modalTitle = document.getElementById('projectModalTitle');
      const projectId = document.getElementById('projectId') as HTMLInputElement;
      const projectName = document.getElementById('projectName') as HTMLInputElement;
      const projectClient = document.getElementById('projectClient') as HTMLSelectElement;
      const projectModal = document.getElementById('projectModal');
      
      // Fetch project details
      fetch(`/api/admin/projects/${id}`, { credentials: 'include' })
        .then(response => {
          if (response.ok) {
            return response.json();
          } else {
            throw new Error('Error loading project details');
          }
        })
        .then(project => {
          if (modalTitle) modalTitle.textContent = 'Edit Project';
          if (projectId) projectId.value = project.id.toString();
          if (projectName) projectName.value = project.name;
          if (projectClient) projectClient.value = project.clientId.toString();
          if (projectModal) {
            projectModal.classList.remove('hidden');
            projectModal.style.display = 'block';
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error loading project details');
        });
    }
    
    function deleteProject(id: number) {
      if (confirm('Are you sure you want to delete this project?')) {
        fetch(`/api/admin/projects/${id}`, { method: 'DELETE', credentials: 'include' })
          .then(response => {
            if (response.ok) {
              window.location.reload();
            } else {
              alert('Error deleting project');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error deleting project');
            });
        }
      }

      // Archive/restore project function
      function toggleProjectArchive(id: number, isArchived: boolean) {
        const action = isArchived ? 'restore' : 'archive';
        if (confirm(`Are you sure you want to ${action} this project?`)) {
          fetch('/api/admin/projects', {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ 
              id: id, 
              archived: !isArchived 
            }),
          })
          .then(response => {
            if (response.ok) {
              window.location.reload();
            } else {
              alert(`Error ${action}ing project`);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert(`Error ${action}ing project`);
          });
      }
    }
    
    // Make functions globally available
    (window as any).closeProjectModal = closeProjectModal;
    (window as any).editProject = editProject;
    (window as any).deleteProject = deleteProject;
      (window as any).toggleProjectArchive = toggleProjectArchive;

    // Add escape key handler for all modals
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        const projectModal = document.getElementById('projectModal');
        if (projectModal && !projectModal.classList.contains('hidden')) {
          (window as any).closeProjectModal();
        }
        const clientModal = document.getElementById('clientModal');
        if (clientModal && !clientModal.classList.contains('hidden')) {
          (window as any).closeClientModal();
        }
        const tasksModal = document.getElementById('tasksModal');
        if (tasksModal && !tasksModal.classList.contains('hidden')) {
          (window as any).closeTasksModal();
        }
        const taskModal = document.getElementById('taskModal');
        if (taskModal && !taskModal.classList.contains('hidden')) {
          (window as any).closeTaskModal();
        }
        const quickAddTaskModal = document.getElementById('quickAddTaskModal');
        if (quickAddTaskModal && !quickAddTaskModal.classList.contains('hidden')) {
          (window as any).closeQuickAddTaskModal();
        }
      }
    });

    // Add click handlers for modal backdrops
    const projectModal = document.getElementById('projectModal');
    if (projectModal) {
      projectModal.addEventListener('click', (e) => {
        if (e.target === projectModal) {
          (window as any).closeProjectModal();
        }
      });
    }

    const clientModal = document.getElementById('clientModal');
    if (clientModal) {
      clientModal.addEventListener('click', (e) => {
        if (e.target === clientModal) {
          (window as any).closeClientModal();
        }
      });
    }

    const tasksModal = document.getElementById('tasksModal');
    if (tasksModal) {
      tasksModal.addEventListener('click', (e) => {
        if (e.target === tasksModal) {
          (window as any).closeTasksModal();
        }
      });
    }

    const taskModal = document.getElementById('taskModal');
    if (taskModal) {
      taskModal.addEventListener('click', (e) => {
        if (e.target === taskModal) {
          (window as any).closeTaskModal();
        }
      });
    }

    const quickAddTaskModal = document.getElementById('quickAddTaskModal');
    if (quickAddTaskModal) {
      quickAddTaskModal.addEventListener('click', (e) => {
        if (e.target === quickAddTaskModal) {
          (window as any).closeQuickAddTaskModal();
        }
      });
    }

    // Add direct event listeners for cancel buttons and X buttons
    const cancelProjectBtn = document.getElementById('cancelProjectBtn');
    if (cancelProjectBtn) {
      cancelProjectBtn.addEventListener('click', () => {
        (window as any).closeProjectModal();
      });
    }

    const closeProjectModalBtn = document.getElementById('closeProjectModal');
    if (closeProjectModalBtn) {
      closeProjectModalBtn.addEventListener('click', () => {
        (window as any).closeProjectModal();
      });
    }

    const closeClientModalBtn = document.getElementById('closeClientModal');
    if (closeClientModalBtn) {
      closeClientModalBtn.addEventListener('click', () => {
        (window as any).closeClientModal();
      });
    }

    const closeTasksModalBtn = document.getElementById('closeTasksModal');
    if (closeTasksModalBtn) {
      closeTasksModalBtn.addEventListener('click', () => {
        (window as any).closeTasksModal();
      });
    }

    const closeTaskModalBtn = document.getElementById('closeTaskModal');
    if (closeTaskModalBtn) {
      closeTaskModalBtn.addEventListener('click', () => {
        (window as any).closeTaskModal();
      });
    }

    const closeQuickAddTaskModalBtn = document.getElementById('closeQuickAddTaskModal');
    if (closeQuickAddTaskModalBtn) {
      closeQuickAddTaskModalBtn.addEventListener('click', () => {
        (window as any).closeQuickAddTaskModal();
      });
    }

    // Delete confirmation modal event listeners
    const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
    if (cancelDeleteBtn) {
      cancelDeleteBtn.addEventListener('click', () => {
        (window as any).closeDeleteConfirmModal();
      });
    }

    const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
    if (confirmDeleteBtn) {
      confirmDeleteBtn.addEventListener('click', async () => {
        if (pendingDeleteTaskId && pendingDeleteTaskName) {
          await (window as any).deleteTask(pendingDeleteTaskId, pendingDeleteTaskName);
          (window as any).closeDeleteConfirmModal();
        }
      });
    }

    const deleteConfirmModal = document.getElementById('deleteConfirmModal');
    if (deleteConfirmModal) {
      deleteConfirmModal.addEventListener('click', (e) => {
        if (e.target === deleteConfirmModal) {
          (window as any).closeDeleteConfirmModal();
        }
      });
    }

    // Edit task modal event listeners
    const cancelEditTaskBtn = document.getElementById('cancelEditTaskBtn');
    if (cancelEditTaskBtn) {
      cancelEditTaskBtn.addEventListener('click', () => {
        (window as any).closeEditTaskModal();
      });
    }

    const saveEditTaskBtn = document.getElementById('saveEditTaskBtn');
    if (saveEditTaskBtn) {
      saveEditTaskBtn.addEventListener('click', () => {
        (window as any).saveEditedTask();
      });
    }

    const editTaskModal = document.getElementById('editTaskModal');
    if (editTaskModal) {
      editTaskModal.addEventListener('click', (e) => {
        if (e.target === editTaskModal) {
          (window as any).closeEditTaskModal();
        }
      });
    }

    // Client creation functionality
    const createClientBtn = document.getElementById('createClientBtn');
    const clientForm = document.getElementById('clientForm');

    if (createClientBtn) {
      createClientBtn.addEventListener('click', () => {
        const clientModal = document.getElementById('clientModal');
        const clientName = document.getElementById('clientName') as HTMLInputElement;
        
        if (clientName) clientName.value = '';
        if (clientModal) {
          clientModal.classList.remove('hidden');
          clientModal.style.display = 'block';
        }
      });
    }

    if (clientForm) {
      clientForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const clientName = (document.getElementById('clientName') as HTMLInputElement)?.value;
        
        try {
          const response = await fetch('/api/admin/clients', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ name: clientName }),
          });
          
          if (response.ok) {
            const newClient = await response.json();
            
            // Add the new client to the dropdown
            const projectClient = document.getElementById('projectClient') as HTMLSelectElement;
            if (projectClient) {
              const option = document.createElement('option');
              option.value = newClient.id.toString();
              option.textContent = newClient.name;
              projectClient.appendChild(option);
              projectClient.value = newClient.id.toString();
            }
            
            // Close the client modal
            (window as any).closeClientModal();
          } else {
            alert('Error creating client');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error creating client');
        }
      });
    }

    (window as any).closeClientModal = function() {
      const clientModal = document.getElementById('clientModal');
      if (clientModal) {
        clientModal.classList.add('hidden');
        clientModal.style.display = 'none';
      }
    }

    // Search functionality
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        const searchTerm = target.value.toLowerCase();
        
        // Get all client sections
        const clientSections = document.querySelectorAll('.bg-white.rounded-lg.shadow.border.border-gray-300.overflow-hidden');
        
        clientSections.forEach(section => {
          const rows = section.querySelectorAll('tbody tr');
          let hasVisibleProjects = false;
          
          rows.forEach(row => {
            const firstCell = row.querySelector('td:first-child');
            const projectName = firstCell?.textContent?.toLowerCase() || '';
            const isVisible = projectName.includes(searchTerm);
            (row as HTMLElement).style.display = isVisible ? '' : 'none';
            
            if (isVisible) {
              hasVisibleProjects = true;
            }
          });
          
          // Hide the entire client section if no projects match the search
          (section as HTMLElement).style.display = hasVisibleProjects ? '' : 'none';
        });
      });
    }

    // Add event listeners for edit and delete buttons
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      console.log('Click event detected on:', target.tagName, target.className, target.closest('button')?.className);
      

      
      // Handle view tasks buttons
      if (target.classList.contains('view-tasks-btn') || target.closest('.view-tasks-btn')) {
        const button = target.classList.contains('view-tasks-btn') ? target : target.closest('.view-tasks-btn') as HTMLElement;
        const projectId = parseInt(button?.getAttribute('data-project-id') || '0');
        const projectName = button?.getAttribute('data-project-name') || 'Unknown Project';
        (window as any).viewProjectTasks(projectId, projectName);
        return;
      }
      
      // Handle edit project buttons
      if (target.classList.contains('edit-project-btn')) {
        const projectId = parseInt(target.getAttribute('data-project-id') || '0');
        (window as any).editProject(projectId);
        return;
      }
      
      // Handle edit project buttons (if clicked on text inside button)
      if (target.closest('.edit-project-btn')) {
        const button = target.closest('.edit-project-btn') as HTMLElement;
        const projectId = parseInt(button.getAttribute('data-project-id') || '0');
        (window as any).editProject(projectId);
        return;
      }
        
        // Handle archive/restore project buttons
        if (target.classList.contains('archive-project-btn') || target.closest('.archive-project-btn')) {
          const button = target.classList.contains('archive-project-btn') ? target : target.closest('.archive-project-btn') as HTMLElement;
          const projectId = parseInt(button?.getAttribute('data-project-id') || '0');
          const isArchived = button?.getAttribute('data-project-archived') === 'true';
          (window as any).toggleProjectArchive(projectId, isArchived);
          return;
        }
      
      // Handle delete project buttons
      if (target.classList.contains('delete-project-btn') || target.closest('.delete-project-btn')) {
        const projectId = parseInt(target.getAttribute('data-project-id') || target.closest('.delete-project-btn')?.getAttribute('data-project-id') || '0');
        const projectName = target.getAttribute('data-project-name') || target.closest('.delete-project-btn')?.getAttribute('data-project-name') || 'Unknown Project';
        
        console.log('Delete project button clicked:', { projectId, projectName });
        (window as any).deleteProject(projectId);
        return;
      }
      

      
      // Handle client modal cancel button
      if (target.id === 'cancelClientBtn') {
        (window as any).closeClientModal();
        return;
      }

      // Handle project modal cancel button
      if (target.id === 'cancelProjectBtn') {
        (window as any).closeProjectModal();
        return;
      }

      // Handle add task button
      if (target.id === 'addTaskBtn' || target.closest('#addTaskBtn')) {
        console.log('Add task button clicked!');
        console.log('Target:', target);
        console.log('Target ID:', target.id);
        console.log('Closest addTaskBtn:', target.closest('#addTaskBtn'));
        (window as any).openQuickAddTaskModal();
        return;
      }

      // Handle cancel quick add task button
      if (target.id === 'cancelQuickAddTaskBtn') {
        (window as any).closeQuickAddTaskModal();
        return;
      }

      // Handle cancel task button
      if (target.id === 'cancelTaskBtn') {
        (window as any).closeTaskModal();
        return;
      }

      // Handle task actions
      console.log('Checking for edit/delete buttons...');
      console.log('Target classes:', target.className);
      console.log('Closest edit button:', target.closest('.edit-task-btn'));
      console.log('Closest delete button:', target.closest('.delete-task-btn'));
      
      if (target.classList.contains('edit-task-btn') || target.closest('.edit-task-btn')) {
        console.log('Edit task button clicked!');
        const button = target.classList.contains('edit-task-btn') ? target : target.closest('.edit-task-btn') as HTMLElement;
        const taskId = parseInt(button?.getAttribute('data-task-id') || '0');
        console.log('Edit task ID:', taskId);
        console.log('Edit task function exists:', typeof (window as any).editTask);
        (window as any).editTask(taskId);
        return;
      }

      if (target.classList.contains('delete-task-btn') || target.closest('.delete-task-btn')) {
        console.log('Delete task button clicked!');
        const button = target.classList.contains('delete-task-btn') ? target : target.closest('.delete-task-btn') as HTMLElement;
        const taskId = parseInt(button?.getAttribute('data-task-id') || '0');
        const taskName = button?.getAttribute('data-task-name') || 'Unknown Task';
        console.log('Delete task ID:', taskId, 'Name:', taskName);
        console.log('Show delete confirm modal function exists:', typeof (window as any).showDeleteConfirmModal);
        (window as any).showDeleteConfirmModal(taskId, taskName);
        return;
      }

      // Handle assign team member button clicks
      if (target.classList.contains('assign-team-member-btn') || target.closest('.assign-team-member-btn')) {
        console.log('Assign team member button clicked!');
        const button = target.classList.contains('assign-team-member-btn') ? target : target.closest('.assign-team-member-btn') as HTMLElement;
        const taskId = parseInt(button?.getAttribute('data-task-id') || '0');
        console.log('Task ID:', taskId);
        console.log('Button element:', button);
        console.log('Button classes:', button?.className);
        if (taskId) {
          
        } else {
          console.log('No task ID found on button');
        }
        return;
      }


    });

    // Client filter functionality
    if (clientFilter) {
      // Hide archived clients by default
      const clientSections = document.querySelectorAll('.bg-white.rounded-lg.shadow.border.border-gray-300.overflow-hidden');
      clientSections.forEach(section => {
        const isArchived = section.getAttribute('data-archived') === 'true';
        if (isArchived) {
          (section as HTMLElement).style.display = 'none';
        }
      });

      clientFilter.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        const selectedClient = target.value;
        const clientSections = document.querySelectorAll('.bg-white.rounded-lg.shadow.border.border-gray-300.overflow-hidden');
        
        clientSections.forEach(section => {
          const clientName = section.querySelector('h3')?.textContent || '';
          const isArchived = section.getAttribute('data-archived') === 'true';
          
          if (!selectedClient) {
            // Show all non-archived clients when "All Clients" is selected
            (section as HTMLElement).style.display = !isArchived ? '' : 'none';
          } else if (selectedClient === 'archived') {
            // Show only archived clients when "Archived" is selected
            (section as HTMLElement).style.display = isArchived ? '' : 'none';
          } else {
            // Show specific client when a client name is selected
            (section as HTMLElement).style.display = clientName === selectedClient ? '' : 'none';
          }
        });
          
          // Apply project filtering after client filtering
          filterProjects();
        });
      }

      // Apply initial filtering
      filterProjects();
    });

    // Tasks management functions
    let currentProjectId: number | null = null;
    let currentProjectName: string | null = null;
    let currentTasks: any[] = [];

    // View project tasks
    async function viewProjectTasks(projectId: number, projectName: string) {
      currentProjectId = projectId;
      currentProjectName = projectName;
      
      const tasksModalTitle = document.getElementById('tasksModalTitle');
      const tasksModalSubtitle = document.getElementById('tasksModalSubtitle');
      const tasksModal = document.getElementById('tasksModal');
      
      if (tasksModalTitle) tasksModalTitle.textContent = `Tasks - ${projectName}`;
      if (tasksModalSubtitle) tasksModalSubtitle.textContent = `Manage tasks for ${projectName}`;
      
      if (tasksModal) {
        tasksModal.classList.remove('hidden');
        tasksModal.style.display = 'block';
      }
      
      // Add event listener to the Add Task button
      setTimeout(() => {
        const addTaskBtn = document.getElementById('addTaskBtn');
        if (addTaskBtn) {
          console.log('Adding event listener to Add Task button');
          addTaskBtn.addEventListener('click', () => {
            console.log('Add Task button clicked via direct listener');
            openQuickAddTaskModal();
          });
        } else {
          console.error('Add Task button not found');
        }
      }, 100);
      
      await loadProjectTasks(projectId);
    }

    // Load project tasks
    async function loadProjectTasks(projectId: number) {
      try {
        console.log('Loading tasks for project:', projectId);
        const response = await fetch(`/api/admin/projects/${projectId}/tasks`, {
          credentials: 'include'
        });
        
        if (response.ok) {
          currentTasks = await response.json();
          console.log('Loaded tasks:', currentTasks);
          renderTasksList();
        } else {
          console.error('Error loading tasks:', response.status, response.statusText);
          alert('Error loading tasks');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error loading tasks');
      }
    }

    // Render tasks list
    function renderTasksList() {
      const tasksList = document.getElementById('tasksList');
      if (!tasksList) return;

      if (currentTasks.length === 0) {
        tasksList.innerHTML = `
          <div class="text-center py-8 text-gray-500">
            <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
            </svg>
            <p class="text-lg font-medium">No tasks yet</p>
            <p class="text-sm">Get started by adding your first task</p>
          </div>
        `;
        return;
      }

      tasksList.innerHTML = currentTasks.map(task => `
        <div class="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <div class="flex items-center gap-3 mb-2">
                <h5 class="text-sm font-medium text-gray-900">${task.name}</h5>
                ${task.priority === 'urgent' ? `
                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                    Urgent
                  </span>
                ` : ''}
                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                  task.status === 'completed' ? 'bg-green-100 text-green-800' :
                  task.status === 'in-progress' ? 'bg-blue-100 text-blue-800' :
                  task.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                  'bg-yellow-100 text-yellow-800'
                                 }">
                   ${task.status.replace('-', ' ').replace(/\b\w/g, (l: string) => l.toUpperCase())}
                 </span>
              </div>
              ${task.description ? `<p class="text-sm text-gray-600 mb-2">${task.description}</p>` : ''}
              <div class="flex items-center gap-4 text-xs text-gray-500 mb-3">
                <span>${task.totalHours ? Math.round(task.totalHours * 10) / 10 : 0} hours</span>
                ${task.assignedUsers ? `<span>Assigned: ${task.assignedUsers}</span>` : ''}
                <span>Created: ${new Date(task.createdAt).toLocaleDateString()}</span>
              </div>
              
              <!-- Team Member Assignment Section -->
              <div class="border-t border-gray-100 pt-3">
                <div class="flex items-center gap-2 mb-2">
                  <label class="text-xs font-medium text-gray-700">Assign Team Members:</label>
                </div>
                <div class="relative flex-1">
                  <input
                    type="text"
                    id="teamMemberSearch-${task.id}"
                    placeholder="Search for team members..."
                    class="w-full px-2 py-1 text-xs border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-[#415058] bg-white text-gray-900"
                    data-task-id="${task.id}"
                  />
                  <div id="teamMemberDropdown-${task.id}" class="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-40 overflow-y-auto hidden">
                    <!-- Search results will be populated here -->
                  </div>
                </div>
                <div id="selectedTeamMembers-${task.id}" class="mt-2 space-y-1">
                  ${task.assignedUsers ? task.assignedUsers.split(', ').map((userName: string) => `
                    <div class="flex items-center justify-between bg-gray-50 px-2 py-1 rounded text-sm border border-gray-200">
                      <div class="flex items-center">
                        <span class="font-medium text-gray-600">${userName}</span>
                      </div>
                      <button 
                        type="button"
                        onclick="unassignTeamMemberFromTask(${task.id}, '${userName}')"
                        class="text-gray-400 hover:text-red-600 ml-2 p-1 rounded hover:bg-red-50"
                        title="Unassign ${userName}"
                      >
                        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                      </button>
                    </div>
                  `).join('') : ''}
                </div>
              </div>
            </div>
            <div class="flex items-center gap-2 ml-4">
              <button
                type="button"
                class="edit-task-btn inline-flex items-center px-2 py-1 text-xs font-medium rounded border border-gray-200 text-gray-700 hover:bg-gray-50 transition-colors"
                data-task-id="${task.id}"
                onclick="editTask(${task.id})"
                title="Edit task"
              >
                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
                Edit
              </button>
              <button
                type="button"
                class="delete-task-btn inline-flex items-center px-2 py-1 text-xs font-medium rounded border border-red-200 text-red-700 hover:bg-red-50 transition-colors"
                data-task-id="${task.id}"
                data-task-name="${task.name}"
                onclick="showDeleteConfirmModal(${task.id}, '${task.name.replace(/'/g, "\\'")}')"
                title="Delete task"
              >
                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
                Delete
              </button>
            </div>
          </div>
        </div>
      `).join('');
      
                // Set up team member search functionality for each task
      currentTasks.forEach(task => {
        console.log('Setting up team member search for task:', task.id);
        setupTaskTeamMemberSearch(task.id);
        

      });
    }

    // Close tasks modal
    function closeTasksModal() {
      const tasksModal = document.getElementById('tasksModal');
      if (tasksModal) {
        tasksModal.classList.add('hidden');
        tasksModal.style.display = 'none';
      }
      currentProjectId = null;
      currentProjectName = null;
      currentTasks = [];
    }

    // Team member assignment variables
    let selectedAssignees: { id: number; name: string; email: string }[] = [];
    
    // Store selected team members for each task to preserve them during re-renders
    let selectedTeamMembersByTask: Record<number, { id: number; name: string; email: string }[]> = {};

    // Open quick add task modal
    function openQuickAddTaskModal() {
      console.log('openQuickAddTaskModal called');
      const quickAddTaskName = document.getElementById('quickAddTaskName') as HTMLInputElement;
      const quickAddTaskPriority = document.getElementById('quickAddTaskPriority') as HTMLSelectElement;
      const quickAddTaskProjectId = document.getElementById('quickAddTaskProjectId') as HTMLInputElement;
      const quickAddTaskModal = document.getElementById('quickAddTaskModal');
      
      console.log('Modal elements found:', { quickAddTaskName, quickAddTaskPriority, quickAddTaskProjectId, quickAddTaskModal });
      console.log('Current project ID:', currentProjectId);
      
      if (quickAddTaskName) quickAddTaskName.value = '';
      if (quickAddTaskPriority) quickAddTaskPriority.value = 'regular';
      if (quickAddTaskProjectId && currentProjectId) quickAddTaskProjectId.value = currentProjectId.toString();
      
      // Reset team member assignment
      selectedAssignees = [];
      updateSelectedAssigneesDisplay();
      
      if (quickAddTaskModal) {
        quickAddTaskModal.classList.remove('hidden');
        quickAddTaskModal.style.display = 'block';
        console.log('Quick add task modal should now be visible');
        
        // Set up team member search functionality
        setupTeamMemberSearch();
      } else {
        console.error('Quick add task modal not found!');
      }
    }

    // Close quick add task modal
    function closeQuickAddTaskModal() {
      const quickAddTaskModal = document.getElementById('quickAddTaskModal');
      if (quickAddTaskModal) {
        quickAddTaskModal.classList.add('hidden');
        quickAddTaskModal.style.display = 'none';
      }
    }

    // Team member search and assignment functions
    function setupTeamMemberSearch() {
      const searchInput = document.getElementById('quickAddTaskAssignees') as HTMLInputElement;
      const dropdown = document.getElementById('quickAddTaskAssigneesDropdown');
      
      if (searchInput && dropdown) {
        searchInput.addEventListener('input', debounce(async (e: Event) => {
          const searchTerm = (e.target as HTMLInputElement).value.trim();
          
          if (searchTerm.length < 2) {
            dropdown.classList.add('hidden');
            return;
          }
          
          try {
            const response = await fetch(`/api/admin/users/search?q=${encodeURIComponent(searchTerm)}&activeOnly=true&limit=10`);
            if (response.ok) {
              const users = await response.json();
              displaySearchResults(users);
            }
          } catch (error) {
            console.error('Error searching users:', error);
          }
        }, 300));
        
        // Close dropdown when clicking outside
        document.addEventListener('click', (e: Event) => {
          if (!searchInput.contains(e.target as Node) && !dropdown.contains(e.target as Node)) {
            dropdown.classList.add('hidden');
          }
        });
      }
    }

    function displaySearchResults(users: any[]) {
      const dropdown = document.getElementById('quickAddTaskAssigneesDropdown');
      if (!dropdown) return;
      
      if (users.length === 0) {
        dropdown.innerHTML = '<div class="px-3 py-2 text-sm text-gray-500">No team members found</div>';
      } else {
        dropdown.innerHTML = users
          .filter(user => !selectedAssignees.some(selected => selected.id === user.id))
          .map(user => `
            <div 
              class="px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 cursor-pointer border-b border-gray-100 last:border-b-0"
              onclick="selectTeamMember(${user.id}, '${user.name}', '${user.email}')"
            >
              <div class="font-medium">${user.name}</div>
              <div class="text-xs text-gray-500">${user.email}</div>
            </div>
          `).join('');
      }
      
      dropdown.classList.remove('hidden');
    }

    function selectTeamMember(id: number, name: string, email: string) {
      if (!selectedAssignees.some(user => user.id === id)) {
        selectedAssignees.push({ id, name, email });
        updateSelectedAssigneesDisplay();
      }
      
      // Clear search input and hide dropdown
      const searchInput = document.getElementById('quickAddTaskAssignees') as HTMLInputElement;
      const dropdown = document.getElementById('quickAddTaskAssigneesDropdown');
      if (searchInput) searchInput.value = '';
      if (dropdown) dropdown.classList.add('hidden');
    }

    function removeTeamMember(id: number) {
      selectedAssignees = selectedAssignees.filter(user => user.id !== id);
      updateSelectedAssigneesDisplay();
    }

    function updateSelectedAssigneesDisplay() {
      const container = document.getElementById('quickAddTaskSelectedAssignees');
      if (!container) return;
      
      if (selectedAssignees.length === 0) {
        container.innerHTML = '<div class="text-sm text-gray-500">No team members assigned</div>';
      } else {
        container.innerHTML = selectedAssignees.map(user => `
          <div class="flex items-center justify-between bg-gray-50 px-2 py-1 rounded text-sm">
            <div>
              <span class="font-medium">${user.name}</span>
              <span class="text-gray-500 ml-2">${user.email}</span>
            </div>
            <button 
              type="button"
              onclick="removeTeamMember(${user.id})"
              class="text-red-500 hover:text-red-700 ml-2"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        `).join('');
      }
    }

    function getSelectedAssignees(): number[] {
      return selectedAssignees.map(user => user.id);
    }

    // Team member search and assignment functions for individual tasks
    function setupTaskTeamMemberSearch(taskId: number) {
      console.log('setupTaskTeamMemberSearch called for taskId:', taskId);
      const searchInput = document.getElementById(`teamMemberSearch-${taskId}`) as HTMLInputElement;
      const dropdown = document.getElementById(`teamMemberDropdown-${taskId}`);
      
      console.log('Search input found:', !!searchInput);
      console.log('Dropdown found:', !!dropdown);
      
      if (searchInput && dropdown) {
        searchInput.addEventListener('input', debounce(async (e: Event) => {
          const searchTerm = (e.target as HTMLInputElement).value.trim();
          
          if (searchTerm.length < 2) {
            dropdown.classList.add('hidden');
            return;
          }
          
          try {
            const response = await fetch(`/api/admin/users/search?q=${encodeURIComponent(searchTerm)}&activeOnly=true&limit=10`);
            if (response.ok) {
              const users = await response.json();
              displayTaskSearchResults(taskId, users);
            }
          } catch (error) {
            console.error('Error searching users:', error);
          }
        }, 300));
        
        // Close dropdown when clicking outside
        document.addEventListener('click', (e: Event) => {
          if (!searchInput.contains(e.target as Node) && !dropdown.contains(e.target as Node)) {
            dropdown.classList.add('hidden');
          }
        });
      }
      
      // Set up assign button click handler
      const assignButton = document.querySelector(`[data-task-id="${taskId}"].assign-team-member-btn`) as HTMLButtonElement;
      if (assignButton) {
        console.log(`Setting up direct click handler for assign button on task ${taskId}`);
        assignButton.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();

        });
      } else {
        console.log(`Assign button not found for task ${taskId}`);
      }
    }

    function displayTaskSearchResults(taskId: number, users: any[]) {
      const dropdown = document.getElementById(`teamMemberDropdown-${taskId}`);
      if (!dropdown) return;
      
      if (users.length === 0) {
        dropdown.innerHTML = '<div class="px-3 py-2 text-sm text-gray-500">No team members found</div>';
      } else {
        dropdown.innerHTML = users.map(user => `
          <div 
            class="px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 cursor-pointer border-b border-gray-100 last:border-b-0"
            onclick="selectTaskTeamMember(${taskId}, ${user.id}, '${user.name}', '${user.email}')"
          >
            <div class="font-medium">${user.name}</div>
            <div class="text-xs text-gray-500">${user.email}</div>
          </div>
        `).join('');
      }
      
      dropdown.classList.remove('hidden');
    }

    async function selectTaskTeamMember(taskId: number, userId: number, userName: string, userEmail: string) {
      console.log('selectTaskTeamMember called:', { taskId, userId, userName, userEmail });
      
      // Check if user is already assigned to this task
      const task = currentTasks.find(t => t.id === taskId);
      if (task && task.assignedUsers) {
        const currentAssignedUsers = task.assignedUsers.split(', ');
        if (currentAssignedUsers.includes(userName)) {
          console.log('User already assigned to this task');
          return;
        }
      }
      
      // Clear search input and hide dropdown
      const searchInput = document.getElementById(`teamMemberSearch-${taskId}`) as HTMLInputElement;
      const dropdown = document.getElementById(`teamMemberDropdown-${taskId}`);
      
      if (searchInput) {
        searchInput.value = '';
      }
      
      if (dropdown) {
        dropdown.classList.add('hidden');
      }
      
      // Show loading state in the search input
      if (searchInput) {
        searchInput.disabled = true;
        searchInput.placeholder = `Assigning ${userName}...`;
        searchInput.classList.add('opacity-50');
      }
      
      // Add a temporary loading indicator to the selected team members area
      const selectedContainer = document.getElementById(`selectedTeamMembers-${taskId}`);
      if (selectedContainer) {
        const loadingDiv = document.createElement('div');
        loadingDiv.id = `loading-${taskId}-${userId}`;
        loadingDiv.className = 'flex items-center justify-between bg-blue-50 px-2 py-1 rounded text-sm border border-blue-200 animate-pulse';
        loadingDiv.innerHTML = `
          <div class="flex items-center">
            <svg class="w-3 h-3 mr-2 animate-spin text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            <span class="font-medium text-blue-800">${userName}</span>
            <span class="text-blue-600 ml-2 text-xs">Assigning...</span>
          </div>
        `;
        selectedContainer.appendChild(loadingDiv);
      }
      
      // Automatically assign the user to the task
      try {
        // Get current assignments for this task
        const currentAssignedUsers = task?.assignedUsers || '';
        const currentUserNames = currentAssignedUsers.split(', ').filter((name: string) => name.trim() !== '');
        
        // Get user IDs for currently assigned users
        const currentUserIds: number[] = [];
        for (const name of currentUserNames) {
          try {
            const response = await fetch(`/api/admin/users/search?q=${encodeURIComponent(name)}&activeOnly=true&limit=1`);
            if (response.ok) {
              const users = await response.json();
              if (users.length > 0 && users[0].name === name) {
                currentUserIds.push(users[0].id);
              }
            }
          } catch (error) {
            console.error(`Error finding user ID for ${name}:`, error);
          }
        }
        
        // Add the new user to the list
        const allUserIds = [...currentUserIds, userId];
        
        console.log('Current user IDs:', currentUserIds);
        console.log('New user ID:', userId);
        console.log('Combined user IDs:', allUserIds);
        
        // Assign all users (current + new) to the task
        const requestBody = {
          taskId: taskId,
          userIds: allUserIds
        };
        console.log('Sending assignment request:', requestBody);
        
        const response = await fetch('/api/admin/tasks/assign', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify(requestBody),
        });
        
        if (response.ok) {
          console.log(`Successfully assigned ${userName} to task ${taskId}`);
          
          // Show success feedback briefly before reloading
          const loadingDiv = document.getElementById(`loading-${taskId}-${userId}`);
          if (loadingDiv) {
            loadingDiv.className = 'flex items-center justify-between bg-green-50 px-2 py-1 rounded text-sm border border-green-200';
            loadingDiv.innerHTML = `
              <div class="flex items-center">
                <svg class="w-3 h-3 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <span class="font-medium text-green-800">${userName}</span>
                <span class="text-green-600 ml-2 text-xs">Assigned!</span>
              </div>
            `;
          }
          
          // Wait a moment to show success state, then reload
          setTimeout(async () => {
            await loadProjectTasks(currentProjectId!);
          }, 500);
        } else {
          console.error('Error assigning user to task');
          
          // Show error state
          const loadingDiv = document.getElementById(`loading-${taskId}-${userId}`);
          if (loadingDiv) {
            loadingDiv.className = 'flex items-center justify-between bg-red-50 px-2 py-1 rounded text-sm border border-red-200';
            loadingDiv.innerHTML = `
              <div class="flex items-center">
                <svg class="w-3 h-3 mr-2 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                <span class="font-medium text-red-800">${userName}</span>
                <span class="text-red-600 ml-2 text-xs">Failed to assign</span>
              </div>
            `;
          }
          
          // Reset search input
          if (searchInput) {
            searchInput.disabled = false;
            searchInput.placeholder = 'Search for team members...';
            searchInput.classList.remove('opacity-50');
          }
          
          // Remove error state after 3 seconds
          setTimeout(() => {
            const loadingDiv = document.getElementById(`loading-${taskId}-${userId}`);
            if (loadingDiv) {
              loadingDiv.remove();
            }
          }, 3000);
        }
      } catch (error) {
        console.error('Error assigning user:', error);
        
        // Show error state
        const loadingDiv = document.getElementById(`loading-${taskId}-${userId}`);
        if (loadingDiv) {
          loadingDiv.className = 'flex items-center justify-between bg-red-50 px-2 py-1 rounded text-sm border border-red-200';
          loadingDiv.innerHTML = `
            <div class="flex items-center">
              <svg class="w-3 h-3 mr-2 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
              <span class="font-medium text-red-800">${userName}</span>
              <span class="text-red-600 ml-2 text-xs">Error occurred</span>
            </div>
          `;
        }
        
        // Reset search input
        if (searchInput) {
          searchInput.disabled = false;
          searchInput.placeholder = 'Search for team members...';
          searchInput.classList.remove('opacity-50');
        }
        
        // Remove error state after 3 seconds
        setTimeout(() => {
          const loadingDiv = document.getElementById(`loading-${taskId}-${userId}`);
          if (loadingDiv) {
            loadingDiv.remove();
          }
        }, 3000);
      }
    }







    // Unassign team member from task (remove from actual assignment)
    async function unassignTeamMemberFromTask(taskId: number, userName: string) {
      console.log('unassignTeamMemberFromTask called:', { taskId, userName });
      
      if (confirm(`Are you sure you want to unassign ${userName} from this task?`)) {
        try {
          // Get current task to find the user ID
          const task = currentTasks.find(t => t.id === taskId);
          if (!task) return;
          
          // Get current assigned users
          const currentAssignedUsers = task.assignedUsers || '';
          const assignedUserNames = currentAssignedUsers.split(', ').filter((name: string) => name.trim() !== '');
          
          // Remove the specific user
          const updatedUserNames = assignedUserNames.filter((name: string) => name !== userName);
          
          // Get user IDs for the remaining users
          const remainingUserIds: number[] = [];
          for (const name of updatedUserNames) {
            // Search for user by name to get their ID
            try {
              const response = await fetch(`/api/admin/users/search?q=${encodeURIComponent(name)}&activeOnly=true&limit=1`);
              if (response.ok) {
                const users = await response.json();
                if (users.length > 0 && users[0].name === name) {
                  remainingUserIds.push(users[0].id);
                }
              }
            } catch (error) {
              console.error(`Error finding user ID for ${name}:`, error);
            }
          }
          
          // Update assignments with remaining users
          const response = await fetch('/api/admin/tasks/assign', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({
              taskId: taskId,
              userIds: remainingUserIds
            }),
          });
          
          if (response.ok) {
            await loadProjectTasks(currentProjectId!);
          } else {
            alert('Error unassigning team member from task');
          }
        } catch (error) {
          console.error('Error unassigning team member from task:', error);
          alert('Error unassigning team member from task');
        }
      }
    }

    // Debounce utility function
    function debounce(func: Function, wait: number) {
      let timeout: NodeJS.Timeout;
      return function executedFunction(...args: any[]) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    // Open add task modal
    function openAddTaskModal() {
      const taskModalTitle = document.getElementById('taskModalTitle');
      const taskId = document.getElementById('taskId') as HTMLInputElement;
      const taskName = document.getElementById('taskName') as HTMLInputElement;
      const taskDescription = document.getElementById('taskDescription') as HTMLTextAreaElement;
      const taskStatus = document.getElementById('taskStatus') as HTMLSelectElement;
      const taskPriority = document.getElementById('taskPriority') as HTMLSelectElement;
      const taskProjectId = document.getElementById('taskProjectId') as HTMLInputElement;
      const taskModal = document.getElementById('taskModal');
      
      if (taskModalTitle) taskModalTitle.textContent = 'Add New Task';
      if (taskId) taskId.value = '';
      if (taskName) taskName.value = '';
      if (taskDescription) taskDescription.value = '';
      if (taskStatus) taskStatus.value = 'pending';
      if (taskPriority) taskPriority.value = 'regular';
      if (taskProjectId && currentProjectId) taskProjectId.value = currentProjectId.toString();
      
      if (taskModal) {
        taskModal.classList.remove('hidden');
        taskModal.style.display = 'block';
      }
    }

    // Close task modal
    function closeTaskModal() {
      const taskModal = document.getElementById('taskModal');
      if (taskModal) {
        taskModal.classList.add('hidden');
        taskModal.style.display = 'none';
      }
    }

    // Edit task
    async function editTask(taskId: number) {
      console.log('editTask function called with taskId:', taskId);
      const task = currentTasks.find(t => t.id === taskId);
      console.log('Found task:', task);
      if (!task) {
        console.log('Task not found!');
        return;
      }

      // Populate the edit task modal
      const editTaskId = document.getElementById('editTaskId') as HTMLInputElement;
      const editTaskName = document.getElementById('editTaskName') as HTMLInputElement;
      const editTaskStatus = document.getElementById('editTaskStatus') as HTMLSelectElement;
      const editTaskPriority = document.getElementById('editTaskPriority') as HTMLSelectElement;
      const editTaskModal = document.getElementById('editTaskModal');
      
      console.log('Edit modal elements found:', { editTaskId, editTaskName, editTaskStatus, editTaskPriority, editTaskModal });
      
      if (editTaskId) editTaskId.value = task.id.toString();
      if (editTaskName) editTaskName.value = task.name;
      if (editTaskStatus) editTaskStatus.value = task.status;
      if (editTaskPriority) editTaskPriority.value = task.priority;
      
      if (editTaskModal) {
        editTaskModal.classList.remove('hidden');
        editTaskModal.style.display = 'block';
        console.log('Edit task modal should now be visible');
      } else {
        console.error('Edit task modal not found!');
      }
    }

    // Variables for delete confirmation
    let pendingDeleteTaskId: number | null = null;
    let pendingDeleteTaskName: string | null = null;

    // Show delete confirmation modal
    function showDeleteConfirmModal(taskId: number, taskName: string) {
      console.log('showDeleteConfirmModal called with:', { taskId, taskName });
      pendingDeleteTaskId = taskId;
      pendingDeleteTaskName = taskName;
      
      const modal = document.getElementById('deleteConfirmModal');
      const itemNameSpan = document.getElementById('deleteItemName');
      
      console.log('Modal elements found:', { modal, itemNameSpan });
      
      if (modal && itemNameSpan) {
        itemNameSpan.textContent = `task "${taskName}"`;
        modal.classList.remove('hidden');
        modal.style.display = 'block';
        console.log('Delete confirmation modal should now be visible');
      }
    }

    // Delete task function
    async function deleteTask(taskId: number, taskName: string) {
      console.log('deleteTask function called with:', { taskId, taskName });
      
      try {
        const response = await fetch(`/api/admin/tasks/${taskId}`, {
          method: 'DELETE',
          credentials: 'include',
        });
        
        if (response.ok) {
          console.log('Task deleted successfully');
          
          // Show success message
          const successMessage = document.createElement('div');
          successMessage.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
          successMessage.textContent = `Task "${taskName}" deleted successfully. Time entries have been preserved for record keeping.`;
          document.body.appendChild(successMessage);
          
          // Remove success message after 5 seconds
          setTimeout(() => {
            if (successMessage.parentNode) {
              successMessage.parentNode.removeChild(successMessage);
            }
          }, 5000);
          
          // Reload the tasks list
          if (currentProjectId) {
            await loadProjectTasks(currentProjectId);
          }
        } else {
          const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
          alert(`Error deleting task: ${errorData.error || 'Unknown error'}`);
        }
      } catch (error) {
        console.error('Error deleting task:', error);
        alert(`Error deleting task: ${error instanceof Error ? error.message : 'Unknown error'}`);
      }
    }

    // Close delete confirmation modal
    function closeDeleteConfirmModal() {
      const modal = document.getElementById('deleteConfirmModal');
      if (modal) {
        modal.classList.add('hidden');
        modal.style.display = 'none';
      }
      pendingDeleteTaskId = null;
      pendingDeleteTaskName = null;
    }

    // Close edit task modal
    function closeEditTaskModal() {
      const modal = document.getElementById('editTaskModal');
      if (modal) {
        modal.classList.add('hidden');
        modal.style.display = 'none';
      }
    }

    // Save edited task
    async function saveEditedTask() {
      const taskId = (document.getElementById('editTaskId') as HTMLInputElement)?.value;
      const taskName = (document.getElementById('editTaskName') as HTMLInputElement)?.value;
      const taskStatus = (document.getElementById('editTaskStatus') as HTMLSelectElement)?.value;
      const taskPriority = (document.getElementById('editTaskPriority') as HTMLSelectElement)?.value;
      
      if (!taskId || !taskName) {
        alert('Please fill in all required fields');
        return;
      }

      try {
        // Show loading state
        const saveButton = document.getElementById('saveEditTaskBtn') as HTMLButtonElement;
        if (saveButton) {
          saveButton.disabled = true;
          saveButton.innerHTML = `
            <svg class="w-4 h-4 mr-1.5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Saving...
          `;
        }

        const response = await fetch('/api/admin/tasks', {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify({ 
            id: taskId, 
            name: taskName,
            status: taskStatus,
            priority: taskPriority,
            projectId: currentProjectId
          }),
        });
        
        if (response.ok) {
          // Reset button state first
          if (saveButton) {
            saveButton.disabled = false;
            saveButton.innerHTML = `
              <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              Save Changes
            `;
          }
          
          // Show success message
          const successMessage = document.createElement('div');
          successMessage.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
          successMessage.textContent = 'Task updated successfully';
          document.body.appendChild(successMessage);
          
          // Remove success message after 3 seconds
          setTimeout(() => {
            if (successMessage.parentNode) {
              successMessage.parentNode.removeChild(successMessage);
            }
          }, 3000);
          
          closeEditTaskModal();
          await loadProjectTasks(currentProjectId!);
        } else {
          const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
          alert(`Error updating task: ${errorData.error || 'Unknown error'}`);
          
          // Reset button state
          if (saveButton) {
            saveButton.disabled = false;
            saveButton.innerHTML = `
              <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              Save Changes
            `;
          }
        }
      } catch (error) {
        console.error('Error:', error);
        alert(`Error updating task: ${error instanceof Error ? error.message : 'Unknown error'}`);
        
        // Reset button state
        const saveButton = document.getElementById('saveEditTaskBtn') as HTMLButtonElement;
        if (saveButton) {
          saveButton.disabled = false;
          saveButton.innerHTML = `
            <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            Save Changes
          `;
        }
      }
    }





    // Quick add task form submission
    const quickAddTaskForm = document.getElementById('quickAddTaskForm');
    if (quickAddTaskForm) {
      quickAddTaskForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const taskName = (document.getElementById('quickAddTaskName') as HTMLInputElement)?.value;
        const taskPriority = (document.getElementById('quickAddTaskPriority') as HTMLSelectElement)?.value;
        const taskProjectId = (document.getElementById('quickAddTaskProjectId') as HTMLInputElement)?.value;
        
        try {
          // First create the task
          const taskResponse = await fetch('/api/admin/tasks', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ 
              name: taskName, 
              description: '',
              projectId: parseInt(taskProjectId), 
              status: 'pending',
              priority: taskPriority
            }),
          });
          
          if (taskResponse.ok) {
            const newTask = await taskResponse.json();
            
            // If there are selected team members, assign them to the task
            const selectedAssignees = getSelectedAssignees();
            if (selectedAssignees.length > 0) {
              try {
                const assignmentResponse = await fetch('/api/admin/tasks/assign', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  credentials: 'include',
                  body: JSON.stringify({
                    taskId: newTask.id,
                    userIds: selectedAssignees
                  }),
                });
                
                if (!assignmentResponse.ok) {
                  console.error('Error assigning team members to task');
                }
              } catch (assignmentError) {
                console.error('Error assigning team members:', assignmentError);
              }
            }
            
            closeQuickAddTaskModal();
            await loadProjectTasks(currentProjectId!);
          } else {
            alert('Error adding task');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error adding task');
        }
      });
    }

    // Task form submission
    const taskForm = document.getElementById('taskForm');
    if (taskForm) {
      taskForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const taskId = (document.getElementById('taskId') as HTMLInputElement)?.value;
        const taskName = (document.getElementById('taskName') as HTMLInputElement)?.value;
        const taskDescription = (document.getElementById('taskDescription') as HTMLTextAreaElement)?.value;
        const taskStatus = (document.getElementById('taskStatus') as HTMLSelectElement)?.value;
        const taskPriority = (document.getElementById('taskPriority') as HTMLSelectElement)?.value;
        const taskProjectId = (document.getElementById('taskProjectId') as HTMLInputElement)?.value;
        
        const method = taskId ? 'PUT' : 'POST';
        
        try {
          const response = await fetch('/api/admin/tasks', {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ 
              id: taskId, 
              name: taskName, 
              description: taskDescription,
              projectId: parseInt(taskProjectId), 
              status: taskStatus,
              priority: taskPriority
            }),
          });
          
          if (response.ok) {
            closeTaskModal();
            await loadProjectTasks(currentProjectId!);
          } else {
            alert('Error saving task');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error saving task');
        }
      });
    }





    // Make functions globally available
    (window as any).viewProjectTasks = viewProjectTasks;
    (window as any).closeTasksModal = closeTasksModal;
    (window as any).openQuickAddTaskModal = openQuickAddTaskModal;
    (window as any).closeQuickAddTaskModal = closeQuickAddTaskModal;
    (window as any).openAddTaskModal = openAddTaskModal;
    (window as any).closeTaskModal = closeTaskModal;
    (window as any).editTask = editTask;
    (window as any).deleteTask = deleteTask;
    (window as any).showDeleteConfirmModal = showDeleteConfirmModal;
    (window as any).closeDeleteConfirmModal = closeDeleteConfirmModal;
    (window as any).closeEditTaskModal = closeEditTaskModal;
    (window as any).saveEditedTask = saveEditedTask;
    (window as any).selectTeamMember = selectTeamMember;
    (window as any).removeTeamMember = removeTeamMember;
    (window as any).selectTaskTeamMember = selectTaskTeamMember;
    (window as any).unassignTeamMemberFromTask = unassignTeamMemberFromTask;
    
    // Load project statistics dynamically to avoid complex database queries
    async function loadProjectStats() {
      try {
        const response = await fetch('/api/admin/projects/stats', {
          credentials: 'include'
        });
        
        if (response.ok) {
          const stats = await response.json();
          
          // Update task counts and total hours in the UI
          stats.forEach((stat: any) => {
            const taskCountCell = document.querySelector(`[data-project-id="${stat.projectId}"] .task-count`);
            const totalHoursCell = document.querySelector(`[data-project-id="${stat.projectId}"] .total-hours`);
            
            if (taskCountCell) {
              taskCountCell.textContent = `${stat.taskCount} tasks`;
            }
            
            if (totalHoursCell) {
              totalHoursCell.textContent = `${Math.round(stat.totalHours * 10) / 10} hours`;
            }
          });
        }
      } catch (error) {
        console.error('Error loading project stats:', error);
      }
    }
    
    // Load stats when page loads
    document.addEventListener('DOMContentLoaded', loadProjectStats);

  </script>
</AdminLayout> 