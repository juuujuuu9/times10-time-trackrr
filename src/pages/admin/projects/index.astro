---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { projects, clients, tasks, timeEntries } from '../../../db/schema';
import { count, sql, eq } from 'drizzle-orm';

// Get all projects with client info, task counts, and total hours
// For now, we'll include all projects from active clients (both archived and non-archived)
// The filtering will be done on the client side
const allProjects = await db
  .select({
    id: projects.id,
    name: projects.name,
    createdAt: projects.createdAt,
    clientId: projects.clientId,
    clientName: clients.name,
    clientArchived: clients.archived,
    projectArchived: projects.archived,
    taskCount: sql<number>`COUNT(DISTINCT ${tasks.id})`,
    totalHours: sql<number>`COALESCE(SUM(
      CASE 
        WHEN ${timeEntries.durationManual} IS NOT NULL 
        THEN ${timeEntries.durationManual} / 3600
        WHEN ${timeEntries.endTime} IS NOT NULL 
        THEN EXTRACT(EPOCH FROM (${timeEntries.endTime} - ${timeEntries.startTime})) / 3600
        ELSE 0
      END
    ), 0)`,
  })
  .from(projects)
  .leftJoin(clients, eq(projects.clientId, clients.id))
  .leftJoin(tasks, eq(projects.id, tasks.projectId))
  .leftJoin(timeEntries, eq(tasks.id, timeEntries.taskId))
  .where(eq(clients.archived, false)) // Only show projects from active clients
  .groupBy(projects.id, clients.name, clients.archived, projects.archived)
  .orderBy(projects.name);

// Group projects by client
const projectsByClient = allProjects.reduce((acc, project) => {
  const clientName = project.clientName || 'Unknown Client';
  if (!acc[clientName]) {
    acc[clientName] = [];
  }
  acc[clientName].push(project);
  return acc;
}, {} as Record<string, typeof allProjects>);

// Filter to show only non-archived clients by default
const activeProjectsByClient = Object.entries(projectsByClient).reduce((acc, [clientName, clientProjects]) => {
  const firstProject = clientProjects[0];
  if (!firstProject?.clientArchived) {
    acc[clientName] = clientProjects;
  }
  return acc;
}, {} as Record<string, typeof allProjects>);

// Get all clients for the dropdown
const allClients = await db.select().from(clients).where(eq(clients.archived, false)).orderBy(clients.name);
---

<AdminLayout title="Projects" currentPage="projects">
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Projects</h1>
        <p class="text-gray-600">Manage projects organized by client</p>
      </div>
      <button
        id="createProjectBtn"
        class="inline-flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105"
      >
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        Add Project
      </button>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg shadow border border-gray-300 p-6">
      <div class="flex flex-col sm:flex-row gap-4">
        <div class="flex-1">
          <label for="search" class="block text-sm font-medium text-gray-700 mb-1">Search</label>
          <input
            type="text"
            id="search"
            placeholder="Search projects..."
            class="w-[calc(100%-5rem)] px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
          />
        </div>
        <div class="sm:w-48">
          <label for="clientFilter" class="block text-sm font-medium text-gray-700 mb-1">Filter by Client</label>
          <select
            id="clientFilter"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
          >
            <option value="">All Clients</option>
            {allClients.map((client) => (
              <option value={client.name}>{client.name}</option>
            ))}
            <option value="archived">[Archived Clients]</option>
          </select>
        </div>
        <div class="sm:w-48">
          <label class="block text-sm font-medium text-gray-700 mb-1">Show Archived Projects</label>
          <div class="flex items-center">
            <button
              id="showArchivedToggle"
              class="relative inline-flex h-6 w-11 items-center rounded-full bg-gray-200 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2"
              role="switch"
              aria-checked="false"
            >
              <span
                id="toggleThumb"
                class="inline-block h-4 w-4 transform rounded-full bg-white transition-transform shadow-sm"
              ></span>
            </button>
            <span id="toggleLabel" class="ml-2 text-sm text-gray-600">Off</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Projects by Client -->
    <div class="space-y-6">
      {Object.entries(projectsByClient).map(([clientName, clientProjects]) => {
        // Find the first project to get client archived status
        const firstProject = clientProjects[0];
        const isArchived = firstProject?.clientArchived || false;
        
        return (
        <div class="bg-white rounded-lg shadow border border-gray-300 overflow-hidden hover:shadow-lg transition-all duration-200 hover:border-gray-400" data-archived={isArchived}>
          <div class="px-6 py-4 bg-gray-50 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">{clientName}</h3>
            <p class="text-sm text-gray-600">{clientProjects.length} projects</p>
          </div>
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                    Project Name
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                    Tasks
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                    Total Hours
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                    Created Date
                  </th>
                  <th class="px-6 py-3 text-right text-xs font-medium text-gray-700 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                {clientProjects.map((project) => (
                  <tr class="hover:bg-gray-50" data-project-archived={project.projectArchived}>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="flex items-center">
                      <div class="text-sm font-medium text-gray-900">{project.name}</div>
                        {project.projectArchived && (
                          <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-600">
                            Archived
                          </span>
                        )}
                      </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-200 text-gray-700">
                        {project.taskCount} tasks
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {project.totalHours ? Math.round(project.totalHours * 10) / 10 : 0} hours
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
                      {new Date(project.createdAt).toLocaleDateString()}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div class="flex justify-end space-x-2">
                        <button
                          type="button"
                          class="view-tasks-btn inline-flex items-center px-3 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105"
                          data-project-id={project.id}
                          data-project-name={project.name}
                          title="View project tasks"
                        >
                          <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                          </svg>
                          View Tasks
                        </button>
                        <button
                          type="button"
                          class="edit-project-btn inline-flex items-center px-3 py-2 bg-white hover:bg-gray-100 text-gray-700 text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 border border-gray-300"
                          data-project-id={project.id}
                          title="Edit project details"
                        >
                          <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                          </svg>
                          Edit
                        </button>
                        <button
                          type="button"
                          class="archive-project-btn inline-flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 border"
                          data-project-id={project.id}
                          data-project-name={project.name}
                          data-project-archived={project.projectArchived}
                          class={project.projectArchived 
                            ? "bg-green-100 hover:bg-green-200 text-green-800 border-green-300" 
                            : "bg-gray-200 hover:bg-gray-300 text-gray-700 border-gray-300"
                          }
                          title={project.projectArchived ? "Restore project" : "Archive project"}
                        >
                          <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={project.projectArchived ? "M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" : "M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4"}></path>
                          </svg>
                          {project.projectArchived ? 'Restore' : 'Archive'}
                        </button>
                        <button
                          type="button"
                          class="delete-project-btn text-red-500 hover:text-red-600 transition-colors p-2 rounded-lg hover:bg-red-50"
                          data-project-id={project.id}
                          data-project-name={project.name}
                          title="Delete project"
                        >
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                          </svg>
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
        );
      })}
    </div>
  </div>

  <!-- Create/Edit Project Modal -->
        <div id="projectModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] border border-gray-300 flex flex-col" onclick="event.stopPropagation()">
        <div class="px-6 py-4 border-b border-gray-300 flex-shrink-0">
          <h3 id="projectModalTitle" class="text-lg font-medium text-gray-900">Add New Project</h3>
        </div>
        <div class="flex-1 overflow-y-auto" style="scrollbar-width: thin; scrollbar-color: #9CA3AF #E5E7EB;">
          <form id="projectForm" class="px-6 py-4">
            <input type="hidden" id="projectId" />
            <div class="mb-4">
              <label for="projectName" class="block text-sm font-medium text-gray-700 mb-1">
                Project Name
              </label>
              <input
                type="text"
                id="projectName"
                required
                class="w-[calc(100%-1.5rem)] px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-gray-900"
              />
            </div>
            <div class="mb-4">
              <label for="projectClient" class="block text-sm font-medium text-gray-700 mb-1">
                Client
              </label>
              <div class="flex space-x-2">
                <select
                  id="projectClient"
                  required
                  class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-gray-900"
                >
                  <option value="">Select a client</option>
                  {allClients.map((client) => (
                    <option value={client.id}>{client.name}</option>
                  ))}
                </select>
                <button
                  type="button"
                  id="createClientBtn"
                  class="inline-flex items-center px-3 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-md transition-all duration-200 text-sm font-medium shadow-sm hover:shadow-md"
                >
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                  </svg>
                  New
                </button>
              </div>
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                id="cancelProjectBtn"
                class="inline-flex items-center px-4 py-2 text-gray-700 bg-white hover:bg-gray-50 rounded-md transition-all duration-200 font-medium border border-gray-300"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                Cancel
              </button>
              <button
                type="submit"
                class="inline-flex items-center px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-md transition-all duration-200 font-medium shadow-sm hover:shadow-md"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                Save Project
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Create New Client Modal -->
        <div id="clientModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] border border-gray-300 flex flex-col" onclick="event.stopPropagation()">
        <div class="px-6 py-4 border-b border-gray-300 flex-shrink-0">
          <h3 class="text-lg font-medium text-gray-900">Create New Client</h3>
        </div>
        <div class="flex-1 overflow-y-auto" style="scrollbar-width: thin; scrollbar-color: #9CA3AF #E5E7EB;">
          <form id="clientForm" class="px-6 py-4">
            <div class="mb-4">
              <label for="clientName" class="block text-sm font-medium text-gray-700 mb-1">
                Client Name
              </label>
              <input
                type="text"
                id="clientName"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-gray-900"
                placeholder="Enter client name"
              />
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                id="cancelClientBtn"
                class="inline-flex items-center px-4 py-2 text-gray-700 bg-white hover:bg-gray-50 rounded-md transition-all duration-200 font-medium border border-gray-300"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                Cancel
              </button>
              <button
                type="submit"
                class="inline-flex items-center px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-md transition-all duration-200 font-medium shadow-sm hover:shadow-md"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                Create Client
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Tasks Modal -->
  <div id="tasksModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] border border-gray-300 flex flex-col" onclick="event.stopPropagation()">
        <div class="px-6 py-4 border-b border-gray-300 flex-shrink-0 flex justify-between items-center">
          <div>
            <h3 id="tasksModalTitle" class="text-lg font-medium text-gray-900">Project Tasks</h3>
            <p id="tasksModalSubtitle" class="text-sm text-gray-600">Manage tasks for this project</p>
          </div>
          <button
            type="button"
            id="closeTasksModal"
            class="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div class="flex-1 overflow-y-auto p-6">
          <div class="mb-4 flex justify-between items-center">
            <h4 class="text-md font-medium text-gray-900">Tasks</h4>
            <button
              type="button"
              id="addTaskBtn"
              class="inline-flex items-center px-3 py-2 bg-gray-600 hover:bg-gray-700 text-white text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md"
            >
              <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              Add Task
            </button>
          </div>
          <div id="tasksList" class="space-y-3">
            <!-- Tasks will be loaded here -->
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Add/Edit Task Modal -->
  <div id="taskModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] border border-gray-300 flex flex-col" onclick="event.stopPropagation()">
        <div class="px-6 py-4 border-b border-gray-300 flex-shrink-0">
          <h3 id="taskModalTitle" class="text-lg font-medium text-gray-900">Add New Task</h3>
        </div>
        <div class="flex-1 overflow-y-auto" style="scrollbar-width: thin; scrollbar-color: #9CA3AF #E5E7EB;">
          <form id="taskForm" class="px-6 py-4">
            <input type="hidden" id="taskId" />
            <input type="hidden" id="taskProjectId" />
            <div class="mb-4">
              <label for="taskName" class="block text-sm font-medium text-gray-700 mb-1">
                Task Name
              </label>
              <input
                type="text"
                id="taskName"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-gray-900"
                placeholder="Enter task name"
              />
            </div>
            <div class="mb-4">
              <label for="taskDescription" class="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <textarea
                id="taskDescription"
                rows="3"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-gray-900"
                placeholder="Enter task description"
              ></textarea>
            </div>
            <div class="mb-4">
              <label for="taskStatus" class="block text-sm font-medium text-gray-700 mb-1">
                Status
              </label>
              <select
                id="taskStatus"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-gray-900"
              >
                <option value="pending">Pending</option>
                <option value="in-progress">In Progress</option>
                <option value="completed">Completed</option>
                <option value="cancelled">Cancelled</option>
              </select>
            </div>
            <div class="mb-4">
              <label for="taskPriority" class="block text-sm font-medium text-gray-700 mb-1">
                Priority
              </label>
              <select
                id="taskPriority"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-gray-900"
              >
                <option value="regular">Regular</option>
                <option value="urgent">Urgent</option>
              </select>
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                id="cancelTaskBtn"
                class="inline-flex items-center px-4 py-2 text-gray-700 bg-white hover:bg-gray-50 rounded-md transition-all duration-200 font-medium border border-gray-300"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                Cancel
              </button>
              <button
                type="submit"
                class="inline-flex items-center px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-md transition-all duration-200 font-medium shadow-sm hover:shadow-md"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                Save Task
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Project management JavaScript
    document.addEventListener('DOMContentLoaded', function() {
      const createProjectBtn = document.getElementById('createProjectBtn');
      const projectForm = document.getElementById('projectForm');
      const searchInput = document.getElementById('search');
      const clientFilter = document.getElementById('clientFilter');
      const showArchivedToggle = document.getElementById('showArchivedToggle');
      const toggleThumb = document.getElementById('toggleThumb');
      const toggleLabel = document.getElementById('toggleLabel');

      // Toggle functionality for showing archived projects
      let showArchivedProjects = localStorage.getItem('showArchivedProjects') === 'true';
      
      // Set initial toggle state
      if (showArchivedProjects) {
        showArchivedToggle?.classList.remove('bg-gray-200');
        showArchivedToggle?.classList.add('bg-gray-600');
        toggleThumb?.classList.add('translate-x-5');
        toggleLabel!.textContent = 'On';
        showArchivedToggle?.setAttribute('aria-checked', 'true');
      }

      if (showArchivedToggle && toggleThumb && toggleLabel) {
        showArchivedToggle.addEventListener('click', async () => {
          showArchivedProjects = !showArchivedProjects;
          
          // Update toggle appearance
          if (showArchivedProjects) {
            showArchivedToggle.classList.remove('bg-gray-200');
            showArchivedToggle.classList.add('bg-gray-600');
            toggleThumb.classList.add('translate-x-5');
            toggleLabel.textContent = 'On';
          } else {
            showArchivedToggle.classList.remove('bg-gray-600');
            showArchivedToggle.classList.add('bg-gray-200');
            toggleThumb.classList.remove('translate-x-5');
            toggleLabel.textContent = 'Off';
          }
          
          // Update aria-checked attribute
          showArchivedToggle.setAttribute('aria-checked', showArchivedProjects.toString());
          
          // Save state to localStorage
          localStorage.setItem('showArchivedProjects', showArchivedProjects.toString());
          
          // Apply filtering
          filterProjects();
        });
      }

      // Function to filter projects based on current settings
      function filterProjects() {
        console.log('Filtering projects, showArchivedProjects:', showArchivedProjects);
        const clientSections = document.querySelectorAll('.bg-white.rounded-lg.shadow.border.border-gray-300.overflow-hidden');
        
        clientSections.forEach(section => {
          const isClientArchived = section.getAttribute('data-archived') === 'true';
          const projectRows = section.querySelectorAll('tbody tr');
          let hasVisibleProjects = false;
          
          projectRows.forEach(row => {
            const isProjectArchived = row.getAttribute('data-project-archived') === 'true';
            
            // Show project if:
            // 1. Client is not archived AND (project is not archived OR showArchivedProjects is true)
            // 2. OR if we're showing archived clients (handled by client filter)
            const shouldShow = !isClientArchived && (!isProjectArchived || showArchivedProjects);
            
            console.log('Project row:', {
              projectName: row.querySelector('td:first-child')?.textContent?.trim(),
              isProjectArchived,
              shouldShow
            });
            
            (row as HTMLElement).style.display = shouldShow ? '' : 'none';
            if (shouldShow) {
              hasVisibleProjects = true;
            }
          });
          
          // Hide the entire client section if no projects match the filter
          (section as HTMLElement).style.display = hasVisibleProjects ? '' : 'none';
        });
      }

    if (createProjectBtn) {
      createProjectBtn.addEventListener('click', () => {
        const modalTitle = document.getElementById('projectModalTitle');
        const projectId = document.getElementById('projectId') as HTMLInputElement;
        const projectName = document.getElementById('projectName') as HTMLInputElement;
        const projectClient = document.getElementById('projectClient') as HTMLSelectElement;
        const projectModal = document.getElementById('projectModal');
        
        if (modalTitle) modalTitle.textContent = 'Add New Project';
        if (projectId) projectId.value = '';
        if (projectName) projectName.value = '';
        if (projectClient) projectClient.value = '';
        if (projectModal) {
          projectModal.classList.remove('hidden');
          projectModal.style.display = 'block';
        }
      });
    }

    if (projectForm) {
      projectForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const projectId = (document.getElementById('projectId') as HTMLInputElement)?.value;
        const projectName = (document.getElementById('projectName') as HTMLInputElement)?.value;
        const projectClient = (document.getElementById('projectClient') as HTMLSelectElement)?.value;
        
        console.log('Form submission:', { projectId, projectName, projectClient });
        const method = projectId ? 'PUT' : 'POST';
        console.log('Using method:', method);
        
        try {
          const response = await fetch('/api/admin/projects', {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ 
              id: projectId, 
              name: projectName, 
              clientId: parseInt(projectClient) 
            }),
          });
          
          console.log('Response status:', response.status);
          if (response.ok) {
            console.log('Success! Reloading page...');
            window.location.reload();
          } else {
            const errorText = await response.text();
            console.error('Error response:', errorText);
            alert('Error saving project');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error saving project');
        }
      });
    }

    // Global functions
    function closeProjectModal() {
      const projectModal = document.getElementById('projectModal');
      if (projectModal) {
        projectModal.classList.add('hidden');
        projectModal.style.display = 'none';
      }
    }
    
    function editProject(id: number) {
      const modalTitle = document.getElementById('projectModalTitle');
      const projectId = document.getElementById('projectId') as HTMLInputElement;
      const projectName = document.getElementById('projectName') as HTMLInputElement;
      const projectClient = document.getElementById('projectClient') as HTMLSelectElement;
      const projectModal = document.getElementById('projectModal');
      
      // Fetch project details
      fetch(`/api/admin/projects/${id}`, { credentials: 'include' })
        .then(response => {
          if (response.ok) {
            return response.json();
          } else {
            throw new Error('Error loading project details');
          }
        })
        .then(project => {
          if (modalTitle) modalTitle.textContent = 'Edit Project';
          if (projectId) projectId.value = project.id.toString();
          if (projectName) projectName.value = project.name;
          if (projectClient) projectClient.value = project.clientId.toString();
          if (projectModal) {
            projectModal.classList.remove('hidden');
            projectModal.style.display = 'block';
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error loading project details');
        });
    }
    
    function deleteProject(id: number) {
      if (confirm('Are you sure you want to delete this project?')) {
        fetch(`/api/admin/projects/${id}`, { method: 'DELETE', credentials: 'include' })
          .then(response => {
            if (response.ok) {
              window.location.reload();
            } else {
              alert('Error deleting project');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error deleting project');
            });
        }
      }

      // Archive/restore project function
      function toggleProjectArchive(id: number, isArchived: boolean) {
        const action = isArchived ? 'restore' : 'archive';
        if (confirm(`Are you sure you want to ${action} this project?`)) {
          fetch('/api/admin/projects', {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ 
              id: id, 
              archived: !isArchived 
            }),
          })
          .then(response => {
            if (response.ok) {
              window.location.reload();
            } else {
              alert(`Error ${action}ing project`);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert(`Error ${action}ing project`);
          });
      }
    }
    
    // Make functions globally available
    (window as any).closeProjectModal = closeProjectModal;
    (window as any).editProject = editProject;
    (window as any).deleteProject = deleteProject;
      (window as any).toggleProjectArchive = toggleProjectArchive;

    // Add escape key handler and modal backdrop click handler
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        const projectModal = document.getElementById('projectModal');
        if (projectModal && !projectModal.classList.contains('hidden')) {
          (window as any).closeProjectModal();
        }
        const clientModal = document.getElementById('clientModal');
        if (clientModal && !clientModal.classList.contains('hidden')) {
          (window as any).closeClientModal();
        }
      }
    });

    // Add click handler for modal backdrop
    const projectModal = document.getElementById('projectModal');
    if (projectModal) {
      projectModal.addEventListener('click', (e) => {
        if (e.target === projectModal) {
          (window as any).closeProjectModal();
        }
      });
    }

    // Add direct event listener for cancel button
    const cancelProjectBtn = document.getElementById('cancelProjectBtn');
    if (cancelProjectBtn) {
      cancelProjectBtn.addEventListener('click', () => {
        (window as any).closeProjectModal();
      });
    }

    const clientModal = document.getElementById('clientModal');
    if (clientModal) {
      clientModal.addEventListener('click', (e) => {
        if (e.target === clientModal) {
          (window as any).closeClientModal();
        }
      });
    }

    // Client creation functionality
    const createClientBtn = document.getElementById('createClientBtn');
    const clientForm = document.getElementById('clientForm');

    if (createClientBtn) {
      createClientBtn.addEventListener('click', () => {
        const clientModal = document.getElementById('clientModal');
        const clientName = document.getElementById('clientName') as HTMLInputElement;
        
        if (clientName) clientName.value = '';
        if (clientModal) {
          clientModal.classList.remove('hidden');
          clientModal.style.display = 'block';
        }
      });
    }

    if (clientForm) {
      clientForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const clientName = (document.getElementById('clientName') as HTMLInputElement)?.value;
        
        try {
          const response = await fetch('/api/admin/clients', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ name: clientName }),
          });
          
          if (response.ok) {
            const newClient = await response.json();
            
            // Add the new client to the dropdown
            const projectClient = document.getElementById('projectClient') as HTMLSelectElement;
            if (projectClient) {
              const option = document.createElement('option');
              option.value = newClient.id.toString();
              option.textContent = newClient.name;
              projectClient.appendChild(option);
              projectClient.value = newClient.id.toString();
            }
            
            // Close the client modal
            (window as any).closeClientModal();
          } else {
            alert('Error creating client');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error creating client');
        }
      });
    }

    (window as any).closeClientModal = function() {
      const clientModal = document.getElementById('clientModal');
      if (clientModal) {
        clientModal.classList.add('hidden');
        clientModal.style.display = 'none';
      }
    }

    // Search functionality
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        const searchTerm = target.value.toLowerCase();
        
        // Get all client sections
        const clientSections = document.querySelectorAll('.bg-white.rounded-lg.shadow.border.border-gray-300.overflow-hidden');
        
        clientSections.forEach(section => {
          const rows = section.querySelectorAll('tbody tr');
          let hasVisibleProjects = false;
          
          rows.forEach(row => {
            const firstCell = row.querySelector('td:first-child');
            const projectName = firstCell?.textContent?.toLowerCase() || '';
            const isVisible = projectName.includes(searchTerm);
            (row as HTMLElement).style.display = isVisible ? '' : 'none';
            
            if (isVisible) {
              hasVisibleProjects = true;
            }
          });
          
          // Hide the entire client section if no projects match the search
          (section as HTMLElement).style.display = hasVisibleProjects ? '' : 'none';
        });
      });
    }

    // Add event listeners for edit and delete buttons
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      
      // Handle view tasks buttons
      if (target.classList.contains('view-tasks-btn') || target.closest('.view-tasks-btn')) {
        const button = target.classList.contains('view-tasks-btn') ? target : target.closest('.view-tasks-btn') as HTMLElement;
        const projectId = parseInt(button?.getAttribute('data-project-id') || '0');
        const projectName = button?.getAttribute('data-project-name') || 'Unknown Project';
        (window as any).viewProjectTasks(projectId, projectName);
        return;
      }
      
      // Handle edit project buttons
      if (target.classList.contains('edit-project-btn')) {
        const projectId = parseInt(target.getAttribute('data-project-id') || '0');
        (window as any).editProject(projectId);
        return;
      }
      
      // Handle edit project buttons (if clicked on text inside button)
      if (target.closest('.edit-project-btn')) {
        const button = target.closest('.edit-project-btn') as HTMLElement;
        const projectId = parseInt(button.getAttribute('data-project-id') || '0');
        (window as any).editProject(projectId);
        return;
      }
        
        // Handle archive/restore project buttons
        if (target.classList.contains('archive-project-btn') || target.closest('.archive-project-btn')) {
          const button = target.classList.contains('archive-project-btn') ? target : target.closest('.archive-project-btn') as HTMLElement;
          const projectId = parseInt(button?.getAttribute('data-project-id') || '0');
          const isArchived = button?.getAttribute('data-project-archived') === 'true';
          (window as any).toggleProjectArchive(projectId, isArchived);
          return;
        }
      
      // Handle delete project buttons
      if (target.classList.contains('delete-project-btn') || target.closest('.delete-project-btn')) {
        const projectId = parseInt(target.getAttribute('data-project-id') || target.closest('.delete-project-btn')?.getAttribute('data-project-id') || '0');
        const projectName = target.getAttribute('data-project-name') || target.closest('.delete-project-btn')?.getAttribute('data-project-name') || 'Unknown Project';
        
        console.log('Delete project button clicked:', { projectId, projectName });
        (window as any).deleteProject(projectId);
        return;
      }
      
      // Handle cancel button
      if (target.id === 'cancelProjectBtn') {
        (window as any).closeProjectModal();
        return;
      }
      
      // Handle client modal cancel button
      if (target.id === 'cancelClientBtn') {
        (window as any).closeClientModal();
        return;
      }

      // Handle close tasks modal button
      if (target.id === 'closeTasksModal') {
        (window as any).closeTasksModal();
        return;
      }

      // Handle add task button
      if (target.id === 'addTaskBtn') {
        (window as any).openAddTaskModal();
        return;
      }

      // Handle cancel task button
      if (target.id === 'cancelTaskBtn') {
        (window as any).closeTaskModal();
        return;
      }

      // Handle task actions
      if (target.classList.contains('edit-task-btn') || target.closest('.edit-task-btn')) {
        const button = target.classList.contains('edit-task-btn') ? target : target.closest('.edit-task-btn') as HTMLElement;
        const taskId = parseInt(button?.getAttribute('data-task-id') || '0');
        (window as any).editTask(taskId);
        return;
      }

      if (target.classList.contains('delete-task-btn') || target.closest('.delete-task-btn')) {
        const button = target.classList.contains('delete-task-btn') ? target : target.closest('.delete-task-btn') as HTMLElement;
        const taskId = parseInt(button?.getAttribute('data-task-id') || '0');
        const taskName = button?.getAttribute('data-task-name') || 'Unknown Task';
        (window as any).deleteTask(taskId, taskName);
        return;
      }

      if (target.classList.contains('priority-toggle-btn') || target.closest('.priority-toggle-btn')) {
        const button = target.classList.contains('priority-toggle-btn') ? target : target.closest('.priority-toggle-btn') as HTMLElement;
        const taskId = parseInt(button?.getAttribute('data-task-id') || '0');
        const currentPriority = button?.getAttribute('data-task-priority') || 'regular';
        const newPriority = currentPriority === 'regular' ? 'urgent' : 'regular';
        (window as any).updateTaskPriority(taskId, newPriority);
        return;
      }
    });

    // Client filter functionality
    if (clientFilter) {
      // Hide archived clients by default
      const clientSections = document.querySelectorAll('.bg-white.rounded-lg.shadow.border.border-gray-300.overflow-hidden');
      clientSections.forEach(section => {
        const isArchived = section.getAttribute('data-archived') === 'true';
        if (isArchived) {
          (section as HTMLElement).style.display = 'none';
        }
      });

      clientFilter.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        const selectedClient = target.value;
        const clientSections = document.querySelectorAll('.bg-white.rounded-lg.shadow.border.border-gray-300.overflow-hidden');
        
        clientSections.forEach(section => {
          const clientName = section.querySelector('h3')?.textContent || '';
          const isArchived = section.getAttribute('data-archived') === 'true';
          
          if (!selectedClient) {
            // Show all non-archived clients when "All Clients" is selected
            (section as HTMLElement).style.display = !isArchived ? '' : 'none';
          } else if (selectedClient === 'archived') {
            // Show only archived clients when "Archived" is selected
            (section as HTMLElement).style.display = isArchived ? '' : 'none';
          } else {
            // Show specific client when a client name is selected
            (section as HTMLElement).style.display = clientName === selectedClient ? '' : 'none';
          }
        });
          
          // Apply project filtering after client filtering
          filterProjects();
        });
      }

      // Apply initial filtering
      filterProjects();
    });

    // Tasks management functions
    let currentProjectId: number | null = null;
    let currentProjectName: string | null = null;
    let currentTasks: any[] = [];

    // View project tasks
    async function viewProjectTasks(projectId: number, projectName: string) {
      currentProjectId = projectId;
      currentProjectName = projectName;
      
      const tasksModalTitle = document.getElementById('tasksModalTitle');
      const tasksModalSubtitle = document.getElementById('tasksModalSubtitle');
      const tasksModal = document.getElementById('tasksModal');
      
      if (tasksModalTitle) tasksModalTitle.textContent = `Tasks - ${projectName}`;
      if (tasksModalSubtitle) tasksModalSubtitle.textContent = `Manage tasks for ${projectName}`;
      
      if (tasksModal) {
        tasksModal.classList.remove('hidden');
        tasksModal.style.display = 'block';
      }
      
      await loadProjectTasks(projectId);
    }

    // Load project tasks
    async function loadProjectTasks(projectId: number) {
      try {
        const response = await fetch(`/api/admin/projects/${projectId}/tasks`, {
          credentials: 'include'
        });
        
        if (response.ok) {
          currentTasks = await response.json();
          renderTasksList();
        } else {
          console.error('Error loading tasks');
          alert('Error loading tasks');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error loading tasks');
      }
    }

    // Render tasks list
    function renderTasksList() {
      const tasksList = document.getElementById('tasksList');
      if (!tasksList) return;

      if (currentTasks.length === 0) {
        tasksList.innerHTML = `
          <div class="text-center py-8 text-gray-500">
            <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
            </svg>
            <p class="text-lg font-medium">No tasks yet</p>
            <p class="text-sm">Get started by adding your first task</p>
          </div>
        `;
        return;
      }

      tasksList.innerHTML = currentTasks.map(task => `
        <div class="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <div class="flex items-center gap-3 mb-2">
                <h5 class="text-sm font-medium text-gray-900">${task.name}</h5>
                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                  task.priority === 'urgent' 
                    ? 'bg-red-100 text-red-800' 
                    : 'bg-gray-100 text-gray-800'
                }">
                  ${task.priority === 'urgent' ? 'Urgent' : 'Regular'}
                </span>
                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                  task.status === 'completed' ? 'bg-green-100 text-green-800' :
                  task.status === 'in-progress' ? 'bg-blue-100 text-blue-800' :
                  task.status === 'cancelled' ? 'bg-gray-100 text-gray-800' :
                  'bg-yellow-100 text-yellow-800'
                                 }">
                   ${task.status.replace('-', ' ').replace(/\b\w/g, (l: string) => l.toUpperCase())}
                 </span>
              </div>
              ${task.description ? `<p class="text-sm text-gray-600 mb-2">${task.description}</p>` : ''}
              <div class="flex items-center gap-4 text-xs text-gray-500">
                <span>${task.totalHours ? Math.round(task.totalHours * 10) / 10 : 0} hours</span>
                ${task.assignedUsers ? `<span>Assigned: ${task.assignedUsers}</span>` : ''}
                <span>Created: ${new Date(task.createdAt).toLocaleDateString()}</span>
              </div>
            </div>
            <div class="flex items-center gap-2 ml-4">
              <button
                type="button"
                class="priority-toggle-btn inline-flex items-center px-2 py-1 text-xs font-medium rounded border transition-colors ${
                  task.priority === 'urgent'
                    ? 'bg-red-50 border-red-200 text-red-700 hover:bg-red-100'
                    : 'bg-gray-50 border-gray-200 text-gray-700 hover:bg-gray-100'
                }"
                data-task-id="${task.id}"
                data-task-priority="${task.priority}"
                title="${task.priority === 'urgent' ? 'Mark as Regular' : 'Mark as Urgent'}"
              >
                ${task.priority === 'urgent' ? 'Regular' : 'Urgent'}
              </button>
              <button
                type="button"
                class="edit-task-btn inline-flex items-center px-2 py-1 text-xs font-medium rounded border border-gray-200 text-gray-700 hover:bg-gray-50 transition-colors"
                data-task-id="${task.id}"
                title="Edit task"
              >
                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
                Edit
              </button>
              <button
                type="button"
                class="delete-task-btn inline-flex items-center px-2 py-1 text-xs font-medium rounded border border-red-200 text-red-700 hover:bg-red-50 transition-colors"
                data-task-id="${task.id}"
                data-task-name="${task.name}"
                title="Delete task"
              >
                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
                Delete
              </button>
            </div>
          </div>
        </div>
      `).join('');
    }

    // Close tasks modal
    function closeTasksModal() {
      const tasksModal = document.getElementById('tasksModal');
      if (tasksModal) {
        tasksModal.classList.add('hidden');
        tasksModal.style.display = 'none';
      }
      currentProjectId = null;
      currentProjectName = null;
      currentTasks = [];
    }

    // Open add task modal
    function openAddTaskModal() {
      const taskModalTitle = document.getElementById('taskModalTitle');
      const taskId = document.getElementById('taskId') as HTMLInputElement;
      const taskName = document.getElementById('taskName') as HTMLInputElement;
      const taskDescription = document.getElementById('taskDescription') as HTMLTextAreaElement;
      const taskStatus = document.getElementById('taskStatus') as HTMLSelectElement;
      const taskPriority = document.getElementById('taskPriority') as HTMLSelectElement;
      const taskProjectId = document.getElementById('taskProjectId') as HTMLInputElement;
      const taskModal = document.getElementById('taskModal');
      
      if (taskModalTitle) taskModalTitle.textContent = 'Add New Task';
      if (taskId) taskId.value = '';
      if (taskName) taskName.value = '';
      if (taskDescription) taskDescription.value = '';
      if (taskStatus) taskStatus.value = 'pending';
      if (taskPriority) taskPriority.value = 'regular';
      if (taskProjectId && currentProjectId) taskProjectId.value = currentProjectId.toString();
      
      if (taskModal) {
        taskModal.classList.remove('hidden');
        taskModal.style.display = 'block';
      }
    }

    // Close task modal
    function closeTaskModal() {
      const taskModal = document.getElementById('taskModal');
      if (taskModal) {
        taskModal.classList.add('hidden');
        taskModal.style.display = 'none';
      }
    }

    // Edit task
    async function editTask(taskId: number) {
      const task = currentTasks.find(t => t.id === taskId);
      if (!task) return;

      const taskModalTitle = document.getElementById('taskModalTitle');
      const taskIdInput = document.getElementById('taskId') as HTMLInputElement;
      const taskName = document.getElementById('taskName') as HTMLInputElement;
      const taskDescription = document.getElementById('taskDescription') as HTMLTextAreaElement;
      const taskStatus = document.getElementById('taskStatus') as HTMLSelectElement;
      const taskPriority = document.getElementById('taskPriority') as HTMLSelectElement;
      const taskProjectId = document.getElementById('taskProjectId') as HTMLInputElement;
      const taskModal = document.getElementById('taskModal');
      
      if (taskModalTitle) taskModalTitle.textContent = 'Edit Task';
      if (taskIdInput) taskIdInput.value = task.id.toString();
      if (taskName) taskName.value = task.name;
      if (taskDescription) taskDescription.value = task.description || '';
      if (taskStatus) taskStatus.value = task.status;
      if (taskPriority) taskPriority.value = task.priority;
      if (taskProjectId) taskProjectId.value = task.projectId.toString();
      
      if (taskModal) {
        taskModal.classList.remove('hidden');
        taskModal.style.display = 'block';
      }
    }

    // Delete task
    async function deleteTask(taskId: number, taskName: string) {
      if (confirm(`Are you sure you want to delete the task "${taskName}"?`)) {
        try {
          const response = await fetch(`/api/admin/tasks/${taskId}`, {
            method: 'DELETE',
            credentials: 'include'
          });
          
          if (response.ok) {
            await loadProjectTasks(currentProjectId!);
          } else {
            alert('Error deleting task');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error deleting task');
        }
      }
    }

    // Update task priority
    async function updateTaskPriority(taskId: number, newPriority: string) {
      try {
        const response = await fetch('/api/admin/tasks', {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify({ id: taskId, priority: newPriority }),
        });
        
        if (response.ok) {
          await loadProjectTasks(currentProjectId!);
        } else {
          alert('Error updating task priority');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error updating task priority');
      }
    }

    // Task form submission
    const taskForm = document.getElementById('taskForm');
    if (taskForm) {
      taskForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const taskId = (document.getElementById('taskId') as HTMLInputElement)?.value;
        const taskName = (document.getElementById('taskName') as HTMLInputElement)?.value;
        const taskDescription = (document.getElementById('taskDescription') as HTMLTextAreaElement)?.value;
        const taskStatus = (document.getElementById('taskStatus') as HTMLSelectElement)?.value;
        const taskPriority = (document.getElementById('taskPriority') as HTMLSelectElement)?.value;
        const taskProjectId = (document.getElementById('taskProjectId') as HTMLInputElement)?.value;
        
        const method = taskId ? 'PUT' : 'POST';
        
        try {
          const response = await fetch('/api/admin/tasks', {
            method: method,
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ 
              id: taskId, 
              name: taskName, 
              description: taskDescription,
              projectId: parseInt(taskProjectId), 
              status: taskStatus,
              priority: taskPriority
            }),
          });
          
          if (response.ok) {
            closeTaskModal();
            await loadProjectTasks(currentProjectId!);
          } else {
            alert('Error saving task');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error saving task');
        }
      });
    }

    // Add modal backdrop click handlers
    const tasksModal = document.getElementById('tasksModal');
    if (tasksModal) {
      tasksModal.addEventListener('click', (e) => {
        if (e.target === tasksModal) {
          closeTasksModal();
        }
      });
    }

    const taskModal = document.getElementById('taskModal');
    if (taskModal) {
      taskModal.addEventListener('click', (e) => {
        if (e.target === taskModal) {
          closeTaskModal();
        }
      });
    }

    // Add escape key handler for new modals
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        const tasksModalElement = document.getElementById('tasksModal');
        if (tasksModalElement && !tasksModalElement.classList.contains('hidden')) {
          closeTasksModal();
        }
        const taskModalElement = document.getElementById('taskModal');
        if (taskModalElement && !taskModalElement.classList.contains('hidden')) {
          closeTaskModal();
        }
      }
    });

    // Make functions globally available
    (window as any).viewProjectTasks = viewProjectTasks;
    (window as any).closeTasksModal = closeTasksModal;
    (window as any).openAddTaskModal = openAddTaskModal;
    (window as any).closeTaskModal = closeTaskModal;
    (window as any).editTask = editTask;
    (window as any).deleteTask = deleteTask;
    (window as any).updateTaskPriority = updateTaskPriority;
  </script>
</AdminLayout> 