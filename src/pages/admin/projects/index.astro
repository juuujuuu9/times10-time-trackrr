---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { projects, clients, tasks, timeEntries } from '../../../db/schema';
import { count, sql } from 'drizzle-orm';

// Get all projects with client info, task counts, and total hours
const allProjects = await db
  .select({
    id: projects.id,
    name: projects.name,
    createdAt: projects.createdAt,
    clientId: projects.clientId,
    clientName: clients.name,
    taskCount: count(tasks.id),
    totalHours: sql<number>`COALESCE(SUM(EXTRACT(EPOCH FROM (${timeEntries.endTime} - ${timeEntries.startTime}))/3600), 0)`,
  })
  .from(projects)
  .leftJoin(clients, sql`${projects.clientId} = ${clients.id}`)
  .leftJoin(tasks, sql`${projects.id} = ${tasks.projectId}`)
  .leftJoin(timeEntries, sql`${tasks.id} = ${timeEntries.taskId}`)
  .groupBy(projects.id, clients.name)
  .orderBy(clients.name, projects.name);

// Group projects by client
const projectsByClient = allProjects.reduce((acc, project) => {
  const clientName = project.clientName || 'Unknown Client';
  if (!acc[clientName]) {
    acc[clientName] = [];
  }
  acc[clientName].push(project);
  return acc;
}, {} as Record<string, typeof allProjects>);

// Get all clients for the dropdown
const allClients = await db.select().from(clients).orderBy(clients.name);
---

<AdminLayout title="Projects" currentPage="projects">
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-white">Projects</h1>
        <p class="text-gray-300">Manage projects organized by client</p>
      </div>
      <button
        id="createProjectBtn"
        class="bg-[#4F46E5] hover:bg-[#3730A3] text-white font-medium py-2 px-4 rounded-lg transition-colors"
      >
        + Add Project
      </button>
    </div>

    <!-- Filters -->
    <div class="bg-gray-800 rounded-lg shadow border border-gray-700 p-6">
      <div class="flex flex-col sm:flex-row gap-4">
        <div class="flex-1">
          <label for="search" class="block text-sm font-medium text-gray-300 mb-1">Search</label>
          <input
            type="text"
            id="search"
            placeholder="Search projects..."
            class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
          />
        </div>
        <div class="sm:w-48">
          <label for="clientFilter" class="block text-sm font-medium text-gray-300 mb-1">Filter by Client</label>
          <select
            id="clientFilter"
            class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
          >
            <option value="">All Clients</option>
            {allClients.map((client) => (
              <option value={client.name}>{client.name}</option>
            ))}
          </select>
        </div>
      </div>
    </div>

    <!-- Projects by Client -->
    <div class="space-y-6">
      {Object.entries(projectsByClient).map(([clientName, clientProjects]) => (
        <div class="bg-gray-800 rounded-lg shadow border border-gray-700 overflow-hidden">
          <div class="px-6 py-4 bg-gray-700 border-b border-gray-600">
            <h3 class="text-lg font-medium text-white">{clientName}</h3>
            <p class="text-sm text-gray-300">{clientProjects.length} projects</p>
          </div>
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-700">
              <thead class="bg-gray-700">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Project Name
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Tasks
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Total Hours
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Created Date
                  </th>
                  <th class="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody class="bg-gray-800 divide-y divide-gray-700">
                {clientProjects.map((project) => (
                  <tr class="hover:bg-gray-700">
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="text-sm font-medium text-white">{project.name}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-[#4F46E5] text-white">
                        {project.taskCount} tasks
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-white">
                      {project.totalHours ? Math.round(project.totalHours * 10) / 10 : 0} hours
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                      {new Date(project.createdAt).toLocaleDateString()}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div class="flex justify-end space-x-2">
                        <a
                          href={`/admin/projects/${project.id}/tasks`}
                          class="text-[#4F46E5] hover:text-[#3730A3]"
                        >
                          View Tasks
                        </a>
                        <button
                          class="text-[#EC4899] hover:text-[#DB2777]"
                          onclick={`editProject(${project.id})`}
                        >
                          Edit
                        </button>
                        <button
                          class="text-red-400 hover:text-red-300"
                          onclick={`deleteProject(${project.id})`}
                        >
                          Delete
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      ))}
    </div>

    {Object.keys(projectsByClient).length === 0 && (
      <div class="text-center py-12">
        <div class="text-6xl mb-4">üìÅ</div>
        <h3 class="text-lg font-medium text-white mb-2">No projects yet</h3>
        <p class="text-gray-300 mb-4">Get started by adding your first project</p>
        <button
          class="bg-[#4F46E5] hover:bg-[#3730A3] text-white font-medium py-2 px-4 rounded-lg transition-colors"
          onclick="document.getElementById('createProjectBtn').click()"
        >
          Add Your First Project
        </button>
      </div>
    )}
  </div>

  <!-- Create/Edit Project Modal -->
  <div id="projectModal" class="fixed inset-0 bg-gray-900 bg-opacity-75 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-gray-800 rounded-lg shadow-xl max-w-md w-full border border-gray-700">
        <div class="px-6 py-4 border-b border-gray-700">
          <h3 id="projectModalTitle" class="text-lg font-medium text-white">Add New Project</h3>
        </div>
        <form id="projectForm" class="p-6">
          <input type="hidden" id="projectId" />
          <div class="mb-4">
            <label for="projectName" class="block text-sm font-medium text-gray-300 mb-1">
              Project Name
            </label>
            <input
              type="text"
              id="projectName"
              required
              class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
            />
          </div>
          <div class="mb-4">
            <label for="projectClient" class="block text-sm font-medium text-gray-300 mb-1">
              Client
            </label>
            <select
              id="projectClient"
              required
              class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
            >
              <option value="">Select a client</option>
              {allClients.map((client) => (
                <option value={client.id}>{client.name}</option>
              ))}
            </select>
          </div>
          <div class="flex justify-end space-x-3">
            <button
              type="button"
              onclick="closeProjectModal()"
              class="px-4 py-2 text-gray-300 bg-gray-700 hover:bg-gray-600 rounded-md transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-[#4F46E5] hover:bg-[#3730A3] text-white rounded-md transition-colors"
            >
              Save Project
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Project management JavaScript
    const createProjectBtn = document.getElementById('createProjectBtn');
    const projectForm = document.getElementById('projectForm');
    const searchInput = document.getElementById('search');
    const clientFilter = document.getElementById('clientFilter');

    if (createProjectBtn) {
      createProjectBtn.addEventListener('click', () => {
        const modalTitle = document.getElementById('projectModalTitle');
        const projectId = document.getElementById('projectId') as HTMLInputElement;
        const projectName = document.getElementById('projectName') as HTMLInputElement;
        const projectClient = document.getElementById('projectClient') as HTMLSelectElement;
        const projectModal = document.getElementById('projectModal');
        
        if (modalTitle) modalTitle.textContent = 'Add New Project';
        if (projectId) projectId.value = '';
        if (projectName) projectName.value = '';
        if (projectClient) projectClient.value = '';
        if (projectModal) projectModal.classList.remove('hidden');
      });
    }

    if (projectForm) {
      projectForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const projectId = (document.getElementById('projectId') as HTMLInputElement)?.value;
        const projectName = (document.getElementById('projectName') as HTMLInputElement)?.value;
        const projectClient = (document.getElementById('projectClient') as HTMLSelectElement)?.value;
        
        try {
          const response = await fetch('/api/admin/projects', {
            method: projectId ? 'PUT' : 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              id: projectId, 
              name: projectName, 
              clientId: parseInt(projectClient) 
            }),
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            alert('Error saving project');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error saving project');
        }
      });
    }

    function closeProjectModal() {
      const projectModal = document.getElementById('projectModal');
      if (projectModal) projectModal.classList.add('hidden');
    }

    function editProject(id: number) {
      const modalTitle = document.getElementById('projectModalTitle');
      const projectId = document.getElementById('projectId') as HTMLInputElement;
      const projectModal = document.getElementById('projectModal');
      
      if (modalTitle) modalTitle.textContent = 'Edit Project';
      if (projectId) projectId.value = id.toString();
      if (projectModal) projectModal.classList.remove('hidden');
    }

    function deleteProject(id: number) {
      if (confirm('Are you sure you want to delete this project?')) {
        fetch(`/api/admin/projects/${id}`, { method: 'DELETE' })
          .then(response => {
            if (response.ok) {
              window.location.reload();
            } else {
              alert('Error deleting project');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error deleting project');
          });
      }
    }

    // Search functionality
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        const searchTerm = target.value.toLowerCase();
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          const firstCell = row.querySelector('td:first-child');
          const projectName = firstCell?.textContent?.toLowerCase() || '';
          (row as HTMLElement).style.display = projectName.includes(searchTerm) ? '' : 'none';
        });
      });
    }

    // Client filter functionality
    if (clientFilter) {
      clientFilter.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        const selectedClient = target.value;
        const clientSections = document.querySelectorAll('.bg-gray-800.rounded-lg.shadow.border.border-gray-700.overflow-hidden');
        
        clientSections.forEach(section => {
          const clientName = section.querySelector('h3')?.textContent || '';
          if (!selectedClient || clientName === selectedClient) {
            (section as HTMLElement).style.display = '';
          } else {
            (section as HTMLElement).style.display = 'none';
          }
        });
      });
    }
  </script>
</AdminLayout> 