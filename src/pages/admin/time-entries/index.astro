---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { timeEntries, users, tasks, projects, clients } from '../../../db/schema';
import { sql } from 'drizzle-orm';

// Get all time entries with related data
const allTimeEntries = await db
  .select({
    id: timeEntries.id,
    startTime: timeEntries.startTime,
    endTime: timeEntries.endTime,
    durationManual: timeEntries.durationManual,
    notes: timeEntries.notes,
    createdAt: timeEntries.createdAt,
    userName: users.name,
    taskName: tasks.name,
    projectName: projects.name,
    clientName: clients.name,
  })
  .from(timeEntries)
  .innerJoin(users, sql`${timeEntries.userId} = ${users.id}`)
  .innerJoin(tasks, sql`${timeEntries.taskId} = ${tasks.id}`)
  .innerJoin(projects, sql`${tasks.projectId} = ${projects.id}`)
  .innerJoin(clients, sql`${projects.clientId} = ${clients.id}`)
  .orderBy(sql`${timeEntries.createdAt} DESC`);

// Get all clients for filtering
const allClients = await db.select().from(clients).orderBy(clients.name);

// Get all users for the modal form
const allUsers = await db.select().from(users).orderBy(users.name);

// Get all tasks for filtering
const allTasks = await db
  .select({
    id: tasks.id,
    name: tasks.name,
    projectName: projects.name,
    clientName: clients.name,
  })
  .from(tasks)
  .innerJoin(projects, sql`${tasks.projectId} = ${projects.id}`)
  .innerJoin(clients, sql`${projects.clientId} = ${clients.id}`)
  .orderBy(clients.name, projects.name, tasks.name);
---

<AdminLayout title="Time Entries" currentPage="time-entries">
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-white">Time Entries</h1>
        <p class="text-gray-300">View and manage time tracking data</p>
      </div>
      <div class="flex space-x-3">
        <button
          id="exportCsvBtn"
          class="bg-[#10B981] hover:bg-[#059669] text-white font-medium py-2 px-4 rounded-lg transition-colors"
        >
          Export CSV
        </button>
        <button
          id="addTimeEntryBtn"
          class="bg-[#4F46E5] hover:bg-[#3730A3] text-white font-medium py-2 px-4 rounded-lg transition-colors"
        >
          + Add Entry
        </button>
      </div>
    </div>

    <!-- Filters -->
    <div class="bg-gray-800 rounded-lg shadow border border-gray-700 p-6">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div>
          <label for="search" class="block text-sm font-medium text-gray-300 mb-1">Search</label>
          <input
            type="text"
            id="search"
            placeholder="Search entries..."
            class="w-[calc(100%-3rem)] px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
          />
        </div>
        <div>
          <label for="clientFilter" class="block text-sm font-medium text-gray-300 mb-1">Client</label>
          <select
            id="clientFilter"
            class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
          >
            <option value="">All Clients</option>
            {allClients.map((client) => (
              <option value={client.name}>{client.name}</option>
            ))}
          </select>
        </div>
        <div>
          <label for="taskFilter" class="block text-sm font-medium text-gray-300 mb-1">Task</label>
          <select
            id="taskFilter"
            class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
          >
            <option value="">All Tasks</option>
            {allTasks.map((task) => (
              <option value={task.name}>{task.clientName} - {task.projectName} - {task.name}</option>
            ))}
          </select>
        </div>
        <div>
          <label for="dateRange" class="block text-sm font-medium text-gray-300 mb-1">Date Range</label>
          <select
            id="dateRange"
            class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
          >
            <option value="">All Time</option>
            <option value="today">Today</option>
            <option value="week">This Week</option>
            <option value="month">This Month</option>
            <option value="quarter">This Quarter</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Time Entries Table -->
    <div class="bg-gray-800 rounded-lg shadow border border-gray-700 overflow-hidden">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-700">
          <thead class="bg-gray-700">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider rounded-tl-md rounded-tr-0 rounded-br-0 rounded-bl-0">
                User
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                Client
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                Project
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                Task
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                Date
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                Duration
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                Notes
              </th>
              <th class="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider rounded-tl-0 rounded-tr-md rounded-br-0 rounded-bl-0">
                Actions
              </th>
            </tr>
          </thead>
          <tbody class="bg-gray-800 divide-y divide-gray-700">
            {allTimeEntries.map((entry) => {
              const createdAt = new Date(entry.createdAt);
              const duration = entry.durationManual ? entry.durationManual / 3600 : 0;
              
              return (
                <tr class="hover:bg-gray-700">
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-white">
                    {entry.userName}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-white">
                    {entry.clientName}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-white">
                    {entry.projectName}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-white">
                    {entry.taskName}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                    {createdAt.toLocaleDateString()}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-white">
                    {duration ? Math.round(duration * 10) / 10 : 0} hours
                  </td>
                  <td class="px-6 py-4 text-sm text-gray-400 max-w-xs truncate">
                    {entry.notes || '-'}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div class="flex justify-end space-x-2">
                      <button
                        class="edit-time-entry-btn text-[#EC4899] hover:text-[#DB2777] transition-colors"
                        data-time-entry-id={entry.id}
                        title="Edit time entry"
                      >
                        Edit
                      </button>
                      <button
                        class="delete-time-entry-btn text-red-400 hover:text-red-300 transition-colors"
                        data-time-entry-id={entry.id}
                        data-time-entry-notes={entry.notes || 'No notes'}
                        title="Delete time entry"
                      >
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                      </button>
                    </div>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>

    {allTimeEntries.length === 0 && (
      <div class="text-center py-12">
        <div class="text-6xl mb-4">⏱️</div>
        <h3 class="text-lg font-medium text-white mb-2">No time entries yet</h3>
        <p class="text-gray-300 mb-4">Start tracking time to see entries here</p>
        <button
          class="bg-[#4F46E5] hover:bg-[#3730A3] text-white font-medium py-2 px-4 rounded-lg transition-colors"
          onclick="document.getElementById('addTimeEntryBtn').click()"
        >
          Add Your First Entry
        </button>
      </div>
    )}
  </div>

  <!-- Add/Edit Time Entry Modal -->
  <div id="timeEntryModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-[#1F2937] rounded-lg shadow-xl max-w-md w-full max-h-[90vh] border border-gray-700 flex flex-col">
        <div class="px-6 py-4 border-b border-gray-700 flex-shrink-0">
          <h3 id="timeEntryModalTitle" class="text-lg font-medium text-white">Add Time Entry</h3>
        </div>
        <div class="flex-1 overflow-y-auto" style="scrollbar-width: thin; scrollbar-color: #4B5563 #1F2937;">
          <form id="timeEntryForm" class="px-6 py-4">
            <input type="hidden" id="timeEntryId" />
            <div class="mb-4">
              <label for="timeEntryUser" class="block text-sm font-medium text-gray-300 mb-1">
                User <span id="currentUser" class="text-gray-400 font-normal"></span>
              </label>
              <div class="relative">
                <input
                  type="text"
                  id="timeEntryUser"
                  placeholder="Search for a user..."
                  required
                  class="w-[calc(100%-1.5rem)] px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
                />
                <input type="hidden" id="timeEntryUserId" />
                <div id="userDropdown" class="absolute z-10 w-full mt-1 bg-gray-700 border border-gray-600 rounded-md shadow-lg max-h-60 overflow-y-auto hidden">
                  <!-- User results will be populated here -->
                </div>
              </div>
            </div>
            <div class="mb-4">
              <label for="timeEntryTask" class="block text-sm font-medium text-gray-300 mb-1">
                Task <span id="currentTask" class="text-gray-400 font-normal"></span>
              </label>
              <div class="relative">
                <input
                  type="text"
                  id="timeEntryTask"
                  placeholder="Search for a task..."
                  required
                  class="w-[calc(100%-1.5rem)] px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
                />
                <input type="hidden" id="timeEntryTaskId" />
                <div id="taskDropdown" class="absolute z-10 w-full mt-1 bg-gray-700 border border-gray-600 rounded-md shadow-lg max-h-60 overflow-y-auto hidden">
                  <!-- Task results will be populated here -->
                </div>
              </div>
            </div>
            <div class="mb-4">
              <label for="timeEntryDuration" class="block text-sm font-medium text-gray-300 mb-1">
                Duration <span id="currentDuration" class="text-gray-400 font-normal"></span>
              </label>
              <input
                type="text"
                id="timeEntryDuration"
                placeholder="e.g., 2h, 3.5hr, 4:15, 90m"
                required
                class="w-[calc(100%-1.5rem)] px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
              />
              <p class="text-xs text-gray-400 mt-1">
                Supported formats: 2h, 2hr, 3.5hr, 4:15, 90m, 5400s, etc.
              </p>
            </div>
            <div class="mb-4">
              <label for="timeEntryNotes" class="block text-sm font-medium text-gray-300 mb-1">
                Notes
              </label>
              <textarea
                id="timeEntryNotes"
                rows="3"
                class="w-[calc(100%-1.5rem)] px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
              ></textarea>
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                id="cancelTimeEntryBtn"
                class="px-4 py-2 text-gray-300 bg-gray-700 hover:bg-gray-600 rounded-md transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                class="px-4 py-2 bg-[#4F46E5] hover:bg-[#3730A3] text-white rounded-md transition-colors"
              >
                Save Entry
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script define:vars={{ allUsers, allTasks }}>
    // Pass server-side data to client-side
    const usersData = allUsers;
    const tasksData = allTasks;
    
    // Time entry management JavaScript
    
    // Utility function to format duration in seconds to human-readable format
    function formatDurationHuman(seconds) {
      if (!seconds || seconds <= 0) return '';
      
      const hours = Math.floor(seconds / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      const remainingSeconds = seconds % 60;
      
      let result = '';
      if (hours > 0) {
        result += `${hours} hour${hours !== 1 ? 's' : ''}`;
      }
      if (minutes > 0) {
        if (result) result += ', ';
        result += `${minutes} minute${minutes !== 1 ? 's' : ''}`;
      }
      if (remainingSeconds > 0 && hours === 0) {
        if (result) result += ', ';
        result += `${remainingSeconds} second${remainingSeconds !== 1 ? 's' : ''}`;
      }
      
      return result;
    }
    
    const addTimeEntryBtn = document.getElementById('addTimeEntryBtn');
    console.log('Add Time Entry button found:', addTimeEntryBtn);
    const timeEntryForm = document.getElementById('timeEntryForm');
    const exportCsvBtn = document.getElementById('exportCsvBtn');
    const cancelTimeEntryBtn = document.getElementById('cancelTimeEntryBtn');
    const searchInput = document.getElementById('search');
    const clientFilter = document.getElementById('clientFilter');
    const taskFilter = document.getElementById('taskFilter');
    const dateRange = document.getElementById('dateRange');

    if (addTimeEntryBtn) {
      addTimeEntryBtn.addEventListener('click', () => {
        console.log('Add Time Entry button clicked');
        const modalTitle = document.getElementById('timeEntryModalTitle');
        const timeEntryId = document.getElementById('timeEntryId');
        const timeEntryModal = document.getElementById('timeEntryModal');
        const timeEntryForm = document.getElementById('timeEntryForm');
        
        if (modalTitle) modalTitle.textContent = 'Add Time Entry';
        if (timeEntryId) timeEntryId.value = '';
        if (timeEntryForm) timeEntryForm.reset();
        
        // Clear the new input fields manually since they're not part of the form reset
        const userInput = document.getElementById('timeEntryUser');
        const userIdInput = document.getElementById('timeEntryUserId');
        const taskInput = document.getElementById('timeEntryTask');
        const taskIdInput = document.getElementById('timeEntryTaskId');
        
        if (userInput) {
          userInput.value = '';
          userInput.disabled = false; // Re-enable user field for adding
          userInput.classList.remove('bg-gray-600', 'cursor-not-allowed');
        }
        if (userIdInput) userIdInput.value = '';
        if (taskInput) {
          taskInput.value = '';
          // Task field is always enabled
        }
        if (taskIdInput) taskIdInput.value = '';
        
        // Clear current duration display
        const currentDurationSpan = document.getElementById('currentDuration');
        if (currentDurationSpan) currentDurationSpan.textContent = '';
        
        // Clear current user and task displays
        const currentUserSpan = document.getElementById('currentUser');
        if (currentUserSpan) currentUserSpan.textContent = '';
        const currentTaskSpan = document.getElementById('currentTask');
        if (currentTaskSpan) currentTaskSpan.textContent = '';
        
        if (timeEntryModal) {
          timeEntryModal.classList.remove('hidden');
          console.log('Modal should be visible now');
        } else {
          console.error('Modal element not found');
        }
      });
    }

    if (cancelTimeEntryBtn) {
      cancelTimeEntryBtn.addEventListener('click', () => {
        closeTimeEntryModal();
      });
    }

    if (exportCsvBtn) {
      exportCsvBtn.addEventListener('click', () => {
        // Get filtered data and export as CSV
        const rows = document.querySelectorAll('tbody tr:not([style*="display: none"])');
        let csv = 'User,Client,Project,Task,Date,Duration,Notes\n';
        
        rows.forEach(row => {
          const cells = row.querySelectorAll('td');
          const rowData = Array.from(cells).slice(0, 8).map(cell => {
            const text = cell.textContent?.trim() || '';
            return `"${text.replace(/"/g, '""')}"`;
          });
          csv += rowData.join(',') + '\n';
        });
        
        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'time-entries.csv';
        a.click();
        window.URL.revokeObjectURL(url);
      });
    }

    if (timeEntryForm) {
      timeEntryForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const submitButton = e.target.querySelector('button[type="submit"]');
        const originalText = submitButton.textContent;
        
        // Show loading state
        submitButton.disabled = true;
        submitButton.textContent = 'Saving...';
        
        const timeEntryId = document.getElementById('timeEntryId')?.value;
        const userId = document.getElementById('timeEntryUserId')?.value;
        const taskId = document.getElementById('timeEntryTaskId')?.value;
        const duration = document.getElementById('timeEntryDuration')?.value;
        const notes = document.getElementById('timeEntryNotes')?.value;
        
        try {
          const response = await fetch('/api/admin/time-entries', {
            method: timeEntryId ? 'PUT' : 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              id: timeEntryId,
              userId: parseInt(userId),
              taskId: parseInt(taskId),
              duration: duration,
              notes: notes || null
            }),
          });
          
          if (response.ok) {
            // Show success message briefly before reloading
            submitButton.textContent = 'Saved!';
            submitButton.classList.add('bg-green-600');
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          } else {
            const errorData = await response.json();
            alert(`Error saving time entry: ${errorData.error || 'Unknown error'}`);
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error saving time entry');
        } finally {
          // Reset button state
          submitButton.disabled = false;
          submitButton.textContent = originalText;
          submitButton.classList.remove('bg-green-600');
        }
      });
    }

    function closeTimeEntryModal() {
      const timeEntryModal = document.getElementById('timeEntryModal');
      const timeEntryId = document.getElementById('timeEntryId');
      
      if (timeEntryModal) {
        timeEntryModal.classList.add('hidden');
        // Clear form fields when closing
        const form = document.getElementById('timeEntryForm');
        if (form) form.reset();
        if (timeEntryId) timeEntryId.value = '';
        
        // Clear current duration display
        const currentDurationSpan = document.getElementById('currentDuration');
        if (currentDurationSpan) currentDurationSpan.textContent = '';
        
        // Clear current user and task displays
        const currentUserSpan = document.getElementById('currentUser');
        if (currentUserSpan) currentUserSpan.textContent = '';
        const currentTaskSpan = document.getElementById('currentTask');
        if (currentTaskSpan) currentTaskSpan.textContent = '';
      }
    }

    // Close modal when clicking outside
    document.addEventListener('click', (e) => {
      const timeEntryModal = document.getElementById('timeEntryModal');
      if (timeEntryModal && e.target === timeEntryModal) {
        closeTimeEntryModal();
      }
    });

    // Close modal with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        const timeEntryModal = document.getElementById('timeEntryModal');
        if (timeEntryModal && !timeEntryModal.classList.contains('hidden')) {
          closeTimeEntryModal();
        }
      }
    });

    async function editTimeEntry(id) {
      // Find the edit button and show loading state
      const editButton = document.querySelector(`button.edit-time-entry-btn[data-time-entry-id="${id}"]`);
      const originalText = editButton?.textContent;
      if (editButton) {
        editButton.disabled = true;
        editButton.textContent = 'Loading...';
      }
      
      try {
        // Fetch the time entry data
        const response = await fetch(`/api/admin/time-entries/${id}`);
        if (!response.ok) {
          throw new Error('Failed to fetch time entry');
        }
        
        const timeEntry = await response.json();
        
        // Update modal title
        const modalTitle = document.getElementById('timeEntryModalTitle');
        if (modalTitle) modalTitle.textContent = 'Edit Time Entry';
        
        // Set the time entry ID
        const timeEntryId = document.getElementById('timeEntryId');
        if (timeEntryId) timeEntryId.value = id.toString();
        
        // Populate form fields
        const userInput = document.getElementById('timeEntryUser');
        const userIdInput = document.getElementById('timeEntryUserId');
        const taskInput = document.getElementById('timeEntryTask');
        const taskIdInput = document.getElementById('timeEntryTaskId');
        const durationInput = document.getElementById('timeEntryDuration');
        const notesTextarea = document.getElementById('timeEntryNotes');
        
        // Set the IDs
        if (userIdInput) userIdInput.value = timeEntry.userId.toString();
        if (taskIdInput) taskIdInput.value = timeEntry.taskId.toString();
        if (notesTextarea) notesTextarea.value = timeEntry.notes || '';
        
        // Find and display the user name
        const user = usersData.find(u => u.id === timeEntry.userId);
        if (user && userInput) {
          userInput.value = user.name;
          userInput.disabled = true; // Make user field read-only
          userInput.classList.add('bg-gray-600', 'cursor-not-allowed');
          
          // Display current user in the label span
          const currentUserSpan = document.getElementById('currentUser');
          if (currentUserSpan) {
            currentUserSpan.textContent = `- ${user.name}`;
            currentUserSpan.style.fontWeight = 'normal';
            currentUserSpan.style.color = '#9CA3AF'; // text-gray-400
          }
        }
        
        // Find and display the task name
        const task = tasksData.find(t => t.id === timeEntry.taskId);
        if (task && taskInput) {
          taskInput.value = `${task.clientName} - ${task.projectName} - ${task.name}`;
          // Keep task field enabled for editing
          
          // Display current task in the label span
          const currentTaskSpan = document.getElementById('currentTask');
          if (currentTaskSpan) {
            currentTaskSpan.textContent = `- ${task.clientName} - ${task.projectName} - ${task.name}`;
            currentTaskSpan.style.fontWeight = 'normal';
            currentTaskSpan.style.color = '#9CA3AF'; // text-gray-400
          }
        }
        
        // Convert duration from seconds to a readable format
        if (durationInput && timeEntry.durationManual) {
          const hours = timeEntry.durationManual / 3600;
          durationInput.value = hours.toFixed(2) + 'h';
          
          // Display current duration in human-readable format
          const currentDurationSpan = document.getElementById('currentDuration');
          if (currentDurationSpan) {
            const formattedDuration = formatDurationHuman(timeEntry.durationManual);
            currentDurationSpan.textContent = `- ${formattedDuration}`;
            currentDurationSpan.style.fontWeight = 'normal';
            currentDurationSpan.style.color = '#9CA3AF'; // text-gray-400
          }
        }
        
        // Show the modal
        const timeEntryModal = document.getElementById('timeEntryModal');
        if (timeEntryModal) timeEntryModal.classList.remove('hidden');
        
      } catch (error) {
        console.error('Error fetching time entry:', error);
        alert('Error loading time entry data');
      } finally {
        // Reset button state
        if (editButton) {
          editButton.disabled = false;
          editButton.textContent = originalText;
        }
      }
    }

    function deleteTimeEntry(id) {
      if (confirm('Are you sure you want to delete this time entry?')) {
        fetch(`/api/admin/time-entries/${id}`, { method: 'DELETE' })
          .then(response => {
            if (response.ok) {
              window.location.reload();
            } else {
              alert('Error deleting time entry');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error deleting time entry');
          });
      }
    }

    // Add event listener for delete and edit time entry buttons
    document.addEventListener('click', (e) => {
      const target = e.target;
      
      // Handle delete time entry button
      if (target.classList.contains('delete-time-entry-btn') || target.closest('.delete-time-entry-btn')) {
        const timeEntryId = parseInt(target.getAttribute('data-time-entry-id') || target.closest('.delete-time-entry-btn')?.getAttribute('data-time-entry-id') || '0');
        const timeEntryNotes = target.getAttribute('data-time-entry-notes') || target.closest('.delete-time-entry-btn')?.getAttribute('data-time-entry-notes') || 'No notes';
        
        console.log('Delete time entry button clicked:', { timeEntryId, timeEntryNotes });
        deleteTimeEntry(timeEntryId);
        return;
      }
      
      // Handle edit time entry button
      if (target.classList.contains('edit-time-entry-btn') || target.closest('.edit-time-entry-btn')) {
        const timeEntryId = parseInt(target.getAttribute('data-time-entry-id') || target.closest('.edit-time-entry-btn')?.getAttribute('data-time-entry-id') || '0');
        
        console.log('Edit time entry button clicked:', { timeEntryId });
        editTimeEntry(timeEntryId);
        return;
      }
    });

    // Search functionality
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const target = e.target;
        const searchTerm = target.value.toLowerCase();
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          const text = row.textContent?.toLowerCase() || '';
          row.style.display = text.includes(searchTerm) ? '' : 'none';
        });
      });
    }

    // Client filter functionality
    if (clientFilter) {
      clientFilter.addEventListener('change', (e) => {
        const target = e.target;
        const selectedClient = target.value;
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          const clientCell = row.querySelector('td:nth-child(2)');
          const clientName = clientCell?.textContent?.trim() || '';
          if (!selectedClient || clientName === selectedClient) {
            row.style.display = '';
          } else {
            row.style.display = 'none';
          }
        });
      });
    }

    // Task filter functionality
    if (taskFilter) {
      taskFilter.addEventListener('change', (e) => {
        const target = e.target;
        const selectedTask = target.value;
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          const taskCell = row.querySelector('td:nth-child(4)');
          const task = taskCell?.textContent?.trim() || '';
          if (!selectedTask || task === selectedTask) {
            row.style.display = '';
          } else {
            row.style.display = 'none';
          }
        });
      });
    }

    // Date range filter functionality
    if (dateRange) {
      dateRange.addEventListener('change', (e) => {
        const target = e.target;
        const selectedRange = target.value;
        const rows = document.querySelectorAll('tbody tr');
        const now = new Date();
        
        rows.forEach(row => {
          const startCell = row.querySelector('td:nth-child(5)');
          const startText = startCell?.textContent?.trim() || '';
          const startDate = new Date(startText);
          
          let show = true;
          if (selectedRange === 'today') {
            show = startDate.toDateString() === now.toDateString();
          } else if (selectedRange === 'week') {
            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
            show = startDate >= weekAgo;
          } else if (selectedRange === 'month') {
            const monthAgo = new Date(now.getFullYear(), now.getMonth(), 1);
            show = startDate >= monthAgo;
          } else if (selectedRange === 'quarter') {
            const quarterAgo = new Date(now.getFullYear(), Math.floor(now.getMonth() / 3) * 3, 1);
            show = startDate >= quarterAgo;
          }
          
          row.style.display = show ? '' : 'none';
        });
      });
    }

    // Searchable input functionality for User and Task
    const userInput = document.getElementById('timeEntryUser');
    const userIdInput = document.getElementById('timeEntryUserId');
    const userDropdown = document.getElementById('userDropdown');
    const taskInput = document.getElementById('timeEntryTask');
    const taskIdInput = document.getElementById('timeEntryTaskId');
    const taskDropdown = document.getElementById('taskDropdown');

    // Data is already available from server-side

    // User search functionality
    if (userInput) {
      userInput.addEventListener('input', (e) => {
        const searchTerm = e.target.value.toLowerCase();
        
        if (searchTerm.length < 1) {
          userDropdown?.classList.add('hidden');
          return;
        }
        
        const filteredUsers = usersData.filter(user => 
          user.name.toLowerCase().includes(searchTerm)
        );
        
        if (filteredUsers.length > 0) {
          userDropdown.innerHTML = filteredUsers.map(user => `
            <div class="px-3 py-2 hover:bg-gray-600 cursor-pointer text-white" data-user-id="${user.id}" data-user-name="${user.name}">
              ${user.name}
            </div>
          `).join('');
          userDropdown.classList.remove('hidden');
        } else {
          userDropdown.classList.add('hidden');
        }
      });

      // Handle user selection
      userDropdown.addEventListener('click', (e) => {
        const target = e.target;
        if (target.dataset.userId && target.dataset.userName) {
          userInput.value = target.dataset.userName;
          userIdInput.value = target.dataset.userId;
          userDropdown.classList.add('hidden');
        }
      });
    }

    // Task search functionality
    if (taskInput) {
      taskInput.addEventListener('input', (e) => {
        const searchTerm = e.target.value.toLowerCase();
        
        if (searchTerm.length < 1) {
          taskDropdown.classList.add('hidden');
          return;
        }
        
        const filteredTasks = tasksData.filter(task => 
          task.clientName.toLowerCase().includes(searchTerm) ||
          task.projectName.toLowerCase().includes(searchTerm) ||
          task.name.toLowerCase().includes(searchTerm)
        );
        
        if (filteredTasks.length > 0) {
          taskDropdown.innerHTML = filteredTasks.map(task => `
            <div class="px-3 py-2 hover:bg-gray-600 cursor-pointer text-white" data-task-id="${task.id}" data-task-name="${task.clientName} - ${task.projectName} - ${task.name}">
              <div class="font-medium">${task.name}</div>
              <div class="text-sm text-gray-400">${task.clientName} - ${task.projectName}</div>
            </div>
          `).join('');
          taskDropdown.classList.remove('hidden');
        } else {
          taskDropdown.classList.add('hidden');
        }
      });

      // Handle task selection
      taskDropdown.addEventListener('click', (e) => {
        const target = e.target;
        const taskItem = target.closest('[data-task-id]');
        if (taskItem && taskItem.dataset.taskId && taskItem.dataset.taskName) {
          taskInput.value = taskItem.dataset.taskName;
          taskIdInput.value = taskItem.dataset.taskId;
          taskDropdown.classList.add('hidden');
        }
      });
    }

    // Close dropdowns when clicking outside
    document.addEventListener('click', (e) => {
      const target = e.target;
      if (!target.closest('#timeEntryUser') && !target.closest('#userDropdown')) {
        userDropdown.classList.add('hidden');
      }
      if (!target.closest('#timeEntryTask') && !target.closest('#taskDropdown')) {
        taskDropdown.classList.add('hidden');
      }
    });

    // Close dropdowns with Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        userDropdown?.classList.add('hidden');
        taskDropdown?.classList.add('hidden');
      }
    });
  </script>
</AdminLayout> 