---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { tasks, projects, clients, taskAssignments, users, timeEntries } from '../../../db/schema';
import { count, sql } from 'drizzle-orm';

// Get all tasks with project info, assigned users, and time logged
const allTasks = await db
  .select({
    id: tasks.id,
    name: tasks.name,
    description: tasks.description,
    status: tasks.status,
    createdAt: tasks.createdAt,
    projectId: tasks.projectId,
    projectName: projects.name,
    clientName: clients.name,
    assignedUsers: sql<string>`STRING_AGG(${users.name}, ', ')`,
    timeLogged: sql<number>`COALESCE(SUM(${timeEntries.durationManual})/3600, 0)`,
  })
  .from(tasks)
  .leftJoin(projects, sql`${tasks.projectId} = ${projects.id}`)
  .leftJoin(clients, sql`${projects.clientId} = ${clients.id}`)
  .leftJoin(taskAssignments, sql`${tasks.id} = ${taskAssignments.taskId}`)
  .leftJoin(users, sql`${taskAssignments.userId} = ${users.id}`)
  .leftJoin(timeEntries, sql`${tasks.id} = ${timeEntries.taskId}`)
  .groupBy(tasks.id, projects.name, clients.name)
  .orderBy(clients.name, projects.name, tasks.name);

// Group tasks by project
const tasksByProject = allTasks.reduce((acc, task) => {
  const projectKey = `${task.clientName} - ${task.projectName}`;
  if (!acc[projectKey]) {
    acc[projectKey] = [];
  }
  acc[projectKey].push(task);
  return acc;
}, {} as Record<string, typeof allTasks>);

// Get all projects for the dropdown
const allProjects = await db
  .select({
    id: projects.id,
    name: projects.name,
    clientName: clients.name,
  })
  .from(projects)
  .leftJoin(clients, sql`${projects.clientId} = ${clients.id}`)
  .orderBy(clients.name, projects.name);

// Get all users for assignment
const allUsers = await db.select().from(users).orderBy(users.name);
---

<AdminLayout title="Tasks" currentPage="tasks">
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Tasks</h1>
        <p class="text-gray-600">Manage tasks organized by project</p>
      </div>
      <button
        id="createTaskBtn"
        class="inline-flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105"
      >
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        Add Task
      </button>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg shadow border border-gray-300 p-6">
      <div class="flex flex-col sm:flex-row gap-4">
        <div class="flex-1">
          <label for="search" class="block text-sm font-medium text-gray-700 mb-1">Search</label>
          <input
            type="text"
            id="search"
            placeholder="Search tasks..."
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
          />
        </div>
        <div class="sm:w-48">
          <label for="statusFilter" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
          <select
            id="statusFilter"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
          >
            <option value="">All Statuses</option>
            <option value="pending">Pending</option>
            <option value="in-progress">In Progress</option>
            <option value="completed">Completed</option>
            <option value="archived">Archived</option>
          </select>
        </div>
        <div class="sm:w-48">
          <label for="userFilter" class="block text-sm font-medium text-gray-700 mb-1">Assigned User</label>
          <select
            id="userFilter"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
          >
            <option value="">All Users</option>
            {allUsers.map((user) => (
              <option value={user.name}>{user.name}</option>
            ))}
          </select>
        </div>
      </div>
    </div>

    <!-- Tasks by Project -->
    <div class="space-y-6">
      {Object.entries(tasksByProject).map(([projectKey, projectTasks]) => (
        <div class="bg-white rounded-lg shadow border border-gray-300 overflow-hidden">
          <div class="px-6 py-4 bg-gray-50 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900">{projectKey}</h3>
            <p class="text-sm text-gray-600">{projectTasks.length} tasks</p>
          </div>
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                    Task Name
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                    Status
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                    Assigned Users
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                    Time Logged
                  </th>
                  <th class="px-6 py-3 text-right text-xs font-medium text-gray-700 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                {projectTasks.map((task) => (
                  <tr class="hover:bg-gray-50">
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="text-sm font-medium text-gray-900">{task.name}</div>
                      {task.description && (
                        <div class="text-sm text-gray-600 truncate max-w-xs">{task.description}</div>
                      )}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        task.status === 'completed' ? 'bg-green-100 text-green-800' :
                        task.status === 'in-progress' ? 'bg-blue-100 text-blue-800' :
                        task.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                        task.status === 'archived' ? 'bg-gray-100 text-gray-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {task.status}
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {task.assignedUsers || 'Unassigned'}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {task.timeLogged ? Math.round(task.timeLogged * 10) / 10 : 0} hours
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div class="flex justify-end space-x-2">
                        <button
                          class="inline-flex items-center px-3 py-2 bg-admin-mid-gray hover:bg-admin-light-gray text-admin-black text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105"
                          onclick={`assignUsers(${task.id})`}
                          title="Assign users to task"
                        >
                          <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                          </svg>
                          Assign
                        </button>
                        <button
                          class="inline-flex items-center px-3 py-2 bg-admin-dark-gray hover:bg-admin-mid-gray text-admin-light-gray text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105"
                          onclick={`editTask(${task.id})`}
                          title="Edit task details"
                        >
                          <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                          </svg>
                          Edit
                        </button>
                        <button
                          class="delete-task-btn inline-flex items-center px-3 py-2 bg-admin-dark-gray hover:bg-admin-mid-gray text-admin-light-gray text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105"
                          data-task-id={task.id}
                          data-task-name={task.name}
                          title="Delete task"
                        >
                          <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                          </svg>
                          Delete
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      ))}
    </div>

    {Object.keys(tasksByProject).length === 0 && (
      <div class="text-center py-12">
        <div class="text-6xl mb-4">✅</div>
        <h3 class="text-lg font-medium text-white mb-2">No tasks yet</h3>
        <p class="text-gray-300 mb-4">Get started by adding your first task</p>
        <button
          class="inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105"
          onclick="document.getElementById('createTaskBtn').click()"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          Add Your First Task
        </button>
      </div>
    )}
  </div>

  <!-- Create/Edit Task Modal -->
  <div id="taskModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-gray-600 rounded-lg shadow-xl max-w-md w-full max-h-[90vh] border border-gray-700 flex flex-col">
        <div class="px-6 py-4 border-b border-gray-700 flex-shrink-0">
          <h3 id="taskModalTitle" class="text-lg font-medium text-white">Add New Task</h3>
        </div>
        <div class="flex-1 overflow-y-auto" style="scrollbar-width: thin; scrollbar-color: #4B5563 #1F2937;">
          <form id="taskForm" class="px-6 py-4">
            <input type="hidden" id="taskId" />
            <div class="mb-4">
              <label for="taskName" class="block text-sm font-medium text-gray-300 mb-1">
                Task Name
              </label>
              <input
                type="text"
                id="taskName"
                required
                class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 bg-gray-700 text-white"
              />
            </div>
            <div class="mb-4">
              <label for="taskDescription" class="block text-sm font-medium text-gray-300 mb-1">
                Description
              </label>
              <textarea
                id="taskDescription"
                rows="3"
                class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 bg-gray-700 text-white"
              ></textarea>
            </div>
            <div class="mb-4">
              <label for="taskProject" class="block text-sm font-medium text-gray-300 mb-1">
                Project
              </label>
              <select
                id="taskProject"
                required
                class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 bg-gray-700 text-white"
              >
                <option value="">Select a project</option>
                {allProjects.map((project) => (
                  <option value={project.id}>{project.clientName} - {project.name}</option>
                ))}
              </select>
            </div>
            <div class="mb-4">
              <label for="taskStatus" class="block text-sm font-medium text-gray-300 mb-1">
                Status
              </label>
              <select
                id="taskStatus"
                required
                class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-500 bg-gray-700 text-white"
              >
                <option value="pending">Pending</option>
                <option value="in-progress">In Progress</option>
                <option value="completed">Completed</option>
                <option value="archived">Archived</option>
              </select>
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                onclick="closeTaskModal()"
                class="inline-flex items-center px-4 py-2 text-gray-300 bg-gray-700 hover:bg-gray-600 rounded-md transition-all duration-200 font-medium"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                Cancel
              </button>
              <button
                type="submit"
                class="inline-flex items-center px-4 py-2 bg-[#415058] hover:bg-[#1F292E] text-white rounded-md transition-all duration-200 font-medium shadow-sm hover:shadow-md"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                Save Task
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- User Assignment Modal -->
  <div id="assignmentModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-gray-600 rounded-lg shadow-xl max-w-md w-full max-h-[90vh] border border-gray-700 flex flex-col">
        <div class="px-6 py-4 border-b border-gray-700 flex-shrink-0">
          <h3 class="text-lg font-medium text-white">Assign Users to Task</h3>
        </div>
        <div class="flex-1 overflow-y-auto" style="scrollbar-width: thin; scrollbar-color: #4B5563 #1F2937;">
          <div class="p-6">
            <input type="hidden" id="assignmentTaskId" />
            <div class="mb-4">
              <label class="block text-sm font-medium text-gray-300 mb-2">Select Users</label>
              <div class="space-y-2">
                {allUsers.map((user) => (
                  <label class="flex items-center">
                    <input
                      type="checkbox"
                      value={user.id}
                      class="rounded border-gray-500 text-gray-300 focus:ring-gray-500 bg-gray-700"
                    />
                    <span class="ml-2 text-sm text-white">{user.name}</span>
                  </label>
                ))}
              </div>
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                onclick="closeAssignmentModal()"
                class="inline-flex items-center px-4 py-2 text-gray-300 bg-gray-700 hover:bg-gray-600 rounded-md transition-all duration-200 font-medium"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                Cancel
              </button>
              <button
                onclick="saveAssignments()"
                class="inline-flex items-center px-4 py-2 bg-[#415058] hover:bg-[#1F292E] text-white rounded-md transition-all duration-200 font-medium shadow-sm hover:shadow-md"
              >
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                Save Assignments
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Task management JavaScript
    const createTaskBtn = document.getElementById('createTaskBtn');
    const taskForm = document.getElementById('taskForm');
    const searchInput = document.getElementById('search');
    const statusFilter = document.getElementById('statusFilter');
    const userFilter = document.getElementById('userFilter');

    if (createTaskBtn) {
      createTaskBtn.addEventListener('click', () => {
        const modalTitle = document.getElementById('taskModalTitle');
        const taskId = document.getElementById('taskId') as HTMLInputElement;
        const taskName = document.getElementById('taskName') as HTMLInputElement;
        const taskDescription = document.getElementById('taskDescription') as HTMLTextAreaElement;
        const taskProject = document.getElementById('taskProject') as HTMLSelectElement;
        const taskStatus = document.getElementById('taskStatus') as HTMLSelectElement;
        const taskModal = document.getElementById('taskModal');
        
        if (modalTitle) modalTitle.textContent = 'Add New Task';
        if (taskId) taskId.value = '';
        if (taskName) taskName.value = '';
        if (taskDescription) taskDescription.value = '';
        if (taskProject) taskProject.value = '';
        if (taskStatus) taskStatus.value = 'pending';
        if (taskModal) taskModal.classList.remove('hidden');
      });
    }

    if (taskForm) {
      taskForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const taskId = (document.getElementById('taskId') as HTMLInputElement)?.value;
        const taskName = (document.getElementById('taskName') as HTMLInputElement)?.value;
        const taskDescription = (document.getElementById('taskDescription') as HTMLTextAreaElement)?.value;
        const taskProject = (document.getElementById('taskProject') as HTMLSelectElement)?.value;
        const taskStatus = (document.getElementById('taskStatus') as HTMLSelectElement)?.value;
        
        try {
          const response = await fetch('/api/admin/tasks', {
            method: taskId ? 'PUT' : 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              id: taskId, 
              name: taskName,
              description: taskDescription,
              projectId: parseInt(taskProject),
              status: taskStatus
            }),
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            alert('Error saving task');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error saving task');
        }
      });
    }

    function closeTaskModal() {
      const taskModal = document.getElementById('taskModal');
      if (taskModal) taskModal.classList.add('hidden');
    }

    function closeAssignmentModal() {
      const assignmentModal = document.getElementById('assignmentModal');
      if (assignmentModal) assignmentModal.classList.add('hidden');
    }

    function editTask(id: number) {
      const modalTitle = document.getElementById('taskModalTitle');
      const taskId = document.getElementById('taskId') as HTMLInputElement;
      const taskModal = document.getElementById('taskModal');
      
      if (modalTitle) modalTitle.textContent = 'Edit Task';
      if (taskId) taskId.value = id.toString();
      if (taskModal) taskModal.classList.remove('hidden');
    }

    async function assignUsers(id: number) {
      const assignmentTaskId = document.getElementById('assignmentTaskId') as HTMLInputElement;
      const assignmentModal = document.getElementById('assignmentModal');
      
      if (assignmentTaskId) assignmentTaskId.value = id.toString();
      if (assignmentModal) assignmentModal.classList.remove('hidden');
      
      // Clear all checkboxes first
      const checkboxes = document.querySelectorAll('#assignmentModal input[type="checkbox"]');
      checkboxes.forEach((checkbox: Element) => {
        (checkbox as HTMLInputElement).checked = false;
      });
      
      // Fetch current assignments for this task and pre-select them
      try {
        const response = await fetch(`/api/admin/tasks/${id}/assignments`, {
          credentials: 'include'
        });
        
        if (response.ok) {
          const assignments = await response.json();
          const assignedUserIds = assignments.map((assignment: any) => assignment.userId);
          
          // Pre-select currently assigned users
          assignedUserIds.forEach((userId: number) => {
            const checkbox = document.querySelector(`#assignmentModal input[value="${userId}"]`) as HTMLInputElement;
            if (checkbox) {
              checkbox.checked = true;
            }
          });
        }
      } catch (error) {
        console.error('Error fetching current assignments:', error);
      }
    }

    function saveAssignments() {
      const taskId = (document.getElementById('assignmentTaskId') as HTMLInputElement)?.value;
      const checkboxes = document.querySelectorAll('#assignmentModal input[type="checkbox"]:checked');
      const userIds = Array.from(checkboxes).map(cb => (cb as HTMLInputElement).value);
      
      fetch('/api/admin/tasks/assign', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ taskId: parseInt(taskId), userIds: userIds.map(id => parseInt(id)) }),
      })
      .then(response => {
        if (response.ok) {
          window.location.reload();
        } else {
          alert('Error saving assignments');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error saving assignments');
      });
    }

    async function deleteTask(id: number) {
      if (confirm('Are you sure you want to delete this task? This action cannot be undone. The task will be deleted and all user assignments will be removed. Time entries will be preserved for record keeping.')) {
        try {
          // Show loading state
          const deleteButton = document.querySelector(`[data-task-id="${id}"].delete-task-btn`) as HTMLButtonElement;
          if (deleteButton) {
            deleteButton.disabled = true;
            deleteButton.innerHTML = `
              <svg class="w-4 h-4 mr-1.5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Deleting...
            `;
          }
          
          const response = await fetch(`/api/admin/tasks/${id}`, { 
            method: 'DELETE',
            credentials: 'include'
          });
          
          if (response.ok) {
            // Show success message
            const successMessage = document.createElement('div');
            successMessage.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
            successMessage.textContent = 'Task deleted successfully. Time entries have been preserved for record keeping.';
            document.body.appendChild(successMessage);
            
            // Remove success message after 3 seconds
            setTimeout(() => {
              if (successMessage.parentNode) {
                successMessage.parentNode.removeChild(successMessage);
              }
            }, 3000);
            
            window.location.reload();
          } else {
            const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
            alert(`Error deleting task: ${errorData.error || 'Unknown error'}`);
            
            // Reset button state
            if (deleteButton) {
              deleteButton.disabled = false;
              deleteButton.innerHTML = `
                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
                Delete
              `;
            }
          }
        } catch (error) {
          console.error('Error:', error);
          alert(`Error deleting task: ${error instanceof Error ? error.message : 'Unknown error'}`);
          
          // Reset button state
          const deleteButton = document.querySelector(`[data-task-id="${id}"].delete-task-btn`) as HTMLButtonElement;
          if (deleteButton) {
            deleteButton.disabled = false;
            deleteButton.innerHTML = `
              <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
              </svg>
              Delete
            `;
          }
        }
      }
    }

    // Add event listener for delete task buttons
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      
      // Handle delete task button
      if (target.classList.contains('delete-task-btn') || target.closest('.delete-task-btn')) {
        const taskId = parseInt(target.getAttribute('data-task-id') || target.closest('.delete-task-btn')?.getAttribute('data-task-id') || '0');
        const taskName = target.getAttribute('data-task-name') || target.closest('.delete-task-btn')?.getAttribute('data-task-name') || 'Unknown Task';
        
        console.log('Delete task button clicked:', { taskId, taskName });
        deleteTask(taskId);
        return;
      }
    });

    // Search functionality
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        const searchTerm = target.value.toLowerCase();
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          const firstCell = row.querySelector('td:first-child');
          const taskName = firstCell?.textContent?.toLowerCase() || '';
          (row as HTMLElement).style.display = taskName.includes(searchTerm) ? '' : 'none';
        });
      });
    }

    // Status filter functionality
    if (statusFilter) {
      statusFilter.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        const selectedStatus = target.value;
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          const statusCell = row.querySelector('td:nth-child(2)');
          const status = statusCell?.textContent?.trim() || '';
          if (!selectedStatus || status === selectedStatus) {
            (row as HTMLElement).style.display = '';
          } else {
            (row as HTMLElement).style.display = 'none';
          }
        });
      });
    }

    // User filter functionality
    if (userFilter) {
      userFilter.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        const selectedUser = target.value;
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          const userCell = row.querySelector('td:nth-child(3)');
          const users = userCell?.textContent?.toLowerCase() || '';
          if (!selectedUser || users.includes(selectedUser.toLowerCase())) {
            (row as HTMLElement).style.display = '';
          } else {
            (row as HTMLElement).style.display = 'none';
          }
        });
      });
    }
  </script>
</AdminLayout> 