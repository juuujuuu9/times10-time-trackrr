---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { clients, users, projects } from '../../../db/schema';
import { count, sql } from 'drizzle-orm';

// Get all clients with project counts and creator info (including archived)
const allClients = await db
  .select({
    id: clients.id,
    name: clients.name,
    createdAt: clients.createdAt,
    createdByName: users.name,
    archived: clients.archived,
    projectCount: count(projects.id),
  })
  .from(clients)
  .leftJoin(users, sql`${clients.createdBy} = ${users.id}`)
  .leftJoin(projects, sql`${clients.id} = ${projects.clientId}`)
  .groupBy(clients.id, users.name, clients.archived)
  .orderBy(clients.createdAt);
---

<AdminLayout title="Clients" currentPage="clients">
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-white">Clients</h1>
        <p class="text-gray-300">Manage your client relationships and projects</p>
      </div>
      <button
        id="createClientBtn"
        class="bg-[#4F46E5] hover:bg-[#3730A3] text-white font-medium py-2 px-4 rounded-lg transition-colors"
      >
        + Add Client
      </button>
    </div>

    <!-- Filters -->
    <div class="bg-gray-800 rounded-lg shadow border border-gray-700 p-6">
      <div class="flex flex-col sm:flex-row gap-4">
        <div class="flex-1">
          <label for="search" class="block text-sm font-medium text-gray-300 mb-1">Search</label>
          <input
            type="text"
            id="search"
            placeholder="Search clients..."
            class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
          />
        </div>
        <div class="sm:w-48">
          <label for="sort" class="block text-sm font-medium text-gray-300 mb-1">Sort by</label>
          <select
            id="sort"
            class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
          >
            <option value="name">Name</option>
            <option value="created">Created Date</option>
            <option value="projects">Project Count</option>
          </select>
        </div>
        <div class="sm:w-48">
          <label for="archiveFilter" class="block text-sm font-medium text-gray-300 mb-1">Status</label>
          <select
            id="archiveFilter"
            class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
          >
            <option value="active">Active</option>
            <option value="archived">Archived</option>
            <option value="all">All</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Clients Table -->
    <div class="bg-gray-800 rounded-lg shadow border border-gray-700 overflow-hidden">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-700">
          <thead class="bg-gray-700">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                Client Name
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                Projects
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                Created By
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                Created Date
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                Status
              </th>
              <th class="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody class="bg-gray-800 divide-y divide-gray-700">
            {allClients.map((client) => (
              <tr class="hover:bg-gray-700">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-white">{client.name}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-[#4F46E5] text-white" data-client-id="${client.id}">
                    {client.projectCount} projects
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-white">
                  {client.createdByName}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                  {new Date(client.createdAt).toLocaleDateString()}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  {client.archived ? (
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                      Archived
                    </span>
                  ) : (
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                      Active
                    </span>
                  )}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div class="flex justify-end space-x-2">
                    <button
                      class="text-[#4F46E5] hover:text-[#3730A3]"
                      onclick={`viewProjects(${client.id}, '${client.name}')`}
                    >
                      Projects
                    </button>
                    <button
                      class="text-[#EC4899] hover:text-[#DB2777]"
                      onclick={`editClient(${client.id})`}
                    >
                      Edit
                    </button>
                    <button
                      class={client.archived ? "text-green-400 hover:text-green-300" : "text-yellow-400 hover:text-yellow-300"}
                      onclick={client.archived ? `unarchiveClient(${client.id})` : `archiveClient(${client.id})`}
                    >
                      {client.archived ? 'Unarchive' : 'Archive'}
                    </button>
                    <button
                      class="text-red-400 hover:text-red-300 p-1"
                      onclick={`deleteClient(${client.id})`}
                      title="Delete client"
                    >
                      <img src="/icons/trash-bin.svg" alt="Delete" class="w-4 h-4" />
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>

    <div id="emptyState" class="text-center py-12 hidden">
      <div class="text-6xl mb-4">👥</div>
      <h3 class="text-lg font-medium text-white mb-2">No clients yet</h3>
      <p class="text-gray-300 mb-4">Get started by adding your first client</p>
      <button
        class="bg-[#4F46E5] hover:bg-[#3730A3] text-white font-medium py-2 px-4 rounded-lg transition-colors"
        onclick="document.getElementById('createClientBtn').click()"
      >
        Add Your First Client
      </button>
    </div>
  </div>

  <!-- Create/Edit Client Modal -->
  <div id="clientModal" class="fixed inset-0 bg-gray-900 bg-opacity-75 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-gray-800 rounded-lg shadow-xl max-w-md w-full border border-gray-700">
        <div class="px-6 py-4 border-b border-gray-700">
          <h3 id="modalTitle" class="text-lg font-medium text-white">Add New Client</h3>
        </div>
        <form id="clientForm" class="p-6">
          <input type="hidden" id="clientId" />
          <div class="mb-4">
            <label for="clientName" class="block text-sm font-medium text-gray-300 mb-1">
              Client Name
            </label>
            <input
              type="text"
              id="clientName"
              required
              class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
            />
          </div>
          <div class="flex justify-end space-x-3">
            <button
              type="button"
              onclick="closeModal()"
              class="px-4 py-2 text-gray-300 bg-gray-700 hover:bg-gray-600 rounded-md transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-[#4F46E5] hover:bg-[#3730A3] text-white rounded-md transition-colors"
            >
              Save Client
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Projects Modal -->
  <div id="projectsModal" class="fixed inset-0 bg-gray-900 bg-opacity-75 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full border border-gray-700">
        <div class="px-6 py-4 border-b border-gray-700 flex justify-between items-center">
          <h3 id="projectsModalTitle" class="text-lg font-medium text-white">Projects</h3>
          <button
            onclick="closeProjectsModal()"
            class="text-gray-400 hover:text-white"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div class="p-6">
          <div class="flex justify-between items-center mb-6">
            <div>
              <h4 id="clientNameHeader" class="text-xl font-semibold text-white"></h4>
              <p class="text-gray-300">Manage projects for this client</p>
            </div>
            <button
              id="newProjectBtn"
              class="bg-[#4F46E5] hover:bg-[#3730A3] text-white font-medium py-2 px-4 rounded-lg transition-colors"
            >
              + New Project
            </button>
          </div>
          
          <div id="projectsList" class="space-y-3">
            <!-- Projects will be loaded here -->
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- New Project Modal -->
  <div id="newProjectModal" class="fixed inset-0 bg-gray-900 bg-opacity-75 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-gray-800 rounded-lg shadow-xl max-w-md w-full border border-gray-700">
        <div class="px-6 py-4 border-b border-gray-700">
          <h3 class="text-lg font-medium text-white">Add New Project</h3>
        </div>
        <form id="newProjectForm" class="p-6">
          <input type="hidden" id="projectClientId" />
          <div class="mb-4">
            <label for="projectName" class="block text-sm font-medium text-gray-300 mb-1">
              Project Name
            </label>
            <input
              type="text"
              id="projectName"
              required
              class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
            />
          </div>
          <div class="flex justify-end space-x-3">
            <button
              type="button"
              onclick="closeNewProjectModal()"
              class="px-4 py-2 text-gray-300 bg-gray-700 hover:bg-gray-600 rounded-md transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-[#4F46E5] hover:bg-[#3730A3] text-white rounded-md transition-colors"
            >
              Create Project
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Client management JavaScript
    const createClientBtn = document.getElementById('createClientBtn');
    const clientForm = document.getElementById('clientForm');
    const searchInput = document.getElementById('search');

    if (createClientBtn) {
      createClientBtn.addEventListener('click', () => {
        const modalTitle = document.getElementById('modalTitle');
        const clientId = document.getElementById('clientId') as HTMLInputElement;
        const clientName = document.getElementById('clientName') as HTMLInputElement;
        const clientModal = document.getElementById('clientModal');
        
        if (modalTitle) modalTitle.textContent = 'Add New Client';
        if (clientId) clientId.value = '';
        if (clientName) clientName.value = '';
        if (clientModal) clientModal.classList.remove('hidden');
      });
    }

    if (clientForm) {
      clientForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const clientId = (document.getElementById('clientId') as HTMLInputElement)?.value;
        const clientName = (document.getElementById('clientName') as HTMLInputElement)?.value;
        
        try {
          const response = await fetch('/api/admin/clients', {
            method: clientId ? 'PUT' : 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: clientId, name: clientName }),
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            alert('Error saving client');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error saving client');
        }
      });
    }

    (window as any).closeModal = function() {
      const clientModal = document.getElementById('clientModal');
      if (clientModal) clientModal.classList.add('hidden');
    };

    // Make functions globally available
    (window as any).editClient = async function(id: number) {
      try {
        const response = await fetch(`/api/admin/clients/${id}`);
        if (!response.ok) {
          throw new Error('Failed to fetch client');
        }
        
        const client = await response.json();
        
        const modalTitle = document.getElementById('modalTitle');
        const clientId = document.getElementById('clientId') as HTMLInputElement;
        const clientName = document.getElementById('clientName') as HTMLInputElement;
        const clientModal = document.getElementById('clientModal');
        
        if (modalTitle) modalTitle.textContent = 'Edit Client';
        if (clientId) clientId.value = client.id.toString();
        if (clientName) clientName.value = client.name;
        if (clientModal) clientModal.classList.remove('hidden');
      } catch (error) {
        console.error('Error fetching client:', error);
        alert('Error loading client details');
      }
    };

    (window as any).archiveClient = async function(id: number) {
      if (confirm('Are you sure you want to archive this client? This will hide it from the main view.')) {
        try {
          const response = await fetch('/api/admin/clients', {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id, archived: true }),
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            alert('Error archiving client');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error archiving client');
        }
      }
    };

    (window as any).unarchiveClient = async function(id: number) {
      if (confirm('Are you sure you want to unarchive this client?')) {
        try {
          const response = await fetch('/api/admin/clients', {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id, archived: false }),
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            alert('Error unarchiving client');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error unarchiving client');
        }
      }
    };

    (window as any).deleteClient = function(id: number) {
      if (confirm('Are you sure you want to delete this client? This action cannot be undone.')) {
        fetch(`/api/admin/clients/${id}`, { method: 'DELETE' })
          .then(response => {
            if (response.ok) {
              window.location.reload();
            } else {
              alert('Error deleting client');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error deleting client');
          });
      }
    };

    // Search and filter functionality
    const archiveFilter = document.getElementById('archiveFilter') as HTMLSelectElement;
    
    function filterClients() {
      const searchTerm = (searchInput as HTMLInputElement)?.value.toLowerCase() || '';
      const archiveStatus = archiveFilter?.value || 'active';
      const rows = document.querySelectorAll('tbody tr');
      
      let visibleCount = 0;
      
      rows.forEach((row, index) => {
        const firstCell = row.querySelector('td:first-child');
        const statusCell = row.querySelector('td:nth-child(5)'); // Status column (5th column)
        const clientName = firstCell?.textContent?.toLowerCase() || '';
        const status = statusCell?.textContent?.trim() || '';
        
        let showBySearch = clientName.includes(searchTerm);
        let showByArchive = true;
        
        if (archiveStatus === 'active') {
          showByArchive = status === 'Active';
        } else if (archiveStatus === 'archived') {
          showByArchive = status === 'Archived';
        }
        // 'all' shows everything
        
        const shouldShow = showBySearch && showByArchive;
        (row as HTMLElement).style.display = shouldShow ? '' : 'none';
        
        if (shouldShow) {
          visibleCount++;
        }
      });
      
      // Show/hide empty state message
      const emptyState = document.getElementById('emptyState');
      if (emptyState) {
        if (visibleCount === 0) {
          emptyState.classList.remove('hidden');
          updateEmptyStateMessage(archiveStatus, searchTerm);
        } else {
          emptyState.classList.add('hidden');
        }
      }
    }
    
    function updateEmptyStateMessage(archiveStatus: string, searchTerm: string) {
      const emptyState = document.getElementById('emptyState');
      if (!emptyState) return;
      
      const titleElement = emptyState.querySelector('h3');
      const descriptionElement = emptyState.querySelector('p');
      
      if (searchTerm) {
        // Search term is active
        if (titleElement) titleElement.textContent = 'No clients found';
        if (descriptionElement) descriptionElement.textContent = `No clients match "${searchTerm}"`;
      } else if (archiveStatus === 'active') {
        // Active filter
        if (titleElement) titleElement.textContent = 'No active clients';
        if (descriptionElement) descriptionElement.textContent = 'Get started by adding your first client or check archived clients';
      } else if (archiveStatus === 'archived') {
        // Archived filter
        if (titleElement) titleElement.textContent = 'No archived clients';
        if (descriptionElement) descriptionElement.textContent = 'No clients have been archived yet';
      } else {
        // All filter
        if (titleElement) titleElement.textContent = 'No clients yet';
        if (descriptionElement) descriptionElement.textContent = 'Get started by adding your first client';
      }
    }
    
    if (searchInput) {
      searchInput.addEventListener('input', filterClients);
    }
    
    if (archiveFilter) {
      archiveFilter.addEventListener('change', filterClients);
    }
    
    // Apply initial filter on page load (show only active clients by default)
    setTimeout(() => {
      filterClients();
    }, 100);

    // Projects modal functionality
    let currentClientId: number | null = null;

    (window as any).viewProjects = async function(clientId: number, clientName: string) {
      currentClientId = clientId;
      
      const projectsModal = document.getElementById('projectsModal');
      const clientNameHeader = document.getElementById('clientNameHeader');
      const projectsList = document.getElementById('projectsList');
      
      if (clientNameHeader) clientNameHeader.textContent = clientName;
      if (projectsModal) projectsModal.classList.remove('hidden');
      
      // Load projects for this client
      await loadProjects(clientId);
    };

    (window as any).closeProjectsModal = function() {
      const projectsModal = document.getElementById('projectsModal');
      if (projectsModal) projectsModal.classList.add('hidden');
      currentClientId = null;
    };

    (window as any).closeNewProjectModal = function() {
      const newProjectModal = document.getElementById('newProjectModal');
      const projectName = document.getElementById('projectName') as HTMLInputElement;
      if (newProjectModal) newProjectModal.classList.add('hidden');
      if (projectName) projectName.value = '';
    };

    async function loadProjects(clientId: number) {
      try {
        const response = await fetch('/api/admin/projects');
        if (!response.ok) {
          throw new Error('Failed to fetch projects');
        }
        
        const allProjects = await response.json();
        const clientProjects = allProjects.filter((project: any) => 
          project.clientId === clientId && !project.archived
        );
        
        const projectsList = document.getElementById('projectsList');
        if (projectsList) {
          if (clientProjects.length === 0) {
            projectsList.innerHTML = `
              <div class="text-center py-8">
                <div class="text-4xl mb-4">📁</div>
                <h3 class="text-lg font-medium text-white mb-2">No projects yet</h3>
                <p class="text-gray-300">Get started by creating your first project</p>
              </div>
            `;
          } else {
            projectsList.innerHTML = clientProjects.map((project: any) => `
              <div class="bg-gray-700 rounded-lg p-4 flex justify-between items-center">
                <div>
                  <h5 class="text-white font-medium">${project.name}</h5>
                  <p class="text-gray-300 text-sm">Created ${new Date(project.createdAt).toLocaleDateString()}</p>
                </div>
                <div class="flex space-x-2">
                  <button
                    class="text-[#4F46E5] hover:text-[#3730A3] text-sm"
                    onclick="viewProjectDetails(${project.id})"
                  >
                    View Details
                  </button>
                  <button
                    class="text-[#EC4899] hover:text-[#DB2777] text-sm"
                    onclick="editProject(${project.id})"
                  >
                    Edit
                  </button>
                  <button
                    class="text-yellow-400 hover:text-yellow-300 text-sm"
                    onclick="archiveProject(${project.id})"
                  >
                    Archive
                  </button>
                  <button
                    class="text-red-400 hover:text-red-300 text-sm"
                    onclick="deleteProject(${project.id})"
                  >
                    Delete
                  </button>
                </div>
              </div>
            `).join('');
          }
        }
      } catch (error) {
        console.error('Error loading projects:', error);
        const projectsList = document.getElementById('projectsList');
        if (projectsList) {
          projectsList.innerHTML = `
            <div class="text-center py-8">
              <p class="text-red-400">Error loading projects</p>
            </div>
          `;
        }
      }
    }

    // New Project button functionality
    const newProjectBtn = document.getElementById('newProjectBtn');
    const newProjectForm = document.getElementById('newProjectForm');

    if (newProjectBtn) {
      newProjectBtn.addEventListener('click', () => {
        const newProjectModal = document.getElementById('newProjectModal');
        const projectClientId = document.getElementById('projectClientId') as HTMLInputElement;
        const projectName = document.getElementById('projectName') as HTMLInputElement;
        
        if (projectClientId && currentClientId) projectClientId.value = currentClientId.toString();
        if (projectName) projectName.value = '';
        if (newProjectModal) newProjectModal.classList.remove('hidden');
      });
    }

    if (newProjectForm) {
      newProjectForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const projectClientId = (document.getElementById('projectClientId') as HTMLInputElement)?.value;
        const projectName = (document.getElementById('projectName') as HTMLInputElement)?.value;
        
        try {
          const response = await fetch('/api/admin/projects', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              name: projectName, 
              clientId: parseInt(projectClientId) 
            }),
          });
          
          if (response.ok) {
            (window as any).closeNewProjectModal();
            if (currentClientId) {
              await loadProjects(currentClientId);
              await updateProjectCounter(currentClientId);
            }
          } else {
            alert('Error creating project');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error creating project');
        }
      });
    }

    // Project counter update functions
    async function updateProjectCounter(clientId: number) {
      try {
        const response = await fetch('/api/admin/projects');
        if (!response.ok) {
          throw new Error('Failed to fetch projects');
        }
        
        const allProjects = await response.json();
        const clientProjects = allProjects.filter((project: any) => 
          project.clientId === clientId && !project.archived
        );
        
        const counterElement = document.querySelector(`[data-client-id="${clientId}"]`);
        if (counterElement) {
          counterElement.textContent = `${clientProjects.length} projects`;
        }
      } catch (error) {
        console.error('Error updating project counter:', error);
      }
    }

    // Project action functions
    (window as any).viewProjectDetails = function(projectId: number) {
      // TODO: Implement project details view
      alert('Project details view coming soon!');
    };

    (window as any).editProject = function(projectId: number) {
      // TODO: Implement project editing
      alert('Project editing coming soon!');
    };

    (window as any).archiveProject = async function(projectId: number) {
      if (confirm('Are you sure you want to archive this project? This will hide it from the main view.')) {
        try {
          const response = await fetch('/api/admin/projects', {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: projectId, archived: true }),
          });
          
          if (response.ok) {
            if (currentClientId) {
              await loadProjects(currentClientId);
              await updateProjectCounter(currentClientId);
            }
          } else {
            alert('Error archiving project');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error archiving project');
        }
      }
    };

    (window as any).deleteProject = function(projectId: number) {
      if (confirm('Are you sure you want to delete this project? This action cannot be undone.')) {
        fetch(`/api/admin/projects/${projectId}`, { method: 'DELETE' })
          .then(response => {
            if (response.ok) {
              if (currentClientId) {
                loadProjects(currentClientId);
                updateProjectCounter(currentClientId);
              }
            } else {
              alert('Error deleting project');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error deleting project');
          });
      }
    };
  </script>
</AdminLayout> 