---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { clients, users, projects } from '../../../db/schema';
import { count, sql } from 'drizzle-orm';

// Get all clients with project counts and creator info
const allClients = await db
  .select({
    id: clients.id,
    name: clients.name,
    createdAt: clients.createdAt,
    createdByName: users.name,
    projectCount: count(projects.id),
  })
  .from(clients)
  .leftJoin(users, sql`${clients.createdBy} = ${users.id}`)
  .leftJoin(projects, sql`${clients.id} = ${projects.clientId}`)
  .groupBy(clients.id, users.name)
  .orderBy(clients.createdAt);
---

<AdminLayout title="Clients" currentPage="clients">
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Clients</h1>
        <p class="text-gray-600">Manage your client relationships and projects</p>
      </div>
      <button
        id="createClientBtn"
        class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
      >
        + Add Client
      </button>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg shadow p-6">
      <div class="flex flex-col sm:flex-row gap-4">
        <div class="flex-1">
          <label for="search" class="block text-sm font-medium text-gray-700 mb-1">Search</label>
          <input
            type="text"
            id="search"
            placeholder="Search clients..."
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        <div class="sm:w-48">
          <label for="sort" class="block text-sm font-medium text-gray-700 mb-1">Sort by</label>
          <select
            id="sort"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="name">Name</option>
            <option value="created">Created Date</option>
            <option value="projects">Project Count</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Clients Table -->
    <div class="bg-white rounded-lg shadow overflow-hidden">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Client Name
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Projects
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Created By
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Created Date
              </th>
              <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {allClients.map((client) => (
              <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="text-sm font-medium text-gray-900">{client.name}</div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    {client.projectCount} projects
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {client.createdByName}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {new Date(client.createdAt).toLocaleDateString()}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div class="flex justify-end space-x-2">
                    <a
                      href={`/admin/clients/${client.id}/projects`}
                      class="text-blue-600 hover:text-blue-900"
                    >
                      View Projects
                    </a>
                    <button
                      class="text-indigo-600 hover:text-indigo-900"
                      onclick={`editClient(${client.id})`}
                    >
                      Edit
                    </button>
                    <button
                      class="text-red-600 hover:text-red-900"
                      onclick={`deleteClient(${client.id})`}
                    >
                      Delete
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>

    {allClients.length === 0 && (
      <div class="text-center py-12">
        <div class="text-6xl mb-4">ðŸ‘¥</div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">No clients yet</h3>
        <p class="text-gray-600 mb-4">Get started by adding your first client</p>
        <button
          class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
          onclick="document.getElementById('createClientBtn').click()"
        >
          Add Your First Client
        </button>
      </div>
    )}
  </div>

  <!-- Create/Edit Client Modal -->
  <div id="clientModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 id="modalTitle" class="text-lg font-medium text-gray-900">Add New Client</h3>
        </div>
        <form id="clientForm" class="p-6">
          <input type="hidden" id="clientId" />
          <div class="mb-4">
            <label for="clientName" class="block text-sm font-medium text-gray-700 mb-1">
              Client Name
            </label>
            <input
              type="text"
              id="clientName"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div class="flex justify-end space-x-3">
            <button
              type="button"
              onclick="closeModal()"
              class="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors"
            >
              Save Client
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Client management JavaScript
    const createClientBtn = document.getElementById('createClientBtn');
    const clientForm = document.getElementById('clientForm');
    const searchInput = document.getElementById('search');

    if (createClientBtn) {
      createClientBtn.addEventListener('click', () => {
        const modalTitle = document.getElementById('modalTitle');
        const clientId = document.getElementById('clientId') as HTMLInputElement;
        const clientName = document.getElementById('clientName') as HTMLInputElement;
        const clientModal = document.getElementById('clientModal');
        
        if (modalTitle) modalTitle.textContent = 'Add New Client';
        if (clientId) clientId.value = '';
        if (clientName) clientName.value = '';
        if (clientModal) clientModal.classList.remove('hidden');
      });
    }

    if (clientForm) {
      clientForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const clientId = (document.getElementById('clientId') as HTMLInputElement)?.value;
        const clientName = (document.getElementById('clientName') as HTMLInputElement)?.value;
        
        try {
          const response = await fetch('/api/admin/clients', {
            method: clientId ? 'PUT' : 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: clientId, name: clientName }),
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            alert('Error saving client');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error saving client');
        }
      });
    }

    function closeModal() {
      const clientModal = document.getElementById('clientModal');
      if (clientModal) clientModal.classList.add('hidden');
    }

    function editClient(id: number) {
      // This would fetch client data and populate the modal
      // For now, we'll just show the modal
      const modalTitle = document.getElementById('modalTitle');
      const clientId = document.getElementById('clientId') as HTMLInputElement;
      const clientModal = document.getElementById('clientModal');
      
      if (modalTitle) modalTitle.textContent = 'Edit Client';
      if (clientId) clientId.value = id.toString();
      if (clientModal) clientModal.classList.remove('hidden');
    }

    function deleteClient(id: number) {
      if (confirm('Are you sure you want to delete this client?')) {
        fetch(`/api/admin/clients/${id}`, { method: 'DELETE' })
          .then(response => {
            if (response.ok) {
              window.location.reload();
            } else {
              alert('Error deleting client');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error deleting client');
          });
      }
    }

    // Search functionality
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        const searchTerm = target.value.toLowerCase();
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          const firstCell = row.querySelector('td:first-child');
          const clientName = firstCell?.textContent?.toLowerCase() || '';
          (row as HTMLElement).style.display = clientName.includes(searchTerm) ? '' : 'none';
        });
      });
    }
  </script>
</AdminLayout> 