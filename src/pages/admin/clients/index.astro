---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { clients, users, projects, timeEntries, tasks } from '../../../db/schema';
import { count, sql, sum, desc } from 'drizzle-orm';

// Get all clients with enhanced information
const allClients = await db
  .select({
    id: clients.id,
    name: clients.name,
    createdAt: clients.createdAt,
    updatedAt: clients.updatedAt,
    createdByName: users.name,
    archived: clients.archived,
    projectCount: count(sql`DISTINCT ${projects.id}`),
    totalHours: sql<number>`COALESCE(SUM(
      CASE 
        WHEN ${timeEntries.endTime} IS NOT NULL 
        THEN EXTRACT(EPOCH FROM (${timeEntries.endTime} - ${timeEntries.startTime}))
        ELSE COALESCE(${timeEntries.durationManual}, 0)
      END
    ), 0)`.as('total_hours'),
    totalCost: sql<number>`COALESCE(SUM(
      CASE 
        WHEN ${timeEntries.endTime} IS NOT NULL 
        THEN EXTRACT(EPOCH FROM (${timeEntries.endTime} - ${timeEntries.startTime})) / 3600 * COALESCE(${users.payRate}, 0)
        ELSE COALESCE(${timeEntries.durationManual}, 0) / 3600 * COALESCE(${users.payRate}, 0)
      END
    ), 0)`.as('total_cost'),
    lastActivity: sql<Date>`MAX(${timeEntries.startTime})`.as('last_activity'),
    activeProjects: count(sql`DISTINCT CASE WHEN ${projects.archived} = false THEN ${projects.id} END`).as('active_projects'),
  })
  .from(clients)
  .leftJoin(users, sql`${clients.createdBy} = ${users.id}`)
  .leftJoin(projects, sql`${clients.id} = ${projects.clientId}`)
  .leftJoin(tasks, sql`${projects.id} = ${tasks.projectId}`)
  .leftJoin(timeEntries, sql`${tasks.id} = ${timeEntries.taskId}`)
  .groupBy(clients.id, users.name, clients.archived)
  .orderBy(clients.name);
---

<AdminLayout title="Clients" currentPage="clients">
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Clients</h1>
        <p class="text-gray-600">Manage your client relationships and projects</p>
      </div>
      <div class="flex space-x-3">
        <button
          id="debugBtn"
          class="inline-flex items-center px-3 py-2 bg-yellow-600 hover:bg-yellow-700 text-white text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 border border-yellow-500"
          title="Debug client creation"
        >
          <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
          </svg>
          Debug
        </button>
        <button
          id="createClientBtn"
          class="inline-flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 border border-gray-500"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          Add Client
        </button>
      </div>
    </div>

    <!-- Summary Stats -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
      <div class="bg-white rounded-lg shadow border border-gray-300 p-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <div class="w-8 h-8 bg-gray-200 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-gray-600">Total Clients</p>
            </div>
          </div>
          <p class="text-2xl font-bold text-gray-900">{allClients.length}</p>
        </div>
      </div>
      
      <div class="bg-white rounded-lg shadow border border-gray-300 p-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <div class="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-gray-600">Active Clients</p>
            </div>
          </div>
          <p class="text-2xl font-bold text-gray-900">{allClients.filter(c => !c.archived).length}</p>
        </div>
      </div>
      
      <div class="bg-white rounded-lg shadow border border-gray-300 p-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <div class="w-8 h-8 bg-gray-200 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-gray-600">Total Projects</p>
            </div>
          </div>
          <p class="text-2xl font-bold text-gray-900">{allClients.reduce((sum, client) => sum + Number(client.projectCount), 0)}</p>
        </div>
      </div>
      
      <div class="bg-white rounded-lg shadow border border-gray-300 p-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <div class="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-gray-600">Total Revenue</p>
            </div>
          </div>
          <p class="text-2xl font-bold text-gray-900">${allClients.reduce((sum, client) => sum + Number(client.totalCost), 0).toFixed(2)}</p>
        </div>
      </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg shadow border border-gray-300 p-6">
      <div class="flex flex-col sm:flex-row gap-4">
        <div class="flex-1 mr-10">
          <label for="search" class="block text-sm font-medium text-gray-700 mb-1">Search</label>
          <input
            type="text"
            id="search"
            placeholder="Search clients..."
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
          />
        </div>
        <div class="sm:w-48">
          <label for="sort" class="block text-sm font-medium text-gray-700 mb-1">Sort by</label>
          <select
            id="sort"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
          >
            <option value="status">Status</option>
            <option value="name">Name</option>
            <option value="created">Created Date</option>
            <option value="projects">Project Count</option>
            <option value="revenue">Revenue</option>
            <option value="activity">Last Activity</option>
          </select>
        </div>
        <div class="sm:w-48">
          <label for="archiveFilter" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
          <select
            id="archiveFilter"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
          >
            <option value="active" selected>Active</option>
            <option value="archived">Archived</option>
            <option value="all">All</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Clients Grid -->
    <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6" id="clientsGrid">
      {allClients.map((client) => (
        <div 
          class="bg-white rounded-lg shadow border border-gray-300 overflow-hidden hover:shadow-lg transition-all duration-200 hover:border-gray-400"
          data-client-id={client.id}
          data-project-count={client.projectCount}
          data-revenue={client.totalCost}
          data-created-date={client.createdAt.toISOString()}
          data-last-activity={client.lastActivity ? new Date(client.lastActivity).toISOString() : ''}
        >
          <!-- Client Header -->
          <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
            <div class="flex justify-between items-start">
              <div class="flex-1">
                <h3 class="text-lg font-semibold text-gray-900 truncate">{client.name}</h3>
                <p class="text-sm text-gray-600">Created by {client.createdByName}</p>
              </div>
              <div class="flex items-center space-x-2">
                {client.archived ? (
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-300 text-gray-700">
                    Archived
                  </span>
                ) : (
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                    Active
                  </span>
                )}
              </div>
            </div>
          </div>

          <!-- Client Stats -->
          <div class="px-6 py-4 space-y-4">
            <!-- Projects Info -->
            <div class="flex items-center justify-between py-2 border-b border-gray-200">
              <div class="flex items-center">
                <svg class="w-4 h-4 text-gray-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
                <span class="text-sm text-gray-600">Projects</span>
              </div>
              <div class="text-right">
                <span class="text-sm font-medium text-gray-900">{client.projectCount}</span>
                {client.activeProjects > 0 && (
                  <span class="text-xs text-gray-500 ml-1">({client.activeProjects} active)</span>
                )}
              </div>
            </div>

            <!-- Hours Info -->
            <div class="flex items-center justify-between py-2 border-b border-gray-200">
              <div class="flex items-center">
                <svg class="w-4 h-4 text-gray-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span class="text-sm text-gray-600">Total Hours</span>
              </div>
              <span class="text-sm font-medium text-gray-900">
                {Number(client.totalHours) > 0 ? (Number(client.totalHours) / 3600).toFixed(1) : '0'}h
              </span>
            </div>

            <!-- Revenue Info -->
            <div class="flex items-center justify-between py-2 border-b border-gray-200">
              <div class="flex items-center">
                <svg class="w-4 h-4 text-gray-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                </svg>
                <span class="text-sm text-gray-600">Revenue</span>
              </div>
              <span class="text-sm font-medium text-gray-900">
                ${Number(client.totalCost).toFixed(2)}
              </span>
            </div>

            <!-- Last Activity -->
            <div class="flex items-center justify-between py-2">
              <div class="flex items-center">
                <svg class="w-4 h-4 text-gray-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
                <span class="text-sm text-gray-600">Last Activity</span>
              </div>
              <span class="text-sm text-gray-900">
                {client.lastActivity ? new Date(client.lastActivity).toLocaleDateString() : 'Never'}
              </span>
            </div>
          </div>

          <!-- Client Actions -->
          <div class="px-6 py-4 bg-gray-50 border-t border-gray-200">
            <div class="flex justify-between items-center">
              <div class="flex space-x-2">
                <button
                  class="inline-flex items-center px-3 py-2 bg-gray-200 hover:bg-gray-300 text-gray-700 text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105"
                  onclick={`viewProjects(${client.id}, '${client.name}', ${client.archived})`}
                  title="View client projects"
                >
                  <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                  </svg>
                  Projects
                </button>
                <button
                  class="inline-flex items-center px-3 py-2 bg-white hover:bg-gray-100 text-gray-700 text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 border border-gray-300"
                  onclick={`editClient(${client.id})`}
                  title="Edit client details"
                >
                  <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                  </svg>
                  Edit
                </button>
              </div>
              <div class="flex space-x-2">
                <button
                  class={`inline-flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 border ${
                    client.archived 
                      ? "bg-green-100 hover:bg-green-200 text-green-800 border-green-300" 
                      : "bg-gray-200 hover:bg-gray-300 text-gray-700 border-gray-300"
                  }`}
                  onclick={client.archived ? `unarchiveClient(${client.id})` : `archiveClient(${client.id})`}
                  title={client.archived ? "Restore client" : "Archive client"}
                >
                  <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={client.archived ? "M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" : "M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4"}></path>
                  </svg>
                  {client.archived ? 'Restore' : 'Archive'}
                </button>
                <button
                  class="delete-client-btn text-red-500 hover:text-red-600 transition-colors p-2 rounded-lg hover:bg-red-50"
                  data-client-id={client.id}
                  data-client-name={client.name}
                  title="Delete client"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>

    <div id="emptyState" class="text-center py-12 hidden">
      <div class="text-6xl mb-4">👥</div>
      <h3 class="text-lg font-medium text-admin-light-gray mb-2">No clients yet</h3>
      <p class="text-admin-mid-gray mb-4">Get started by adding your first client</p>
      <button
        class="bg-admin-mid-gray hover:bg-admin-light-gray text-admin-black font-medium py-2 px-4 rounded-lg transition-colors border border-admin-mid-gray"
        onclick="document.getElementById('createClientBtn').click()"
      >
        Add Your First Client
      </button>
    </div>
  </div>

  <!-- Create/Edit Client Modal -->
  <div id="clientModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] border border-gray-200 flex flex-col">
        <div class="px-6 py-4 border-b border-gray-200 flex-shrink-0">
          <h3 id="modalTitle" class="text-lg font-medium text-gray-900">Add New Client</h3>
        </div>
        <div class="flex-1 overflow-y-auto">
          <form id="clientForm" class="p-6">
            <input type="hidden" id="clientId" />
            <div class="mb-4">
              <label for="clientName" class="block text-sm font-medium text-gray-700 mb-1">
                Client Name
              </label>
              <input
                type="text"
                id="clientName"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#415058] focus:border-[#415058] bg-white text-gray-900 placeholder-gray-500"
              />
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                onclick="closeModal()"
                class="px-4 py-2 text-gray-700 bg-white hover:bg-gray-50 rounded-md transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                class="px-4 py-2 bg-[#415058] hover:bg-[#1F292E] text-white font-medium rounded-md transition-colors"
              >
                Save Client
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Projects Modal -->
  <div id="projectsModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] border border-gray-200 flex flex-col">
        <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center flex-shrink-0">
          <h3 id="projectsModalTitle" class="text-lg font-medium text-gray-900">Projects</h3>
          <button
            onclick="closeProjectsModal()"
            class="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div class="flex-1 overflow-hidden flex flex-col">
          <div class="px-6 py-4 flex-shrink-0">
            <div class="flex justify-between items-center">
              <div>
                <h4 id="clientNameHeader" class="text-xl font-semibold text-gray-900"></h4>
                <p id="clientDescription" class="text-gray-600">Manage projects for this client</p>
              </div>
              <button
                id="newProjectBtn"
                class="text-white font-medium py-2 px-4 rounded-lg transition-colors"
                style="background-color: #d63a2e;"
                onmouseover="this.style.backgroundColor='#b83228'"
                onmouseout="this.style.backgroundColor='#d63a2e'"
              >
                + New Project
              </button>
            </div>
          </div>
          
          <div class="px-6 pb-6 flex-1 overflow-y-auto">
            <div id="projectsList" class="space-y-3">
              <!-- Projects will be loaded here -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- New Project Modal -->
  <div id="newProjectModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] border border-gray-200 flex flex-col">
        <div class="px-6 py-4 border-b border-gray-200 flex-shrink-0">
          <h3 class="text-lg font-medium text-gray-900">Add New Project</h3>
        </div>
        <div class="flex-1 overflow-y-auto">
          <form id="newProjectForm" class="px-6 py-4">
            <input type="hidden" id="projectClientId" />
            <div class="mb-4">
              <label for="projectName" class="block text-sm font-medium text-gray-700 mb-1">
                Project Name
              </label>
              <input
                type="text"
                id="projectName"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#415058] focus:border-[#415058] bg-white text-gray-900 placeholder-gray-500"
              />
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                onclick="closeNewProjectModal()"
                class="px-4 py-2 text-gray-700 bg-white hover:bg-gray-50 rounded-md transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                class="px-4 py-2 bg-[#415058] hover:bg-[#1F292E] text-white font-medium rounded-md transition-colors"
              >
                Create Project
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Client management JavaScript
    const createClientBtn = document.getElementById('createClientBtn');
    const debugBtn = document.getElementById('debugBtn');
    const clientForm = document.getElementById('clientForm');
    const searchInput = document.getElementById('search');

    if (debugBtn) {
      debugBtn.addEventListener('click', async () => {
        console.log('Debug button clicked');
        try {
          const response = await fetch('/api/test-client-creation');
          const result = await response.json();
          console.log('Debug test result:', result);
          
          if (response.ok) {
            alert(`Debug test passed!\n\nUser: ${result.user.name} (${result.user.role})\nTests: ${result.tests.join(', ')}`);
          } else {
            alert(`Debug test failed: ${result.error}\n\nTest: ${result.test}\nDetails: ${result.details}`);
          }
        } catch (error) {
          console.error('Debug test error:', error);
          alert('Debug test failed: Network error');
        }
      });
    }

    if (createClientBtn) {
      createClientBtn.addEventListener('click', () => {
        const modalTitle = document.getElementById('modalTitle');
        const clientId = document.getElementById('clientId') as HTMLInputElement;
        const clientName = document.getElementById('clientName') as HTMLInputElement;
        const clientModal = document.getElementById('clientModal');
        
        if (modalTitle) modalTitle.textContent = 'Add New Client';
        if (clientId) clientId.value = '';
        if (clientName) clientName.value = '';
        if (clientModal) clientModal.classList.remove('hidden');
      });
    }

    if (clientForm) {
      clientForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const clientId = (document.getElementById('clientId') as HTMLInputElement)?.value;
        const clientName = (document.getElementById('clientName') as HTMLInputElement)?.value;
        
        console.log('Form submission:', { clientId, clientName });
        
        try {
          const requestBody = { id: clientId, name: clientName };
          console.log('Request body:', requestBody);
          
          const response = await fetch('/api/admin/clients', {
            method: clientId ? 'PUT' : 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestBody),
          });
          
          console.log('Response status:', response.status);
          console.log('Response headers:', Object.fromEntries(response.headers.entries()));
          
          if (response.ok) {
            const result = await response.json();
            console.log('Success response:', result);
            window.location.reload();
          } else {
            const errorData = await response.json();
            const errorMessage = errorData.error || 'Error saving client';
            console.error('Server error:', errorData);
            alert(`Error saving client: ${errorMessage}`);
          }
        } catch (error) {
          console.error('Network error:', error);
          alert('Network error: Unable to connect to server. Please check your connection and try again.');
        }
      });
    }

    (window as any).closeModal = function() {
      const clientModal = document.getElementById('clientModal');
      if (clientModal) clientModal.classList.add('hidden');
    };

    // Make functions globally available
    (window as any).editClient = async function(id: number) {
      try {
        const response = await fetch(`/api/admin/clients/${id}`);
        if (!response.ok) {
          throw new Error('Failed to fetch client');
        }
        
        const client = await response.json();
        
        const modalTitle = document.getElementById('modalTitle');
        const clientId = document.getElementById('clientId') as HTMLInputElement;
        const clientName = document.getElementById('clientName') as HTMLInputElement;
        const clientModal = document.getElementById('clientModal');
        
        if (modalTitle) modalTitle.textContent = 'Edit Client';
        if (clientId) clientId.value = client.id.toString();
        if (clientName) clientName.value = client.name;
        if (clientModal) clientModal.classList.remove('hidden');
      } catch (error) {
        console.error('Error fetching client:', error);
        alert('Error loading client details');
      }
    };

    (window as any).archiveClient = async function(id: number) {
      if (confirm('Are you sure you want to archive this client? This will hide it from the main view.')) {
        try {
          const response = await fetch('/api/admin/clients', {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id, archived: true }),
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            const errorData = await response.json();
            const errorMessage = errorData.error || 'Error archiving client';
            console.error('Server error:', errorData);
            alert(`Error archiving client: ${errorMessage}`);
          }
        } catch (error) {
          console.error('Network error:', error);
          alert('Network error: Unable to connect to server. Please check your connection and try again.');
        }
      }
    };

    (window as any).unarchiveClient = async function(id: number) {
      if (confirm('Are you sure you want to unarchive this client?')) {
        try {
          const response = await fetch('/api/admin/clients', {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id, archived: false }),
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            const errorData = await response.json();
            const errorMessage = errorData.error || 'Error unarchiving client';
            console.error('Server error:', errorData);
            alert(`Error unarchiving client: ${errorMessage}`);
          }
        } catch (error) {
          console.error('Network error:', error);
          alert('Network error: Unable to connect to server. Please check your connection and try again.');
        }
      }
    };

    (window as any).deleteClient = async function(id: number) {
      if (confirm('Are you sure you want to delete this client? This action cannot be undone.')) {
        try {
          const response = await fetch(`/api/admin/clients/${id}`, { method: 'DELETE' });
          
          if (response.ok) {
            window.location.reload();
          } else {
            const errorData = await response.json();
            const errorMessage = errorData.error || 'Error deleting client';
            console.error('Server error:', errorData);
            alert(`Error deleting client: ${errorMessage}`);
          }
        } catch (error) {
          console.error('Network error:', error);
          alert('Network error: Unable to connect to server. Please check your connection and try again.');
        }
      }
    };

    // Add event listener for delete client buttons
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      
      // Handle delete client button
      if (target.classList.contains('delete-client-btn') || target.closest('.delete-client-btn')) {
        const clientId = parseInt(target.getAttribute('data-client-id') || target.closest('.delete-client-btn')?.getAttribute('data-client-id') || '0');
        const clientName = target.getAttribute('data-client-name') || target.closest('.delete-client-btn')?.getAttribute('data-client-name') || 'Unknown Client';
        
        console.log('Delete client button clicked:', { clientId, clientName });
        (window as any).deleteClient(clientId);
        return;
      }
    });

    // Search and filter functionality
    const archiveFilter = document.getElementById('archiveFilter') as HTMLSelectElement;
    const sortSelect = document.getElementById('sort') as HTMLSelectElement;
    
    function filterClients() {
      const searchTerm = (searchInput as HTMLInputElement)?.value.toLowerCase() || '';
      const archiveStatus = archiveFilter?.value || 'active';
      const sortBy = sortSelect?.value || 'name';
      const clientCards = document.querySelectorAll('#clientsGrid > div');
      
      let visibleCount = 0;
      const visibleCards: HTMLElement[] = [];
      
      clientCards.forEach((card) => {
        const cardElement = card as HTMLElement;
        const clientName = card.querySelector('h3')?.textContent?.toLowerCase() || '';
        const statusElement = card.querySelector('span');
        const status = statusElement?.textContent?.trim() || '';
        
        let showBySearch = clientName.includes(searchTerm);
        let showByArchive = true;
        
        if (archiveStatus === 'active') {
          showByArchive = status === 'Active';
        } else if (archiveStatus === 'archived') {
          showByArchive = status === 'Archived';
        }
        // 'all' shows everything
        
        const shouldShow = showBySearch && showByArchive;
        cardElement.style.display = shouldShow ? '' : 'none';
        
        if (shouldShow) {
          visibleCount++;
          visibleCards.push(cardElement);
        }
      });
      
      // Sort visible cards
      sortClientCards(visibleCards, sortBy);
      
      // Show/hide empty state message
      const emptyState = document.getElementById('emptyState');
      if (emptyState) {
        if (visibleCount === 0) {
          emptyState.classList.remove('hidden');
          updateEmptyStateMessage(archiveStatus, searchTerm);
        } else {
          emptyState.classList.add('hidden');
        }
      }
    }
    
    function sortClientCards(cards: HTMLElement[], sortBy: string) {
      const grid = document.querySelector('#clientsGrid');
      if (!grid) return;
      
      cards.sort((a, b) => {
        switch (sortBy) {
          case 'status':
            const statusA = a.querySelector('span')?.textContent?.trim() || '';
            const statusB = b.querySelector('span')?.textContent?.trim() || '';
            // Sort active first, then archived
            if (statusA === 'Active' && statusB === 'Archived') return -1;
            if (statusA === 'Archived' && statusB === 'Active') return 1;
            return 0;
            
          case 'name':
            const nameA = a.querySelector('h3')?.textContent?.toLowerCase() || '';
            const nameB = b.querySelector('h3')?.textContent?.toLowerCase() || '';
            return nameA.localeCompare(nameB);
            
          case 'created':
            const createdA = new Date(a.getAttribute('data-created-date') || '');
            const createdB = new Date(b.getAttribute('data-created-date') || '');
            return createdB.getTime() - createdA.getTime();
            
          case 'projects':
            const projectsA = parseInt(a.getAttribute('data-project-count') || '0');
            const projectsB = parseInt(b.getAttribute('data-project-count') || '0');
            return projectsB - projectsA;
            
          case 'revenue':
            const revenueA = parseFloat(a.getAttribute('data-revenue') || '0');
            const revenueB = parseFloat(b.getAttribute('data-revenue') || '0');
            return revenueB - revenueA;
            
          case 'activity':
            const activityA = new Date(a.getAttribute('data-last-activity') || '');
            const activityB = new Date(b.getAttribute('data-last-activity') || '');
            return activityB.getTime() - activityA.getTime();
            
          default:
            return 0;
        }
      });
      
      // Re-append cards in sorted order
      cards.forEach(card => {
        grid.appendChild(card);
      });
    }
    
    function updateEmptyStateMessage(archiveStatus: string, searchTerm: string) {
      const emptyState = document.getElementById('emptyState');
      if (!emptyState) return;
      
      const titleElement = emptyState.querySelector('h3');
      const descriptionElement = emptyState.querySelector('p');
      
      if (searchTerm) {
        // Search term is active
        if (titleElement) titleElement.textContent = 'No clients found';
        if (descriptionElement) descriptionElement.textContent = `No clients match "${searchTerm}"`;
      } else if (archiveStatus === 'active') {
        // Active filter
        if (titleElement) titleElement.textContent = 'No active clients';
        if (descriptionElement) descriptionElement.textContent = 'Get started by adding your first client or check archived clients';
      } else if (archiveStatus === 'archived') {
        // Archived filter
        if (titleElement) titleElement.textContent = 'No archived clients';
        if (descriptionElement) descriptionElement.textContent = 'No clients have been archived yet';
      } else {
        // All filter
        if (titleElement) titleElement.textContent = 'No clients yet';
        if (descriptionElement) descriptionElement.textContent = 'Get started by adding your first client';
      }
    }
    
    if (searchInput) {
      searchInput.addEventListener('input', filterClients);
    }
    
    if (archiveFilter) {
      archiveFilter.addEventListener('change', filterClients);
    }
    
    if (sortSelect) {
      sortSelect.addEventListener('change', filterClients);
    }
    
    // Apply initial filter on page load (show only active clients by default, sorted by name)
    setTimeout(() => {
      // Set default values
      if (sortSelect) sortSelect.value = 'name';
      if (archiveFilter) archiveFilter.value = 'active';
      filterClients();
    }, 100);

    // Projects modal functionality
    let currentClientId: number | null = null;
    let currentProjectId: number | null = null;

    (window as any).viewProjects = async function(clientId: number, clientName: string, isArchived: boolean = false) {
      currentClientId = clientId;
      
      const projectsModal = document.getElementById('projectsModal');
      const clientNameHeader = document.getElementById('clientNameHeader');
      const clientDescription = document.getElementById('clientDescription');
      const projectsList = document.getElementById('projectsList');
      const newProjectBtn = document.getElementById('newProjectBtn');
      
      if (clientNameHeader) {
        clientNameHeader.textContent = clientName;
        if (isArchived) {
          clientNameHeader.innerHTML = `${clientName} <span class="text-gray-400 text-sm">(Archived)</span>`;
        }
      }
      
      if (clientDescription) {
        if (isArchived) {
          clientDescription.innerHTML = '<span class="text-yellow-600 font-medium">⚠️ This client is archived. Projects are read-only.</span>';
        } else {
          clientDescription.textContent = 'Manage projects for this client';
        }
      }
      
      // Hide new project button for archived clients
      if (newProjectBtn) {
        newProjectBtn.style.display = isArchived ? 'none' : 'block';
      }
      
      if (projectsModal) projectsModal.classList.remove('hidden');
      
      // Load projects for this client
      await loadProjects(clientId, isArchived);
    };

    (window as any).closeProjectsModal = function() {
      const projectsModal = document.getElementById('projectsModal');
      if (projectsModal) projectsModal.classList.add('hidden');
      currentClientId = null;
    };

    (window as any).closeNewProjectModal = function() {
      const newProjectModal = document.getElementById('newProjectModal');
      const projectName = document.getElementById('projectName') as HTMLInputElement;
      if (newProjectModal) newProjectModal.classList.add('hidden');
      if (projectName) projectName.value = '';
    };

    async function loadProjects(clientId: number, isClientArchived: boolean = false) {
      try {
        const response = await fetch('/api/admin/projects');
        if (!response.ok) {
          throw new Error('Failed to fetch projects');
        }
        
        const allProjects = await response.json();
        const clientProjects = allProjects.filter((project: any) => 
          project.clientId === clientId
        );
        
        const projectsList = document.getElementById('projectsList');
        if (projectsList) {
          if (clientProjects.length === 0) {
            const message = isClientArchived 
              ? "This archived client has no projects"
              : "Get started by creating your first project";
            
            projectsList.innerHTML = `
              <div class="text-center py-8">
                <div class="text-4xl mb-4">📁</div>
                <h3 class="text-lg font-medium text-gray-900 mb-2">No projects yet</h3>
                <p class="text-gray-600">${message}</p>
              </div>
            `;
          } else {
            projectsList.innerHTML = clientProjects.map((project: any) => `
              <div class="bg-gray-50 rounded-lg p-4 flex justify-between items-center border border-gray-200 hover:border-gray-300 transition-all duration-200">
                <div>
                  <h5 class="text-gray-900 font-medium">${project.name}</h5>
                  <p class="text-gray-600 text-sm">Created ${new Date(project.createdAt).toLocaleDateString()}</p>
                </div>
                <div class="flex space-x-2">
                  <button
                    class="text-blue-600 hover:text-blue-700 transition-colors p-1 rounded hover:bg-blue-50"
                    onclick="console.log('Edit button clicked for project ${project.id}'); editProject(${project.id})"
                    title="Edit project"
                  >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                    </svg>
                  </button>
                  <button
                    class="text-red-600 hover:text-red-700 transition-colors p-1 rounded hover:bg-red-50"
                    onclick="deleteProject(${project.id})"
                    title="Delete project"
                  >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                  </button>
                </div>
              </div>
            `).join('');
          }
        }
      } catch (error) {
        console.error('Error loading projects:', error);
        const projectsList = document.getElementById('projectsList');
        if (projectsList) {
          projectsList.innerHTML = `
            <div class="text-center py-8">
              <p class="text-red-600 font-medium">Error loading projects</p>
            </div>
          `;
        }
      }
    }

    // New Project button functionality
    const newProjectBtn = document.getElementById('newProjectBtn');
    const newProjectForm = document.getElementById('newProjectForm');

    if (newProjectBtn) {
      newProjectBtn.addEventListener('click', () => {
        currentProjectId = null;
        const newProjectModal = document.getElementById('newProjectModal');
        const projectClientId = document.getElementById('projectClientId') as HTMLInputElement;
        const projectName = document.getElementById('projectName') as HTMLInputElement;
        const modalTitle = newProjectModal?.querySelector('h3');
        const submitButton = newProjectModal?.querySelector('button[type="submit"]');
        
        if (projectClientId && currentClientId) projectClientId.value = currentClientId.toString();
        if (projectName) projectName.value = '';
        if (modalTitle) modalTitle.textContent = 'Add New Project';
        if (submitButton) submitButton.textContent = 'Create Project';
        if (newProjectModal) newProjectModal.classList.remove('hidden');
        
        // Reset form to use new project submission
        const newProjectForm = document.getElementById('newProjectForm');
        if (newProjectForm) {
          newProjectForm.removeEventListener('submit', (window as any).handleEditProjectSubmit);
          newProjectForm.addEventListener('submit', (window as any).handleNewProjectSubmit);
        }
      });
    }

    if (newProjectForm) {
      newProjectForm.addEventListener('submit', (window as any).handleNewProjectSubmit);
    }

    // Project counter update functions
    async function updateProjectCounter(clientId: number) {
      try {
        console.log('Updating project counter for client:', clientId);
        const response = await fetch('/api/admin/projects');
        if (!response.ok) {
          throw new Error('Failed to fetch projects');
        }
        
        const allProjects = await response.json();
        const clientProjects = allProjects.filter((project: any) => 
          project.clientId === clientId
        );
        
        console.log('Found projects for client:', clientProjects.length);
        
        // Find the client card and update the project count
        const clientCard = document.querySelector(`[data-client-id="${clientId}"]`);
        if (clientCard) {
          const projectCountElement = clientCard.querySelector('.text-right .text-sm.font-medium');
          if (projectCountElement) {
            projectCountElement.textContent = clientProjects.length.toString();
          }
          
          // Update the data attribute
          clientCard.setAttribute('data-project-count', clientProjects.length.toString());
          
          console.log('Updated counter to:', clientProjects.length);
        } else {
          console.warn('Client card not found for client:', clientId);
        }
      } catch (error) {
        console.error('Error updating project counter:', error);
      }
    }

    // Project action functions

    (window as any).editProject = async function(projectId: number) {
      console.log('editProject called with id:', projectId);
      currentProjectId = projectId;
      try {
        // Fetch project details
        console.log('Fetching project details...');
        const response = await fetch(`/api/admin/projects/${projectId}`);
        console.log('Response status:', response.status);
        if (response.ok) {
          const project = await response.json();
          console.log('Project data:', project);
          
          // Populate the new project modal for editing
          const projectName = document.getElementById('projectName') as HTMLInputElement;
          const projectClientId = document.getElementById('projectClientId') as HTMLInputElement;
          const newProjectModal = document.getElementById('newProjectModal');
          const modalTitle = newProjectModal?.querySelector('h3');
          const submitButton = newProjectModal?.querySelector('button[type="submit"]');
          
          if (projectName) projectName.value = project.name;
          if (projectClientId) projectClientId.value = project.clientId.toString();
          if (modalTitle) modalTitle.textContent = 'Edit Project';
          if (submitButton) submitButton.textContent = 'Update Project';
          if (newProjectModal) newProjectModal.classList.remove('hidden');
          
          console.log('Modal should be open now');
          
          // Change the form submission to use PUT method
          const newProjectForm = document.getElementById('newProjectForm');
          if (newProjectForm) {
            // Remove existing event listener and add new one for editing
            newProjectForm.removeEventListener('submit', (window as any).handleNewProjectSubmit);
            newProjectForm.addEventListener('submit', (window as any).handleEditProjectSubmit);
          }
        } else {
          alert('Error loading project details');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error loading project details');
      }
    };

    // Handle edit project form submission
    (window as any).handleEditProjectSubmit = async function(e: Event) {
      e.preventDefault();
      const projectName = (document.getElementById('projectName') as HTMLInputElement)?.value;
      const projectClientId = (document.getElementById('projectClientId') as HTMLInputElement)?.value;
      
      console.log('Edit form submission:', { projectName, projectClientId, currentProjectId });
      
      try {
        const response = await fetch('/api/admin/projects', {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            id: currentProjectId, 
            name: projectName, 
            clientId: parseInt(projectClientId) 
          }),
        });
        
        console.log('Response status:', response.status);
        if (response.ok) {
          console.log('Success! Closing modal and refreshing...');
          (window as any).closeNewProjectModal();
          if (currentClientId) {
            await loadProjects(currentClientId, false);
            await updateProjectCounter(currentClientId);
          }
        } else {
          const errorText = await response.text();
          console.error('Error response:', errorText);
          alert('Error updating project');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error updating project');
      }
    };

    // Handle new project form submission
    (window as any).handleNewProjectSubmit = async function(e: Event) {
      e.preventDefault();
      const projectClientId = (document.getElementById('projectClientId') as HTMLInputElement)?.value;
      const projectName = (document.getElementById('projectName') as HTMLInputElement)?.value;
      
      console.log('New project form submission:', { projectName, projectClientId });
      
      try {
        const response = await fetch('/api/admin/projects', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            name: projectName, 
            clientId: parseInt(projectClientId) 
          }),
        });
        
        if (response.ok) {
          (window as any).closeNewProjectModal();
          if (currentClientId) {
            await loadProjects(currentClientId, false);
            await updateProjectCounter(currentClientId);
          }
        } else {
          alert('Error creating project');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error creating project');
      }
    };



    (window as any).deleteProject = async function(projectId: number) {
      if (confirm('Are you sure you want to delete this project? This action cannot be undone.')) {
        try {
          const response = await fetch(`/api/admin/projects/${projectId}`, { method: 'DELETE' });
          if (response.ok) {
            if (currentClientId) {
              await loadProjects(currentClientId, false);
              await updateProjectCounter(currentClientId);
            }
          } else {
            alert('Error deleting project');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error deleting project');
        }
      }
    };
  </script>
</AdminLayout> 