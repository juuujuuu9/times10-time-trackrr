---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { users, tasks } from '../../../db/schema';
import { count, sql } from 'drizzle-orm';
import { requireRole } from '../../../utils/session';

// Get current user
const currentUser = await requireRole('admin', '/admin')(Astro) as any;

// Get all users with their stats
const allUsers = await db
  .select({
    id: users.id,
    name: users.name,
    email: users.email,
    role: users.role,
    status: users.status,
    payRate: users.payRate,
    createdAt: users.createdAt,
    updatedAt: users.updatedAt,
    taskCount: count(tasks.id),
  })
  .from(users)
  .leftJoin(tasks, sql`${users.id} = ${tasks.id}`)
  .groupBy(users.id)
  .orderBy(users.name);
---

<AdminLayout title="Team Members" currentPage="users">
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Team Members</h1>
        <p class="text-gray-600">Manage team members and their roles</p>
      </div>
      <button
        id="inviteUserBtn"
        class="inline-flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105"
      >
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        Invite Team Member
      </button>
    </div>

    <!-- Summary Stats -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
      <div class="bg-white rounded-lg shadow border border-gray-300 p-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <div class="w-8 h-8 bg-gray-200 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-gray-600">Total Team Members</p>
            </div>
          </div>
          <p class="text-2xl font-bold text-gray-900">{allUsers.length}</p>
        </div>
      </div>
      
      <div class="bg-white rounded-lg shadow border border-gray-300 p-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-green-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-gray-600">Active Members</p>
            </div>
          </div>
          <p class="text-2xl font-bold text-gray-900">{allUsers.filter(u => u.status === 'active').length}</p>
        </div>
      </div>
      
      <div class="bg-white rounded-lg shadow border border-gray-300 p-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-blue-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-gray-600">Pending Invitations</p>
            </div>
          </div>
          <p class="text-2xl font-bold text-gray-900">{allUsers.filter(u => u.status === 'invited').length}</p>
        </div>
      </div>
      
      <div class="bg-white rounded-lg shadow border border-gray-300 p-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <div class="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-gray-600">Admins</p>
            </div>
          </div>
          <p class="text-2xl font-bold text-gray-900">{allUsers.filter(u => u.role === 'admin').length}</p>
        </div>
      </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg shadow border border-gray-300 p-6">
      <div class="flex flex-col sm:flex-row gap-4">
        <div class="flex-1">
          <label for="search" class="block text-sm font-medium text-gray-700 mb-1">Search</label>
          <input
            type="text"
            id="search"
            placeholder="Search by name or email..."
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
          />
        </div>
        <div class="sm:w-48">
          <label for="roleFilter" class="block text-sm font-medium text-gray-700 mb-1">Role</label>
          <select
            id="roleFilter"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
          >
            <option value="">All Roles</option>
            <option value="admin">Admin</option>
            <option value="user">Team Member</option>
          </select>
        </div>
        <div class="sm:w-48">
          <label for="statusFilter" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
          <select
            id="statusFilter"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
          >
            <option value="">All Statuses</option>
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Team Members Table -->
    <div class="bg-white rounded-lg shadow border border-gray-300 overflow-hidden">
      <div class="px-6 py-4 bg-gray-50 border-b border-gray-200">
        <h3 class="text-lg font-semibold text-gray-900">Team Members</h3>
      </div>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Team Member
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Role
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Pay Rate
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Joined Date
              </th>
              <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {allUsers.map((user) => (
              <tr class="hover:bg-gray-50 transition-colors duration-200" data-user-id={user.id}>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                    <div class="flex-shrink-0 h-10 w-10">
                      <div class="h-10 w-10 rounded-lg bg-gray-200 flex items-center justify-center">
                        <span class="text-sm font-medium text-gray-700">
                          {user.name ? user.name.split(' ').map(n => n[0]).join('').toUpperCase() : 'U'}
                        </span>
                      </div>
                    </div>
                    <div class="ml-4">
                      <div class="text-sm font-medium text-gray-900">{user.name || 'Unknown User'}</div>
                      <div class="text-sm text-gray-500">{user.email || 'No email'}</div>
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    user.role === 'admin' 
                      ? 'bg-red-100 text-red-800' 
                      : 'bg-gray-100 text-gray-800'
                  }`}>
                    {user.role === 'admin' ? 'Admin' : 'Team Member'}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    user.status === 'active' 
                      ? 'bg-green-100 text-green-800' 
                      : user.status === 'invited'
                      ? 'bg-blue-100 text-blue-800'
                      : 'bg-gray-100 text-gray-800'
                  }`}>
                    {user.status === 'active' ? 'Active' : user.status === 'invited' ? 'Invited' : 'Inactive'}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  ${user.payRate ? parseFloat(user.payRate).toFixed(2) : '0.00'}/hr
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {new Date(user.createdAt).toLocaleDateString()}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <button
                    class="edit-user-btn inline-flex items-center px-3 py-1.5 bg-gray-100 hover:bg-gray-200 text-gray-700 text-sm font-medium rounded-md transition-colors duration-200"
                    data-user-id={user.id}
                    title="Edit user details"
                  >
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                    </svg>
                    Edit
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>

    {allUsers.length === 0 && (
      <div class="bg-white rounded-lg shadow border border-gray-300 p-12 text-center">
        <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">No team members yet</h3>
        <p class="text-gray-500 mb-6">Get started by inviting your first team member to join your organization</p>
        <button
          class="inline-flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-colors duration-200"
          onclick="document.getElementById('inviteUserBtn').click()"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          Invite Your First Team Member
        </button>
      </div>
    )}
  </div>

  <!-- Invite Team Member Modal -->
  <div id="inviteModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] border border-gray-300 flex flex-col">
        <div class="px-6 py-4 bg-gray-50 border-b border-gray-200 flex-shrink-0">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-gray-900">Invite New Team Member</h3>
            <button
              class="close-invite-modal-btn text-gray-400 hover:text-gray-600 transition-colors p-1"
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
        <div class="flex-1 overflow-y-auto">
          <form id="inviteForm" class="p-6">
            <div class="mb-4">
              <label for="inviteName" class="block text-sm font-medium text-gray-700 mb-1">
                Full Name
              </label>
              <input
                type="text"
                id="inviteName"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
                placeholder="Enter full name"
              />
            </div>
            <div class="mb-4">
              <label for="inviteEmail" class="block text-sm font-medium text-gray-700 mb-1">
                Email Address
              </label>
              <input
                type="email"
                id="inviteEmail"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
                placeholder="Enter email address"
              />
            </div>
            <div class="mb-4">
              <label for="inviteRole" class="block text-sm font-medium text-gray-700 mb-1">
                Role
              </label>
              <select
                id="inviteRole"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
              >
                <option value="user">Team Member</option>
                <option value="admin">Admin</option>
              </select>
            </div>
            <div class="mb-6">
              <label for="invitePayRate" class="block text-sm font-medium text-gray-700 mb-1">
                Hourly Pay Rate (USD)
              </label>
              <div class="relative">
                <span class="absolute left-3 top-2 text-gray-500">$</span>
                <input
                  type="number"
                  id="invitePayRate"
                  step="0.01"
                  min="0"
                  value="0.00"
                  class="w-full pl-8 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
                  placeholder="0.00"
                />
              </div>
              <p class="text-xs text-gray-500 mt-1">Enter the hourly rate in USD (e.g., 25.50)</p>
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                class="close-invite-modal-btn px-4 py-2 text-gray-700 bg-gray-200 hover:bg-gray-300 rounded-md transition-colors font-medium"
              >
                Cancel
              </button>
              <button
                type="submit"
                class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-md transition-colors font-medium"
              >
                Send Invitation
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Edit Team Member Modal -->
  <div id="editUserModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] border border-gray-300 flex flex-col">
        <div class="px-6 py-4 bg-gray-50 border-b border-gray-200 flex-shrink-0">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-gray-900">Edit Team Member</h3>
            <button
              class="close-edit-modal-btn text-gray-400 hover:text-gray-600 transition-colors p-1"
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
        <div class="flex-1 overflow-y-auto">
          <form id="editUserForm" class="p-6">
            <input type="hidden" id="editUserId" />
            <div class="mb-4">
              <label for="editUserName" class="block text-sm font-medium text-gray-700 mb-1">
                Full Name
              </label>
              <input
                type="text"
                id="editUserName"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
                placeholder="Enter full name"
              />
            </div>
            <div class="mb-4">
              <label for="editUserEmail" class="block text-sm font-medium text-gray-700 mb-1">
                Email Address
              </label>
              <input
                type="email"
                id="editUserEmail"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
                placeholder="Enter email address"
              />
            </div>
            <div class="mb-4">
              <label for="editUserRole" class="block text-sm font-medium text-gray-700 mb-1">
                Role
              </label>
              <select
                id="editUserRole"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
              >
                <option value="user">Team Member</option>
                <option value="admin">Admin</option>
              </select>
            </div>
            <div class="mb-4">
              <label for="editUserStatus" class="block text-sm font-medium text-gray-700 mb-1">
                Status
              </label>
              <select
                id="editUserStatus"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
              >
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
              </select>
            </div>
            <div class="mb-6">
              <label for="editUserPayRate" class="block text-sm font-medium text-gray-700 mb-1">
                Hourly Pay Rate (USD)
              </label>
              <div class="relative">
                <span class="absolute left-3 top-2 text-gray-500">$</span>
                <input
                  type="number"
                  id="editUserPayRate"
                  step="0.01"
                  min="0"
                  class="w-full pl-8 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
                  placeholder="0.00"
                />
              </div>
              <p class="text-xs text-gray-500 mt-1">Enter the hourly rate in USD (e.g., 25.50)</p>
            </div>
            <div class="flex justify-between items-center">
              <button
                type="button"
                id="deleteUserBtn"
                class="delete-user-btn px-4 py-2 text-red-600 hover:text-red-700 bg-red-50 hover:bg-red-100 rounded-md transition-colors font-medium flex items-center space-x-2"
                title="Delete team member"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
                <span>Delete</span>
              </button>
              <div class="flex space-x-3">
                <button
                  type="button"
                  class="close-edit-modal-btn px-4 py-2 text-gray-700 bg-gray-200 hover:bg-gray-300 rounded-md transition-colors font-medium"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-md transition-colors font-medium"
                >
                  Save Changes
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Change Role Modal -->
  <div id="roleModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] border border-gray-300 flex flex-col">
        <div class="px-6 py-4 bg-gray-50 border-b border-gray-200 flex-shrink-0">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-gray-900">Change Team Member Role</h3>
            <button
              class="close-role-modal-btn text-gray-400 hover:text-gray-600 transition-colors p-1"
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
        <div class="flex-1 overflow-y-auto">
          <div class="p-6">
            <input type="hidden" id="roleUserId" />
            <div class="mb-6">
              <label for="newRole" class="block text-sm font-medium text-gray-700 mb-1">
                New Role
              </label>
              <select
                id="newRole"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400 bg-white text-gray-900"
              >
                <option value="user">Team Member</option>
                <option value="admin">Admin</option>
              </select>
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                onclick="closeRoleModal()"
                class="px-4 py-2 text-gray-700 bg-gray-200 hover:bg-gray-300 rounded-md transition-colors font-medium"
              >
                Cancel
              </button>
              <button
                class="save-role-btn px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-md transition-colors font-medium"
              >
                Save Role
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>



  <script define:vars={{ currentUser }}>
    // Current user data is now available from server-side

    // Team Member management JavaScript
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOMContentLoaded fired');
      
      // Get DOM elements
      const inviteUserBtn = document.getElementById('inviteUserBtn');
      const inviteForm = document.getElementById('inviteForm');
      const editUserForm = document.getElementById('editUserForm');
      const searchInput = document.getElementById('search');
      const roleFilter = document.getElementById('roleFilter');
      const statusFilter = document.getElementById('statusFilter');
      
      console.log('Elements found:', {
        inviteUserBtn: !!inviteUserBtn,
        inviteForm: !!inviteForm,
        editUserForm: !!editUserForm,
        searchInput: !!searchInput,
        roleFilter: !!roleFilter,
        statusFilter: !!statusFilter
      });

      // Function to apply all filters
      function applyFilters() {
        const searchTerm = searchInput?.value.toLowerCase() || '';
        const selectedRole = roleFilter?.value || '';
        const selectedStatus = statusFilter?.value || '';
        
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          const nameCell = row.querySelector('td:first-child');
          const emailCell = row.querySelector('td:first-child div:last-child div:last-child');
          const roleCell = row.querySelector('td:nth-child(2)');
          const statusCell = row.querySelector('td:nth-child(3)');
          
          const name = nameCell?.textContent?.toLowerCase() || '';
          const email = emailCell?.textContent?.toLowerCase() || '';
          const roleText = roleCell?.textContent?.trim() || '';
          const statusText = statusCell?.textContent?.trim() || '';
          
          // Check search filter
          const matchesSearch = !searchTerm || name.includes(searchTerm) || email.includes(searchTerm);
          
          // Check role filter
          const matchesRole = !selectedRole || 
            (selectedRole === 'admin' && roleText.toLowerCase().includes('admin')) ||
            (selectedRole === 'user' && roleText.toLowerCase().includes('team member') && !roleText.toLowerCase().includes('admin'));
          
          // Check status filter
          const matchesStatus = !selectedStatus || 
            (selectedStatus === 'active' && statusText.includes('Active')) ||
            (selectedStatus === 'inactive' && statusText.includes('Inactive'));
          
          // Show row only if it matches all active filters
          row.style.display = (matchesSearch && matchesRole && matchesStatus) ? '' : 'none';
        });
      }

      // Invite button functionality
      if (inviteUserBtn) {
        console.log('Adding click listener to inviteUserBtn');
        inviteUserBtn.addEventListener('click', () => {
          console.log('Invite button clicked!');
          const inviteModal = document.getElementById('inviteModal');
          console.log('inviteModal found:', !!inviteModal);
          if (inviteModal) {
            inviteModal.classList.remove('hidden');
            console.log('Modal should be visible now');
          }
        });
      } else {
        console.log('inviteUserBtn not found!');
      }

      // Invite form functionality
      if (inviteForm) {
        inviteForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          const name = document.getElementById('inviteName')?.value;
          const email = document.getElementById('inviteEmail')?.value;
          const role = document.getElementById('inviteRole')?.value;
          const payRate = document.getElementById('invitePayRate')?.value;
          
          try {
            const response = await fetch('/api/admin/users', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ 
                name, 
                email, 
                role, 
                status: 'invited',
                payRate: payRate ? parseFloat(payRate) : 0.00,
                invitedBy: currentUser?.name || 'Team Administrator'
              }),
            });
            
            if (response.ok) {
              const result = await response.json();
              if (result.invitationSent) {
                alert('Invitation sent successfully! The team member will receive an email to set up their account.');
              }
              window.location.reload();
            } else {
              const errorData = await response.json();
              alert('Error inviting team member: ' + (errorData.error || 'Unknown error'));
            }
          } catch (error) {
            console.error('Error:', error);
            alert('Error inviting team member');
          }
        });
      }

      // Edit user form functionality
      if (editUserForm) {
        editUserForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          const userId = document.getElementById('editUserId')?.value;
          const name = document.getElementById('editUserName')?.value;
          const email = document.getElementById('editUserEmail')?.value;
          const role = document.getElementById('editUserRole')?.value;
          const status = document.getElementById('editUserStatus')?.value;
          const payRate = document.getElementById('editUserPayRate')?.value;
          
          try {
            const response = await fetch('/api/admin/users', {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ 
                id: userId, 
                name, 
                email, 
                role, 
                status,
                payRate: payRate ? parseFloat(payRate) : 0.00
              }),
            });
            
            if (response.ok) {
              window.location.reload();
            } else {
              alert('Error updating team member');
            }
          } catch (error) {
            console.error('Error:', error);
            alert('Error updating team member');
          }
        });
      }

      // Search functionality
      if (searchInput) {
        searchInput.addEventListener('input', applyFilters);
      }

      // Role filter functionality
      if (roleFilter) {
        roleFilter.addEventListener('change', applyFilters);
      }

      // Status filter functionality
      if (statusFilter) {
        statusFilter.addEventListener('change', applyFilters);
      }

      // Edit user buttons
      document.querySelectorAll('.edit-user-btn').forEach(button => {
        button.addEventListener('click', function() {
          const userId = parseInt(this.getAttribute('data-user-id') || '0');
          editUser(userId);
        });
      });

      // Save role button
      document.querySelectorAll('.save-role-btn').forEach(button => {
        button.addEventListener('click', function() {
          saveRoleChange();
        });
      });

      // Delete user button
      const deleteUserBtn = document.getElementById('deleteUserBtn');
      if (deleteUserBtn) {
        deleteUserBtn.addEventListener('click', function() {
          const userId = parseInt(document.getElementById('editUserId')?.value || '0');
          const userName = document.getElementById('editUserName')?.value || 'Unknown User';
          deleteUser(userId, userName);
        });
      }

      // Modal close buttons
      document.querySelectorAll('.close-invite-modal-btn').forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          closeInviteModal();
        });
      });

      document.querySelectorAll('.close-edit-modal-btn').forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          closeEditUserModal();
        });
      });

      document.querySelectorAll('.close-role-modal-btn').forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          closeRoleModal();
        });
      });

      // Modal backdrop clicks
      const inviteModal = document.getElementById('inviteModal');
      if (inviteModal) {
        inviteModal.addEventListener('click', function(e) {
          if (e.target === inviteModal) {
            closeInviteModal();
          }
        });
      }

      const editUserModal = document.getElementById('editUserModal');
      if (editUserModal) {
        editUserModal.addEventListener('click', function(e) {
          if (e.target === editUserModal) {
            closeEditUserModal();
          }
        });
      }

      const roleModal = document.getElementById('roleModal');
      if (roleModal) {
        roleModal.addEventListener('click', function(e) {
          if (e.target === roleModal) {
            closeRoleModal();
          }
        });
      }
    });

    // Modal close functions
    function closeInviteModal() {
      console.log('closeInviteModal called');
      const inviteModal = document.getElementById('inviteModal');
      if (inviteModal) {
        inviteModal.classList.add('hidden');
        console.log('Invite modal hidden');
      }
      
      // Clear the form
      const inviteForm = document.getElementById('inviteForm');
      if (inviteForm) inviteForm.reset();
    }

    function closeEditUserModal() {
      console.log('closeEditUserModal called');
      const editUserModal = document.getElementById('editUserModal');
      if (editUserModal) {
        editUserModal.classList.add('hidden');
        console.log('Edit user modal hidden');
      }
    }

    function closeRoleModal() {
      console.log('closeRoleModal called');
      const roleModal = document.getElementById('roleModal');
      if (roleModal) {
        roleModal.classList.add('hidden');
        console.log('Role modal hidden');
      }
    }

    // Keyboard support for closing modals (Escape key)
    document.addEventListener('keydown', function(event) {
      if (event.key === 'Escape') {
        closeInviteModal();
        closeEditUserModal();
        closeRoleModal();
      }
    });

    // Define functions outside DOMContentLoaded so they're accessible
    function editUser(id) {
      const editUserId = document.getElementById('editUserId');
      const editUserModal = document.getElementById('editUserModal');
      
      // Find the team member row and get current values
      const userRow = document.querySelector(`tr[data-user-id="${id}"]`);
      
      if (userRow) {
        // Get name and email from the first cell
        const nameElement = userRow.querySelector('td:first-child .ml-4 div:first-child');
        const emailElement = userRow.querySelector('td:first-child .ml-4 div:last-child');
        const roleElement = userRow.querySelector('td:nth-child(2) span');
        const statusElement = userRow.querySelector('td:nth-child(3) span');
        const payRateElement = userRow.querySelector('td:nth-child(5) span');
        
        const currentName = nameElement?.textContent?.trim() || '';
        const currentEmail = emailElement?.textContent?.trim() || '';
        const currentRole = roleElement?.textContent?.includes('Admin') ? 'admin' : 'user';
        const currentStatus = statusElement?.textContent?.includes('Active') ? 'active' : 'inactive';
        const currentPayRate = payRateElement?.textContent?.replace('/hr', '').replace('$', '').trim() || '0.00';
        
        console.log('Found team member data:', { currentName, currentEmail, currentRole, currentStatus, currentPayRate });
        
        // Populate the form fields
        const editUserName = document.getElementById('editUserName');
        const editUserEmail = document.getElementById('editUserEmail');
        const editUserRole = document.getElementById('editUserRole');
        const editUserStatus = document.getElementById('editUserStatus');
        const editUserPayRate = document.getElementById('editUserPayRate');
        
        if (editUserName) editUserName.value = currentName;
        if (editUserEmail) editUserEmail.value = currentEmail;
        if (editUserRole) editUserRole.value = currentRole;
        if (editUserStatus) editUserStatus.value = currentStatus;
        if (editUserPayRate) editUserPayRate.value = currentPayRate;
      }
      
      if (editUserId) editUserId.value = id.toString();
      if (editUserModal) editUserModal.classList.remove('hidden');
    }

    function changeRole(id) {
      const roleUserId = document.getElementById('roleUserId');
      const roleModal = document.getElementById('roleModal');
      
      if (roleUserId) roleUserId.value = id.toString();
      if (roleModal) roleModal.classList.remove('hidden');
    }

    function saveRoleChange() {
      const userId = document.getElementById('roleUserId')?.value;
      const newRole = document.getElementById('newRole')?.value;
      
      fetch('/api/admin/users/role', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: parseInt(userId), role: newRole }),
      })
      .then(response => {
        if (response.ok) {
          window.location.reload();
        } else {
          alert('Error changing role');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error changing role');
      });
    }

    function deleteUser(userId, userName) {
      if (confirm(`Are you sure you want to delete the team member "${userName}"? This action cannot be undone and will also delete all their time entries, task assignments, and any clients they created.`)) {
        fetch(`/api/admin/users/${userId}`, {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
        })
        .then(async response => {
          if (response.ok) {
            window.location.reload();
          } else {
            const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
            alert(`Error deleting team member: ${errorData.error || 'Unknown error'}`);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error deleting team member: Network error');
        });
      }
    }
  </script>
</AdminLayout> 