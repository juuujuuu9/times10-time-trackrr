---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { users, timeEntries, tasks } from '../../../db/schema';
import { count, sql } from 'drizzle-orm';

// Get all users with their stats
const allUsers = await db
  .select({
    id: users.id,
    name: users.name,
    email: users.email,
    role: users.role,
    status: users.status,
    payRate: users.payRate,
    createdAt: users.createdAt,
    updatedAt: users.updatedAt,
    totalHours: sql<number>`COALESCE(SUM(${timeEntries.durationManual})/3600, 0)`,
    taskCount: count(tasks.id),
  })
  .from(users)
  .leftJoin(timeEntries, sql`${users.id} = ${timeEntries.userId}`)
  .leftJoin(tasks, sql`${users.id} = ${tasks.id}`)
  .groupBy(users.id)
  .orderBy(users.name);
---

<AdminLayout title="Team Members" currentPage="users">
  <div class="space-y-8">
    <!-- Header -->
    <div class="bg-gray-800 rounded-xl shadow-sm border border-gray-700 p-6">
      <div class="flex items-center justify-between">
        <div class="flex items-center">
          <div class="w-12 h-12 bg-gradient-to-r from-[#4F46E5] to-[#3730A3] rounded-xl flex items-center justify-center mr-4">
            <span class="text-white text-xl">👥</span>
          </div>
          <div>
            <h1 class="text-3xl font-bold text-white">Team Members</h1>
            <p class="text-gray-300 mt-1">Manage team members and their roles</p>
          </div>
        </div>
        <button
          id="inviteUserBtn"
          class="bg-gradient-to-r from-[#4F46E5] to-[#3730A3] hover:from-[#3730A3] hover:to-[#312E81] text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 shadow-lg"
        >
          ➕ Invite Team Member
        </button>
      </div>
    </div>

    <!-- Stats Overview -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div class="bg-gray-800 rounded-xl shadow-sm border border-gray-700 p-6">
        <div class="flex items-center">
          <div class="p-3 bg-gradient-to-r from-[#10B981] to-[#059669] rounded-xl">
            <span class="text-2xl text-white">👤</span>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-400">Total Team Members</p>
            <p class="text-3xl font-bold text-white">{allUsers.length}</p>
          </div>
        </div>
      </div>
      <div class="bg-gray-800 rounded-xl shadow-sm border border-gray-700 p-6">
        <div class="flex items-center">
          <div class="p-3 bg-gradient-to-r from-[#4F46E5] to-[#3730A3] rounded-xl">
            <span class="text-2xl text-white">🟢</span>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-400">Active Team Members</p>
            <p class="text-3xl font-bold text-white">{allUsers.filter(u => u.status === 'active').length}</p>
          </div>
        </div>
      </div>
      <div class="bg-gray-800 rounded-xl shadow-sm border border-gray-700 p-6">
        <div class="flex items-center">
          <div class="p-3 bg-gradient-to-r from-[#EC4899] to-[#DB2777] rounded-xl">
            <span class="text-2xl text-white">👑</span>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-400">Admins</p>
            <p class="text-3xl font-bold text-white">{allUsers.filter(u => u.role === 'admin').length}</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Filters -->
    <div class="bg-gray-800 rounded-xl shadow-sm border border-gray-700 p-6">
      <div class="flex flex-col sm:flex-row gap-6">
        <div class="flex-1">
          <label for="search" class="block text-sm font-semibold text-gray-300 mb-2">Search Team Members</label>
          <input
            type="text"
            id="search"
            placeholder="Search by name or email..."
            class="w-[calc(100%-3rem)] px-4 py-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#4F46E5] focus:border-transparent transition-all duration-200 bg-gray-700 text-white"
          />
        </div>
        <div class="sm:w-48">
          <label for="roleFilter" class="block text-sm font-semibold text-gray-300 mb-2">Role</label>
          <select
            id="roleFilter"
            class="w-full px-4 py-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#4F46E5] focus:border-transparent transition-all duration-200 bg-gray-700 text-white"
          >
            <option value="">All Roles</option>
            <option value="admin">Admin</option>
            <option value="user">User</option>
          </select>
        </div>
        <div class="sm:w-48">
          <label for="statusFilter" class="block text-sm font-semibold text-gray-300 mb-2">Status</label>
          <select
            id="statusFilter"
            class="w-full px-4 py-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#4F46E5] focus:border-transparent transition-all duration-200 bg-gray-700 text-white"
          >
            <option value="">All Statuses</option>
            <option value="active">Active</option>
            <option value="inactive">Inactive</option>
          </select>
        </div>
      </div>
    </div>

                <!-- Team Members Table -->
    <div class="bg-gray-800 rounded-xl shadow-sm border border-gray-700 overflow-hidden">
      <div class="px-6 py-4 bg-gradient-to-r from-gray-800 to-gray-700 border-b border-gray-700">
        <div class="flex items-center">
          <div class="w-10 h-10 bg-gray-700 rounded-lg flex items-center justify-center mr-3">
            <span class="text-gray-300 text-xl">📋</span>
          </div>
          <h3 class="text-xl font-semibold text-white">Team Member Management</h3>
        </div>
      </div>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-700">
          <thead class="bg-gray-700">
            <tr>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">
                Team Member
              </th>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">
                Role
              </th>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">
                Status
              </th>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">
                Total Hours
              </th>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">
                Pay Rate
              </th>
              <th class="px-6 py-4 text-left text-xs font-semibold text-gray-300 uppercase tracking-wider">
                Joined Date
              </th>
              <th class="px-6 py-4 text-right text-xs font-semibold text-gray-300 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody class="bg-gray-800 divide-y divide-gray-700">
            {allUsers.map((user) => (
              <tr class="hover:bg-gray-700 transition-colors duration-200" data-user-id={user.id}>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                    <div class="flex-shrink-0 h-12 w-12">
                      <div class="h-12 w-12 rounded-xl bg-gradient-to-r from-[#4F46E5] to-[#3730A3] flex items-center justify-center shadow-lg">
                        <span class="text-sm font-bold text-white">
                          {user.name.split(' ').map(n => n[0]).join('').toUpperCase()}
                        </span>
                      </div>
                    </div>
                    <div class="ml-4">
                      <div class="text-sm font-semibold text-white">{user.name}</div>
                      <div class="text-sm text-gray-400">{user.email}</div>
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`inline-flex items-center px-3 py-1 rounded-full text-sm font-semibold ${
                    user.role === 'admin' 
                      ? 'bg-[#EC4899] text-white' 
                      : 'bg-[#4F46E5] text-white'
                  }`}>
                    {user.role === 'admin' ? '👑 Admin' : '👤 User'}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`inline-flex items-center px-3 py-1 rounded-full text-sm font-semibold ${
                    user.status === 'active' 
                      ? 'bg-[#10B981] text-white' 
                      : 'bg-gray-600 text-gray-300'
                  }`}>
                    {user.status === 'active' ? '🟢 Active' : '⚪ Inactive'}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                    <span class="text-sm font-semibold text-white">
                      {user.totalHours ? Math.round(user.totalHours * 10) / 10 : 0} hours
                    </span>
                    {user.totalHours > 0 && (
                      <div class="ml-2 w-16 bg-gray-600 rounded-full h-2">
                        <div class="bg-[#4F46E5] h-2 rounded-full" style={`width: ${Math.min((user.totalHours / 100) * 100, 100)}%`}></div>
                      </div>
                    )}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="text-sm font-semibold text-white">
                    ${user.payRate ? parseFloat(user.payRate).toFixed(2) : '0.00'}/hr
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
                  <div class="bg-gray-700 px-3 py-1 rounded-lg border border-gray-600">
                    {new Date(user.createdAt).toLocaleDateString()}
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div class="flex justify-end space-x-2">
                    <button
                      class="edit-user-btn px-3 py-1 bg-[#4F46E5] hover:bg-[#3730A3] text-white rounded-lg transition-colors text-xs font-medium"
                      data-user-id={user.id}
                    >
                      ✏️ Edit
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>

    {allUsers.length === 0 && (
      <div class="bg-gray-800 rounded-xl shadow-sm border border-gray-700 p-12 text-center">
        <div class="w-20 h-20 bg-gradient-to-r from-[#4F46E5] to-[#3730A3] rounded-full flex items-center justify-center mx-auto mb-6">
          <span class="text-white text-3xl">👤</span>
        </div>
        <h3 class="text-2xl font-bold text-white mb-2">No team members yet</h3>
        <p class="text-gray-300 mb-6">Get started by inviting your first team member to join your organization</p>
        <button
          class="bg-gradient-to-r from-[#4F46E5] to-[#3730A3] hover:from-[#3730A3] hover:to-[#312E81] text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 shadow-lg"
          onclick="document.getElementById('inviteUserBtn').click()"
        >
          ➕ Invite Your First Team Member
        </button>
      </div>
    )}
  </div>

      <!-- Invite Team Member Modal -->
  <div id="inviteModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-[#1F2937] rounded-xl shadow-xl max-w-md w-full max-h-[90vh] border border-gray-700 flex flex-col">
        <div class="px-6 py-4 bg-gradient-to-r from-[#1F2937] to-gray-700 border-b border-gray-700 flex-shrink-0">
          <div class="flex items-center">
            <div class="w-10 h-10 bg-[#4F46E5] rounded-lg flex items-center justify-center mr-3">
              <span class="text-white text-xl">📧</span>
            </div>
            <h3 class="text-xl font-semibold text-white">Invite New Team Member</h3>
          </div>
        </div>
        <div class="flex-1 overflow-y-auto" style="scrollbar-width: thin; scrollbar-color: #4B5563 #1F2937;">
          <form id="inviteForm" class="p-6">
            <div class="mb-6">
              <label for="inviteName" class="block text-sm font-semibold text-gray-300 mb-2">
                Full Name
              </label>
              <input
                type="text"
                id="inviteName"
                required
                class="w-[calc(100%-2rem)] px-4 py-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#4F46E5] focus:border-transparent transition-all duration-200 bg-gray-700 text-white"
                placeholder="Enter full name"
              />
            </div>
            <div class="mb-6">
              <label for="inviteEmail" class="block text-sm font-semibold text-gray-300 mb-2">
                Email Address
              </label>
              <input
                type="email"
                id="inviteEmail"
                required
                class="w-[calc(100%-2rem)] px-4 py-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#4F46E5] focus:border-transparent transition-all duration-200 bg-gray-700 text-white"
                placeholder="Enter email address"
              />
            </div>
            <div class="mb-6">
              <label for="inviteRole" class="block text-sm font-semibold text-gray-300 mb-2">
                Role
              </label>
              <select
                id="inviteRole"
                required
                class="w-full px-4 py-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#4F46E5] focus:border-transparent transition-all duration-200 bg-gray-700 text-white"
              >
                <option value="user">👤 User</option>
                <option value="admin">👑 Admin</option>
              </select>
            </div>
            <div class="mb-6">
              <label for="invitePayRate" class="block text-sm font-semibold text-gray-300 mb-2">
                Hourly Pay Rate (USD)
              </label>
              <div class="relative">
                <span class="absolute left-3 top-3 text-gray-400">$</span>
                <input
                  type="number"
                  id="invitePayRate"
                  step="0.01"
                  min="0"
                  value="0.00"
                  class="w-full pl-8 pr-4 py-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#4F46E5] focus:border-transparent transition-all duration-200 bg-gray-700 text-white"
                  placeholder="0.00"
                />
              </div>
              <p class="text-xs text-gray-400 mt-1">Enter the hourly rate in USD (e.g., 25.50)</p>
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                onclick="closeInviteModal()"
                class="px-4 py-2 text-gray-300 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors font-medium"
              >
                Cancel
              </button>
              <button
                type="submit"
                class="px-4 py-2 bg-gradient-to-r from-[#4F46E5] to-[#3730A3] hover:from-[#3730A3] hover:to-[#312E81] text-white rounded-lg transition-all duration-200 font-semibold"
              >
                📧 Send Invitation
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

      <!-- Edit Team Member Modal -->
  <div id="editUserModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-[#1F2937] rounded-xl shadow-xl max-w-md w-full max-h-[90vh] border border-gray-700 flex flex-col">
        <div class="px-6 py-4 bg-gradient-to-r from-[#1F2937] to-gray-700 border-b border-gray-700 rounded-tl-xl rounded-tr-xl flex-shrink-0">
          <div class="flex items-center">
            <div class="w-10 h-10 bg-[#10B981] rounded-lg flex items-center justify-center mr-3">
              <span class="text-white text-xl">✏️</span>
            </div>
            <h3 class="text-xl font-semibold text-white">Edit Team Member</h3>
          </div>
        </div>
        <div class="flex-1 overflow-y-auto" style="scrollbar-width: thin; scrollbar-color: #4B5563 #1F2937;">
          <form id="editUserForm" class="p-6">
            <input type="hidden" id="editUserId" />
            <div class="mb-6">
              <label for="editUserName" class="block text-sm font-semibold text-gray-300 mb-2">
                Full Name
              </label>
              <input
                type="text"
                id="editUserName"
                required
                class="w-[calc(100%-2rem)] px-4 py-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#10B981] focus:border-transparent transition-all duration-200 bg-gray-700 text-white"
                placeholder="Enter full name"
              />
            </div>
            <div class="mb-6">
              <label for="editUserEmail" class="block text-sm font-semibold text-gray-300 mb-2">
                Email Address
              </label>
              <input
                type="email"
                id="editUserEmail"
                required
                class="w-[calc(100%-2rem)] px-4 py-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#10B981] focus:border-transparent transition-all duration-200 bg-gray-700 text-white"
                placeholder="Enter email address"
              />
            </div>
            <div class="mb-6">
              <label for="editUserRole" class="block text-sm font-semibold text-gray-300 mb-2">
                Role
              </label>
              <select
                id="editUserRole"
                required
                class="w-full px-4 py-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#10B981] focus:border-transparent transition-all duration-200 bg-gray-700 text-white"
              >
                <option value="user">👤 User</option>
                <option value="admin">👑 Admin</option>
              </select>
            </div>
            <div class="mb-6">
              <label for="editUserStatus" class="block text-sm font-semibold text-gray-300 mb-2">
                Status
              </label>
              <select
                id="editUserStatus"
                required
                class="w-full px-4 py-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#10B981] focus:border-transparent transition-all duration-200 bg-gray-700 text-white"
              >
                <option value="active">🟢 Active</option>
                <option value="inactive">⚪ Inactive</option>
              </select>
            </div>
            <div class="mb-6">
              <label for="editUserPayRate" class="block text-sm font-semibold text-gray-300 mb-2">
                Hourly Pay Rate (USD)
              </label>
              <div class="relative">
                <span class="absolute left-3 top-3 text-gray-400">$</span>
                <input
                  type="number"
                  id="editUserPayRate"
                  step="0.01"
                  min="0"
                  class="w-[calc(100%-3rem)] pl-8 pr-4 py-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#10B981] focus:border-transparent transition-all duration-200 bg-gray-700 text-white"
                  placeholder="0.00"
                />
              </div>
              <p class="text-xs text-gray-400 mt-1">Enter the hourly rate in USD (e.g., 25.50)</p>
            </div>
            <div class="flex justify-end space-x-3">
              <button
                type="button"
                class="close-edit-modal-btn px-4 py-2 text-gray-300 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors font-medium"
              >
                Cancel
              </button>
              <button
                type="submit"
                class="px-4 py-2 bg-gradient-to-r from-[#10B981] to-[#059669] hover:from-[#059669] hover:to-[#047857] text-white rounded-lg transition-all duration-200 font-semibold"
              >
                💾 Save Changes
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Change Role Modal -->
  <div id="roleModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-[#1F2937] rounded-xl shadow-xl max-w-md w-full max-h-[90vh] border border-gray-700 flex flex-col">
        <div class="px-6 py-4 bg-gradient-to-r from-[#1F2937] to-gray-700 border-b border-gray-700 rounded-tl-xl rounded-tr-xl flex-shrink-0">
          <div class="flex items-center">
            <div class="w-10 h-10 bg-[#EC4899] rounded-lg flex items-center justify-center mr-3">
              <span class="text-white text-xl">👑</span>
            </div>
            <h3 class="text-xl font-semibold text-white">Change Team Member Role</h3>
          </div>
        </div>
        <div class="flex-1 overflow-y-auto" style="scrollbar-width: thin; scrollbar-color: #4B5563 #1F2937;">
          <div class="p-6">
            <input type="hidden" id="roleUserId" />
            <div class="mb-6">
              <label for="newRole" class="block text-sm font-semibold text-gray-300 mb-2">
                New Role
              </label>
              <select
                id="newRole"
                class="w-full px-4 py-3 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#EC4899] focus:border-transparent transition-all duration-200 bg-gray-700 text-white"
            >
              <option value="user">👤 User</option>
              <option value="admin">👑 Admin</option>
            </select>
          </div>
          <div class="flex justify-end space-x-3">
            <button
              type="button"
              class="close-role-modal-btn px-4 py-2 text-gray-300 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors font-medium"
            >
              Cancel
            </button>
            <button
              class="save-role-btn px-4 py-2 bg-gradient-to-r from-[#EC4899] to-[#DB2777] hover:from-[#DB2777] hover:to-[#BE185D] text-white rounded-lg transition-all duration-200 font-semibold"
            >
              👑 Save Role
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>



  <script>
    // Team Member management JavaScript
    const inviteUserBtn = document.getElementById('inviteUserBtn');
    const inviteForm = document.getElementById('inviteForm');
    const editUserForm = document.getElementById('editUserForm');
    const searchInput = document.getElementById('search');
    const roleFilter = document.getElementById('roleFilter');
    const statusFilter = document.getElementById('statusFilter');

    // Function to apply all filters
    function applyFilters() {
      const searchTerm = (searchInput as HTMLInputElement)?.value.toLowerCase() || '';
      const selectedRole = (roleFilter as HTMLSelectElement)?.value || '';
      const selectedStatus = (statusFilter as HTMLSelectElement)?.value || '';
      
      const rows = document.querySelectorAll('tbody tr');
      
      rows.forEach(row => {
        const nameCell = row.querySelector('td:first-child');
        const emailCell = row.querySelector('td:first-child div:last-child div:last-child');
        const roleCell = row.querySelector('td:nth-child(2)');
        const statusCell = row.querySelector('td:nth-child(3)');
        
        const name = nameCell?.textContent?.toLowerCase() || '';
        const email = emailCell?.textContent?.toLowerCase() || '';
        const roleText = roleCell?.textContent?.trim() || '';
        const statusText = statusCell?.textContent?.trim() || '';
        
        // Check search filter
        const matchesSearch = !searchTerm || name.includes(searchTerm) || email.includes(searchTerm);
        
        // Check role filter
        const matchesRole = !selectedRole || 
          (selectedRole === 'admin' && roleText.toLowerCase().includes('admin')) ||
          (selectedRole === 'user' && roleText.toLowerCase().includes('user') && !roleText.toLowerCase().includes('admin'));
        
        // Check status filter
        const matchesStatus = !selectedStatus || 
          (selectedStatus === 'active' && statusText.includes('🟢 Active')) ||
          (selectedStatus === 'inactive' && statusText.includes('⚪ Inactive'));
        
        // Show row only if it matches all active filters
        (row as HTMLElement).style.display = (matchesSearch && matchesRole && matchesStatus) ? '' : 'none';
      });
    }

    if (inviteUserBtn) {
      inviteUserBtn.addEventListener('click', () => {
        const inviteModal = document.getElementById('inviteModal');
        if (inviteModal) inviteModal.classList.remove('hidden');
      });
    }

    if (inviteForm) {
      inviteForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const name = (document.getElementById('inviteName') as HTMLInputElement)?.value;
        const email = (document.getElementById('inviteEmail') as HTMLInputElement)?.value;
        const role = (document.getElementById('inviteRole') as HTMLSelectElement)?.value;
        const payRate = (document.getElementById('invitePayRate') as HTMLInputElement)?.value;
        
        try {
          const response = await fetch('/api/admin/users', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              name, 
              email, 
              role, 
              status: 'active',
              payRate: payRate ? parseFloat(payRate) : 0.00
            }),
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            alert('Error inviting team member');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error inviting team member');
        }
      });
    }

    if (editUserForm) {
      editUserForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const userId = (document.getElementById('editUserId') as HTMLInputElement)?.value;
        const name = (document.getElementById('editUserName') as HTMLInputElement)?.value;
        const email = (document.getElementById('editUserEmail') as HTMLInputElement)?.value;
        const role = (document.getElementById('editUserRole') as HTMLSelectElement)?.value;
        const status = (document.getElementById('editUserStatus') as HTMLSelectElement)?.value;
        const payRate = (document.getElementById('editUserPayRate') as HTMLInputElement)?.value;
        
        try {
          const response = await fetch('/api/admin/users', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              id: userId, 
              name, 
              email, 
              role, 
              status,
              payRate: payRate ? parseFloat(payRate) : 0.00
            }),
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            alert('Error updating team member');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error updating team member');
        }
      });
    }

    function closeInviteModal() {
      const inviteModal = document.getElementById('inviteModal');
      if (inviteModal) inviteModal.classList.add('hidden');
    }

    function closeEditUserModal() {
      const editUserModal = document.getElementById('editUserModal');
      if (editUserModal) editUserModal.classList.add('hidden');
    }

    function closeRoleModal() {
      const roleModal = document.getElementById('roleModal');
      if (roleModal) roleModal.classList.add('hidden');
    }

    function editUser(id: number) {
      const editUserId = document.getElementById('editUserId') as HTMLInputElement;
      const editUserModal = document.getElementById('editUserModal');
      
      // Find the team member row and get current values
      const userRow = document.querySelector(`tr[data-user-id="${id}"]`);
      
      if (userRow) {
        // Get name and email from the first cell
        const nameElement = userRow.querySelector('td:first-child .ml-4 div:first-child');
        const emailElement = userRow.querySelector('td:first-child .ml-4 div:last-child');
        const roleElement = userRow.querySelector('td:nth-child(2) span');
        const statusElement = userRow.querySelector('td:nth-child(3) span');
        const payRateElement = userRow.querySelector('td:nth-child(5) span');
        
        const currentName = nameElement?.textContent?.trim() || '';
        const currentEmail = emailElement?.textContent?.trim() || '';
        const currentRole = roleElement?.textContent?.includes('Admin') ? 'admin' : 'user';
        const currentStatus = statusElement?.textContent?.includes('🟢 Active') ? 'active' : 'inactive';
        const currentPayRate = payRateElement?.textContent?.replace('/hr', '').replace('$', '').trim() || '0.00';
        
        console.log('Found team member data:', { currentName, currentEmail, currentRole, currentStatus, currentPayRate });
        
        // Populate the form fields
        const editUserName = document.getElementById('editUserName') as HTMLInputElement;
        const editUserEmail = document.getElementById('editUserEmail') as HTMLInputElement;
        const editUserRole = document.getElementById('editUserRole') as HTMLSelectElement;
        const editUserStatus = document.getElementById('editUserStatus') as HTMLSelectElement;
        const editUserPayRate = document.getElementById('editUserPayRate') as HTMLInputElement;
        
        if (editUserName) editUserName.value = currentName;
        if (editUserEmail) editUserEmail.value = currentEmail;
        if (editUserRole) editUserRole.value = currentRole;
        if (editUserStatus) editUserStatus.value = currentStatus;
        if (editUserPayRate) editUserPayRate.value = currentPayRate;
      }
      
      if (editUserId) editUserId.value = id.toString();
      if (editUserModal) editUserModal.classList.remove('hidden');
    }

    function changeRole(id: number) {
      const roleUserId = document.getElementById('roleUserId') as HTMLInputElement;
      const roleModal = document.getElementById('roleModal');
      
      if (roleUserId) roleUserId.value = id.toString();
      if (roleModal) roleModal.classList.remove('hidden');
    }

    function saveRoleChange() {
      const userId = (document.getElementById('roleUserId') as HTMLInputElement)?.value;
      const newRole = (document.getElementById('newRole') as HTMLSelectElement)?.value;
      
      fetch('/api/admin/users/role', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: parseInt(userId), role: newRole }),
      })
      .then(response => {
        if (response.ok) {
          window.location.reload();
        } else {
          alert('Error changing role');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error changing role');
      });
    }





    // Search functionality
    if (searchInput) {
      searchInput.addEventListener('input', applyFilters);
    }

    // Role filter functionality
    if (roleFilter) {
      roleFilter.addEventListener('change', applyFilters);
    }

    // Status filter functionality
    if (statusFilter) {
      statusFilter.addEventListener('change', applyFilters);
    }

    // Add event listeners for user action buttons
    document.addEventListener('DOMContentLoaded', function() {
      // Edit user buttons
      document.querySelectorAll('.edit-user-btn').forEach(button => {
        button.addEventListener('click', function(this: HTMLElement) {
          const userId = parseInt(this.getAttribute('data-user-id') || '0');
          editUser(userId);
        });
      });





      // Modal close buttons
      document.querySelectorAll('.close-edit-modal-btn').forEach(button => {
        button.addEventListener('click', function() {
          closeEditUserModal();
        });
      });

      document.querySelectorAll('.close-role-modal-btn').forEach(button => {
        button.addEventListener('click', function() {
          closeRoleModal();
        });
      });

      // Save role button
      document.querySelectorAll('.save-role-btn').forEach(button => {
        button.addEventListener('click', function() {
          saveRoleChange();
        });
      });


    });
  </script>
</AdminLayout> 