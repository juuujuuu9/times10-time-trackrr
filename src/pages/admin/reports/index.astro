---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { timeEntries, users, tasks, projects, clients } from '../../../db/schema';
import { count, sql, sum } from 'drizzle-orm';

// Get overview stats
const totalHours = await db
  .select({
    total: sql<number>`COALESCE(SUM(EXTRACT(EPOCH FROM (${timeEntries.endTime} - ${timeEntries.startTime}))/3600), 0)`,
  })
  .from(timeEntries)
  .where(sql`${timeEntries.endTime} IS NOT NULL`);

const totalUsers = await db.select({ count: count() }).from(users);
const totalProjects = await db.select({ count: count() }).from(projects);
const totalTasks = await db.select({ count: count() }).from(tasks);

// Get hours by user
const hoursByUser = await db
  .select({
    userName: users.name,
    totalHours: sql<number>`COALESCE(SUM(EXTRACT(EPOCH FROM (${timeEntries.endTime} - ${timeEntries.startTime}))/3600), 0)`,
  })
  .from(users)
  .leftJoin(timeEntries, sql`${users.id} = ${timeEntries.userId}`)
  .where(sql`${timeEntries.endTime} IS NOT NULL`)
  .groupBy(users.id, users.name)
  .orderBy(sql`totalHours DESC`);

// Get hours by project
const hoursByProject = await db
  .select({
    projectName: projects.name,
    clientName: clients.name,
    totalHours: sql<number>`COALESCE(SUM(EXTRACT(EPOCH FROM (${timeEntries.endTime} - ${timeEntries.startTime}))/3600), 0)`,
  })
  .from(projects)
  .leftJoin(clients, sql`${projects.clientId} = ${clients.id}`)
  .leftJoin(tasks, sql`${projects.id} = ${tasks.projectId}`)
  .leftJoin(timeEntries, sql`${tasks.id} = ${timeEntries.taskId}`)
  .where(sql`${timeEntries.endTime} IS NOT NULL`)
  .groupBy(projects.id, projects.name, clients.name)
  .orderBy(sql`totalHours DESC`);

// Get hours by task
const hoursByTask = await db
  .select({
    taskName: tasks.name,
    projectName: projects.name,
    clientName: clients.name,
    totalHours: sql<number>`COALESCE(SUM(EXTRACT(EPOCH FROM (${timeEntries.endTime} - ${timeEntries.startTime}))/3600), 0)`,
  })
  .from(tasks)
  .leftJoin(projects, sql`${tasks.projectId} = ${projects.id}`)
  .leftJoin(clients, sql`${projects.clientId} = ${clients.id}`)
  .leftJoin(timeEntries, sql`${tasks.id} = ${timeEntries.taskId}`)
  .where(sql`${timeEntries.endTime} IS NOT NULL`)
  .groupBy(tasks.id, tasks.name, projects.name, clients.name)
  .orderBy(sql`totalHours DESC`);

// Get recent time entries for trends
const recentEntries = await db
  .select({
    date: sql<string>`DATE(${timeEntries.startTime})`,
    hours: sql<number>`COALESCE(SUM(EXTRACT(EPOCH FROM (${timeEntries.endTime} - ${timeEntries.startTime}))/3600), 0)`,
  })
  .from(timeEntries)
  .where(sql`${timeEntries.endTime} IS NOT NULL AND ${timeEntries.startTime} >= NOW() - INTERVAL '30 days'`)
  .groupBy(sql`DATE(${timeEntries.startTime})`)
  .orderBy(sql`DATE(${timeEntries.startTime})`);
---

<AdminLayout title="Reports" currentPage="reports">
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Reports & Analytics</h1>
        <p class="text-gray-600">Comprehensive insights into your time tracking data</p>
      </div>
      <div class="flex space-x-3">
        <button
          id="exportPdfBtn"
          class="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
        >
          Export PDF
        </button>
        <button
          id="exportCsvBtn"
          class="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
        >
          Export CSV
        </button>
      </div>
    </div>

    <!-- Overview Stats -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      <div class="bg-white rounded-lg shadow p-6">
        <div class="flex items-center">
          <div class="p-2 bg-blue-100 rounded-lg">
            <span class="text-2xl">‚è±Ô∏è</span>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-600">Total Hours</p>
            <p class="text-2xl font-bold text-gray-900">
              {totalHours[0]?.total ? Math.round(totalHours[0].total * 10) / 10 : 0}
            </p>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow p-6">
        <div class="flex items-center">
          <div class="p-2 bg-green-100 rounded-lg">
            <span class="text-2xl">üë§</span>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-600">Active Users</p>
            <p class="text-2xl font-bold text-gray-900">{totalUsers[0]?.count || 0}</p>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow p-6">
        <div class="flex items-center">
          <div class="p-2 bg-purple-100 rounded-lg">
            <span class="text-2xl">üìÅ</span>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-600">Total Projects</p>
            <p class="text-2xl font-bold text-gray-900">{totalProjects[0]?.count || 0}</p>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow p-6">
        <div class="flex items-center">
          <div class="p-2 bg-yellow-100 rounded-lg">
            <span class="text-2xl">‚úÖ</span>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-600">Total Tasks</p>
            <p class="text-2xl font-bold text-gray-900">{totalTasks[0]?.count || 0}</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Charts and Data -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <!-- Hours by User -->
      <div class="bg-white rounded-lg shadow">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-medium text-gray-900">Hours by User</h3>
        </div>
        <div class="p-6">
          <div class="space-y-4">
            {hoursByUser.slice(0, 10).map((user) => (
              <div class="flex items-center justify-between">
                <div class="flex items-center">
                  <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center mr-3">
                    <span class="text-sm font-medium text-gray-700">
                      {user.userName.split(' ').map(n => n[0]).join('').toUpperCase()}
                    </span>
                  </div>
                  <span class="text-sm font-medium text-gray-900">{user.userName}</span>
                </div>
                <div class="flex items-center">
                  <div class="w-32 bg-gray-200 rounded-full h-2 mr-3">
                    <div 
                      class="bg-blue-600 h-2 rounded-full" 
                      style={`width: ${Math.min((user.totalHours / (hoursByUser[0]?.totalHours || 1)) * 100, 100)}%`}
                    ></div>
                  </div>
                  <span class="text-sm text-gray-600">{Math.round(user.totalHours * 10) / 10}h</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <!-- Hours by Project -->
      <div class="bg-white rounded-lg shadow">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-medium text-gray-900">Hours by Project</h3>
        </div>
        <div class="p-6">
          <div class="space-y-4">
            {hoursByProject.slice(0, 10).map((project) => (
              <div class="flex items-center justify-between">
                <div class="flex-1 min-w-0">
                  <p class="text-sm font-medium text-gray-900 truncate">{project.projectName}</p>
                  <p class="text-xs text-gray-500">{project.clientName}</p>
                </div>
                <div class="flex items-center ml-4">
                  <div class="w-24 bg-gray-200 rounded-full h-2 mr-3">
                    <div 
                      class="bg-green-600 h-2 rounded-full" 
                      style={`width: ${Math.min((project.totalHours / (hoursByProject[0]?.totalHours || 1)) * 100, 100)}%`}
                    ></div>
                  </div>
                  <span class="text-sm text-gray-600">{Math.round(project.totalHours * 10) / 10}h</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>

    <!-- Top Tasks -->
    <div class="bg-white rounded-lg shadow">
      <div class="px-6 py-4 border-b border-gray-200">
        <h3 class="text-lg font-medium text-gray-900">Top Tasks by Hours</h3>
      </div>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Task
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Project
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Client
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Hours
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {hoursByTask.slice(0, 10).map((task) => (
              <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  {task.taskName}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {task.projectName}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {task.clientName}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {Math.round(task.totalHours * 10) / 10} hours
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>

    <!-- Time Trends Chart -->
    <div class="bg-white rounded-lg shadow">
      <div class="px-6 py-4 border-b border-gray-200">
        <h3 class="text-lg font-medium text-gray-900">Daily Hours (Last 30 Days)</h3>
      </div>
      <div class="p-6">
        <div class="h-64 flex items-end space-x-2">
          {recentEntries.map((entry) => {
            const maxHours = Math.max(...recentEntries.map(e => e.hours));
            const height = maxHours > 0 ? (entry.hours / maxHours) * 100 : 0;
            return (
              <div class="flex-1 flex flex-col items-center">
                <div 
                  class="w-full bg-blue-600 rounded-t"
                  style={`height: ${height}%`}
                ></div>
                <div class="text-xs text-gray-500 mt-2 transform -rotate-45 origin-left">
                  {new Date(entry.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg shadow p-6">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Report Filters</h3>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label for="dateRange" class="block text-sm font-medium text-gray-700 mb-1">Date Range</label>
          <select
            id="dateRange"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="30">Last 30 Days</option>
            <option value="90">Last 90 Days</option>
            <option value="180">Last 6 Months</option>
            <option value="365">Last Year</option>
          </select>
        </div>
        <div>
          <label for="userFilter" class="block text-sm font-medium text-gray-700 mb-1">User</label>
          <select
            id="userFilter"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">All Users</option>
            {hoursByUser.map((user) => (
              <option value={user.userName}>{user.userName}</option>
            ))}
          </select>
        </div>
        <div>
          <label for="projectFilter" class="block text-sm font-medium text-gray-700 mb-1">Project</label>
          <select
            id="projectFilter"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">All Projects</option>
            {hoursByProject.map((project) => (
              <option value={project.projectName}>{project.clientName} - {project.projectName}</option>
            ))}
          </select>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Reports JavaScript
    const exportCsvBtn = document.getElementById('exportCsvBtn');
    const exportPdfBtn = document.getElementById('exportPdfBtn');
    const dateRange = document.getElementById('dateRange');
    const userFilter = document.getElementById('userFilter');
    const projectFilter = document.getElementById('projectFilter');

    if (exportCsvBtn) {
      exportCsvBtn.addEventListener('click', () => {
        // Export all report data as CSV
        let csv = 'Report Type,Name,Hours\n';
        
        // Add user data
        csv += 'Users\n';
        const userRows = document.querySelectorAll('.bg-white.rounded-lg.shadow .space-y-4 .flex.items-center.justify-between');
        userRows.forEach(row => {
          const name = row.querySelector('span')?.textContent?.trim() || '';
          const hours = row.querySelector('.text-sm.text-gray-600')?.textContent?.trim() || '';
          if (name && hours) {
            csv += `User,${name},${hours}\n`;
          }
        });
        
        // Add project data
        csv += '\nProjects\n';
        const projectRows = document.querySelectorAll('.bg-white.rounded-lg.shadow:nth-child(2) .space-y-4 .flex.items-center.justify-between');
        projectRows.forEach(row => {
          const name = row.querySelector('p')?.textContent?.trim() || '';
          const hours = row.querySelector('.text-sm.text-gray-600')?.textContent?.trim() || '';
          if (name && hours) {
            csv += `Project,${name},${hours}\n`;
          }
        });
        
        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'time-tracking-report.csv';
        a.click();
        window.URL.revokeObjectURL(url);
      });
    }

    if (exportPdfBtn) {
      exportPdfBtn.addEventListener('click', () => {
        // For now, just show a message
        // In a real app, you'd use a PDF library like jsPDF
        alert('PDF export functionality would be implemented here. For now, use the CSV export.');
      });
    }

    // Filter functionality
    if (dateRange) {
      dateRange.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        const days = parseInt(target.value);
        console.log(`Filtering for last ${days} days`);
        // In a real app, you'd make an API call to get filtered data
      });
    }

    if (userFilter) {
      userFilter.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        const selectedUser = target.value;
        console.log(`Filtering for user: ${selectedUser}`);
        // In a real app, you'd make an API call to get filtered data
      });
    }

    if (projectFilter) {
      projectFilter.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        const selectedProject = target.value;
        console.log(`Filtering for project: ${selectedProject}`);
        // In a real app, you'd make an API call to get filtered data
      });
    }
  </script>
</AdminLayout> 