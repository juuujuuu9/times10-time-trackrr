---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { timeEntries, users, tasks, projects, clients } from '../../../db/schema';
import { count, sql, sum, gte, lte, and, eq } from 'drizzle-orm';
import { getProjectCosts, getClientCosts } from '../../../db/queries';
import { ReportsCharts } from '../../../components/ReportsCharts';
import { DashboardWidgets } from '../../../components/DashboardWidgets';

// Get the selected time period from query params, default to 'last7' (more likely to have data)
const period = Astro.url.searchParams.get('period') || 'last7';
// Get the selected view type from query params, default to 'project'
const viewTypeParam = Astro.url.searchParams.get('view') || 'project';
const viewType = (viewTypeParam === 'client' || viewTypeParam === 'project') ? viewTypeParam : 'project';
// Get the selected team member from query params, default to 'all'
const selectedTeamMember = Astro.url.searchParams.get('teamMember') || 'all';
// Get the selected project from query params
const selectedProject = Astro.url.searchParams.get('project');
// Get the selected client from query params
const selectedClient = Astro.url.searchParams.get('client');
// Get custom date range from query params
const customStartDate = Astro.url.searchParams.get('startDate');
const customEndDate = Astro.url.searchParams.get('endDate');

// Calculate date ranges based on selected period
const now = new Date();
let startDate: Date | null = null;
let endDate: Date | null = null;

switch (period) {
  case 'last7':
    // Last 7 days
    startDate = new Date(now);
    startDate.setDate(now.getDate() - 7);
    startDate.setHours(0, 0, 0, 0);
    endDate = new Date(now);
    endDate.setHours(23, 59, 59, 999);
    break;
  case 'last14':
    // Last 14 days
    startDate = new Date(now);
    startDate.setDate(now.getDate() - 14);
    startDate.setHours(0, 0, 0, 0);
    endDate = new Date(now);
    endDate.setHours(23, 59, 59, 999);
    break;
  case 'last30':
    // Last 30 days
    startDate = new Date(now);
    startDate.setDate(now.getDate() - 30);
    startDate.setHours(0, 0, 0, 0);
    endDate = new Date(now);
    endDate.setHours(23, 59, 59, 999);
    break;
  case 'week':
    // This week (Sunday to Saturday)
    const dayOfWeek = now.getDay();
    const daysToSubtract = dayOfWeek === 0 ? 0 : dayOfWeek;
    startDate = new Date(now);
    startDate.setDate(now.getDate() - daysToSubtract);
    startDate.setHours(0, 0, 0, 0);
    endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 6);
    endDate.setHours(23, 59, 59, 999);
    break;
  case 'month':
    // This month
    startDate = new Date(now.getFullYear(), now.getMonth(), 1);
    endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);
    break;
  case 'year':
    // Year to date
    startDate = new Date(now.getFullYear(), 0, 1);
    endDate = new Date(now.getFullYear(), 11, 31, 23, 59, 59, 999);
    break;
  case 'custom':
    // Custom period - use provided dates or default to last 30 days
    if (customStartDate && customEndDate) {
      startDate = new Date(customStartDate);
      startDate.setHours(0, 0, 0, 0);
      endDate = new Date(customEndDate);
      endDate.setHours(23, 59, 59, 999);
    } else {
      // Default to last 30 days if no custom dates provided
      startDate = new Date(now);
      startDate.setDate(now.getDate() - 30);
      startDate.setHours(0, 0, 0, 0);
      endDate = new Date(now);
      endDate.setHours(23, 59, 59, 999);
    }
    break;
  default:
    // Default to last 7 days if invalid period
    startDate = new Date(now);
    startDate.setDate(now.getDate() - 7);
    startDate.setHours(0, 0, 0, 0);
    endDate = new Date(now);
    endDate.setHours(23, 59, 59, 999);
}

// Build filter conditions - include both startTime-based entries and manual entries based on createdAt
let filterConditions = [
  sql`(
    (${timeEntries.startTime} IS NOT NULL AND ${timeEntries.startTime} >= ${startDate} AND ${timeEntries.startTime} <= ${endDate})
    OR 
    (${timeEntries.startTime} IS NULL AND ${timeEntries.durationManual} IS NOT NULL AND ${timeEntries.createdAt} >= ${startDate} AND ${timeEntries.createdAt} <= ${endDate})
  )`
];

// Add team member filter if a specific member is selected
if (selectedTeamMember !== 'all') {
  filterConditions.push(eq(timeEntries.userId, parseInt(selectedTeamMember)));
}

// Add project filter if a specific project is selected
if (selectedProject) {
  filterConditions.push(eq(projects.id, parseInt(selectedProject)));
}

// Add client filter if a specific client is selected
if (selectedClient) {
  filterConditions.push(eq(clients.id, parseInt(selectedClient)));
}

const dateFilter = and(...filterConditions);

// Get all team members for the dropdown (sorted by first name)
const allTeamMembers = await db
  .select({
    id: users.id,
    name: users.name,
    email: users.email
  })
  .from(users)
  .orderBy(users.name);

// Get basic stats
const totalUsers = await db.select({ count: count() }).from(users);
const totalProjects = await db.select({ count: count() }).from(projects);
const totalTasks = await db.select({ count: count() }).from(tasks);

// Get total hours from time entries (with date filter)
let totalHoursResult;
if (selectedProject || selectedClient) {
  totalHoursResult = await db
    .select({
      totalSeconds: sql<number>`COALESCE(SUM(
        CASE 
          WHEN ${timeEntries.endTime} IS NOT NULL 
          THEN EXTRACT(EPOCH FROM (${timeEntries.endTime} - ${timeEntries.startTime}))
          ELSE COALESCE(${timeEntries.durationManual}, 0)
        END
      ), 0)`.as('total_seconds')
    })
    .from(timeEntries)
    .innerJoin(tasks, eq(timeEntries.taskId, tasks.id))
    .innerJoin(projects, eq(tasks.projectId, projects.id))
    .innerJoin(clients, eq(projects.clientId, clients.id))
    .where(dateFilter);
} else {
  totalHoursResult = await db
    .select({
      totalSeconds: sql<number>`COALESCE(SUM(
        CASE 
          WHEN ${timeEntries.endTime} IS NOT NULL 
          THEN EXTRACT(EPOCH FROM (${timeEntries.endTime} - ${timeEntries.startTime}))
          ELSE COALESCE(${timeEntries.durationManual}, 0)
        END
      ), 0)`.as('total_seconds')
    })
    .from(timeEntries)
    .where(dateFilter);
}

// Get total cost from time entries (with date filter)
let totalCostResult;
if (selectedProject || selectedClient) {
  totalCostResult = await db
    .select({
      totalCost: sql<number>`COALESCE(SUM(
        CASE 
          WHEN ${timeEntries.endTime} IS NOT NULL 
          THEN EXTRACT(EPOCH FROM (${timeEntries.endTime} - ${timeEntries.startTime})) / 3600 * COALESCE(${users.payRate}, 0)
          ELSE COALESCE(${timeEntries.durationManual}, 0) / 3600 * COALESCE(${users.payRate}, 0)
        END
      ), 0)`.as('total_cost')
    })
    .from(timeEntries)
    .innerJoin(users, sql`${timeEntries.userId} = ${users.id}`)
    .innerJoin(tasks, eq(timeEntries.taskId, tasks.id))
    .innerJoin(projects, eq(tasks.projectId, projects.id))
    .innerJoin(clients, eq(projects.clientId, clients.id))
    .where(dateFilter);
} else {
  totalCostResult = await db
    .select({
      totalCost: sql<number>`COALESCE(SUM(
        CASE 
          WHEN ${timeEntries.endTime} IS NOT NULL 
          THEN EXTRACT(EPOCH FROM (${timeEntries.endTime} - ${timeEntries.startTime})) / 3600 * COALESCE(${users.payRate}, 0)
          ELSE COALESCE(${timeEntries.durationManual}, 0) / 3600 * COALESCE(${users.payRate}, 0)
        END
      ), 0)`.as('total_cost')
    })
    .from(timeEntries)
    .innerJoin(users, sql`${timeEntries.userId} = ${users.id}`)
    .where(dateFilter);
}

// Get active team members (users with time entries, with date filter)
let activeTeamMembersResult;
if (selectedProject || selectedClient) {
  activeTeamMembersResult = await db
    .select({
      count: count(sql`DISTINCT ${timeEntries.userId}`)
    })
    .from(timeEntries)
    .innerJoin(tasks, eq(timeEntries.taskId, tasks.id))
    .innerJoin(projects, eq(tasks.projectId, projects.id))
    .innerJoin(clients, eq(projects.clientId, clients.id))
    .where(dateFilter);
} else {
  activeTeamMembersResult = await db
    .select({
      count: count(sql`DISTINCT ${timeEntries.userId}`)
    })
    .from(timeEntries)
    .where(dateFilter);
}

// Get data based on project/client selection
const teamMemberId = selectedTeamMember !== 'all' ? parseInt(selectedTeamMember) : undefined;
let projectCosts: Array<{
  projectId: number;
  clientId: number;
  projectName: string;
  clientName: string;
  totalCost: number;
  totalHours: number;
}> = [];
let clientCosts: Array<{
  clientId: number;
  clientName: string;
  totalCost: number;
  totalHours: number;
  projectCount: number;
}> = [];

try {
  if (selectedProject) {
    // If a specific project is selected, only show project data
    projectCosts = await getProjectCosts(startDate, endDate, teamMemberId);
    // Filter to only show the selected project
    projectCosts = projectCosts.filter(project => project.projectId === parseInt(selectedProject));
    clientCosts = []; // No client costs when specific project is selected
  } else if (selectedClient) {
    // If a specific client is selected, show all projects for that client
    projectCosts = await getProjectCosts(startDate, endDate, teamMemberId);
    // Filter to only show projects for the selected client
    projectCosts = projectCosts.filter(project => project.clientId === parseInt(selectedClient));
    clientCosts = []; // No client costs when specific client is selected
  } else {
    // If no project or client is selected, show data based on view type
    if (viewType === 'client') {
      // Show only client costs
      projectCosts = [];
      clientCosts = await getClientCosts(startDate, endDate, teamMemberId);
    } else if (viewType === 'project') {
      // Show only project costs
      projectCosts = await getProjectCosts(startDate, endDate, teamMemberId);
      clientCosts = [];
    } else {
      // Default: show both project and client data
      projectCosts = await getProjectCosts(startDate, endDate, teamMemberId);
      clientCosts = await getClientCosts(startDate, endDate, teamMemberId);
    }
  }
} catch (error) {
  console.error('Error fetching project/client data:', error);
  // Set empty arrays as fallback
  projectCosts = [];
  clientCosts = [];
}

// Format the data for display
const totalHours = totalHoursResult[0]?.totalSeconds || 0;
const totalCost = totalCostResult[0]?.totalCost || 0;
const activeTeamMembers = activeTeamMembersResult[0]?.count || 0;

// Format duration
const formatDuration = (seconds: number) => {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  return `${hours}h ${minutes}m`;
};

const formatDurationToHours = (seconds: number) => {
  return Math.round((seconds / 3600) * 100) / 100;
};

const totalHoursFormatted = formatDuration(totalHours);
const totalHoursDecimal = formatDurationToHours(totalHours);
const totalCostFormatted = new Intl.NumberFormat('en-US', {
  style: 'currency',
  currency: 'USD'
}).format(totalCost);

// Get period display name
const getPeriodDisplayName = (period: string) => {
  switch (period) {
    case 'last7': return 'Last 7 Days';
    case 'last14': return 'Last 14 Days';
    case 'last30': return 'Last 30 Days';
    case 'week': return 'This Week';
    case 'month': return 'This Month';
    case 'year': return 'Year to Date';
    case 'custom': 
      if (customStartDate && customEndDate) {
        return `Custom Range (${new Date(customStartDate).toLocaleDateString()} - ${new Date(customEndDate).toLocaleDateString()})`;
      }
      return 'Last 30 Days';
    default: return 'Last 7 Days';
  }
};

const periodDisplayName = getPeriodDisplayName(period);

// Get time series data for charts
const timeSeriesUrl = new URL('/api/reports/time-series', Astro.url);
timeSeriesUrl.searchParams.set('period', period);
timeSeriesUrl.searchParams.set('teamMember', selectedTeamMember);
if (selectedProject) timeSeriesUrl.searchParams.set('project', selectedProject);
if (selectedClient) timeSeriesUrl.searchParams.set('client', selectedClient);
if (customStartDate) timeSeriesUrl.searchParams.set('startDate', customStartDate);
if (customEndDate) timeSeriesUrl.searchParams.set('endDate', customEndDate);

let timeSeriesData = { timeSeriesData: [] };
try {
  const timeSeriesResponse = await fetch(timeSeriesUrl.toString());
  if (timeSeriesResponse.ok) {
    timeSeriesData = await timeSeriesResponse.json();
  }
} catch (error) {
  console.error('Error fetching time series data:', error);
}
---

<AdminLayout title="Reports" currentPage="reports">
  <div class="space-y-8">
    <!-- Header with enhanced styling -->
    <div class="bg-gradient-to-r from-gray-50 to-white rounded-xl border border-gray-300 p-8 shadow-sm">
      <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center space-y-4 lg:space-y-0">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 mb-2">📊 Analytics Dashboard</h1>
          <p class="text-gray-600 text-lg">Comprehensive insights into your time tracking data</p>
        </div>
        
        <!-- Enhanced Controls -->
        <div class="flex flex-col sm:flex-row items-stretch sm:items-center space-y-3 sm:space-y-0 sm:space-x-4">
          <!-- Project Search -->
          <div class="relative">
            <div class="flex items-center space-x-2">
              <div class="relative flex-1">
                <input 
                  type="text" 
                  id="projectSearch" 
                  placeholder="🔍 Search projects & clients..." 
                  class="appearance-none bg-white border border-gray-300 text-gray-900 px-4 py-3 pr-10 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-transparent transition-all duration-200 hover:bg-gray-50 w-64"
                  oninput="handleProjectSearch(this.value)"
                  onfocus="showProjectDropdown()"
                  onblur="hideProjectDropdown()"
                />
                <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-500">
                  <svg id="dropdownArrow" class="fill-current h-5 w-5 transition-transform duration-200 cursor-pointer pointer-events-auto" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" onclick="toggleDropdown()">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
                  </svg>
                </div>
              </div>
              <!-- Clear Project Button -->
              <button 
                id="clearProjectBtn"
                onclick="clearProjectFilter()"
                class="bg-gray-200 hover:bg-gray-300 text-gray-700 px-3 py-3 rounded-lg text-sm font-medium transition-colors duration-200 hidden"
                title="Clear project filter"
              >
                ✕
              </button>
            </div>
            <!-- Project Dropdown -->
            <div id="projectDropdown" class="absolute z-50 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto hidden">
              <!-- Project options will be populated here -->
            </div>
          </div>

          <!-- Time Period Dropdown -->
          <div class="relative">
            <select 
              id="periodSelect" 
              class="appearance-none bg-white border border-gray-300 text-gray-900 px-4 py-3 pr-10 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-transparent transition-all duration-200 hover:bg-gray-50"
              onchange="handlePeriodChange(this.value)"
            >
              <option value="last7" selected={period === 'last7'}>📅 Last 7 Days</option>
              <option value="last14" selected={period === 'last14'}>📅 Last 14 Days</option>
              <option value="last30" selected={period === 'last30'}>📅 Last 30 Days</option>
              <option value="week" selected={period === 'week'}>📅 This Week</option>
              <option value="month" selected={period === 'month'}>📅 This Month</option>
              <option value="year" selected={period === 'year'}>📅 Year to Date</option>
              <option value="custom" selected={period === 'custom'}>📅 Custom Range</option>
            </select>
            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-500">
              <svg class="fill-current h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
              </svg>
            </div>
          </div>

          <!-- Custom Date Range Inputs -->
          <div id="customDateRange" class={`flex items-center space-x-2 ${period === 'custom' ? '' : 'hidden'}`}>
            <input 
              type="date" 
              id="startDate" 
              value={customStartDate || ''}
              class="bg-white border border-gray-300 text-gray-900 px-3 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-transparent text-sm transition-all duration-200 hover:bg-gray-50"
              placeholder="Start Date"
            />
            <span class="text-gray-500">to</span>
            <input 
              type="date" 
              id="endDate" 
              value={customEndDate || ''}
              class="bg-white border border-gray-300 text-gray-900 px-3 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-transparent text-sm transition-all duration-200 hover:bg-gray-50"
              placeholder="End Date"
            />
            <button 
              onclick="applyCustomRange()"
              class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-3 rounded-lg text-sm font-medium transition-colors duration-200"
            >
              Apply
            </button>
          </div>

          <!-- Team Member Dropdown -->
          <div class="relative">
            <select 
              id="teamMemberSelect" 
              class="appearance-none bg-white border border-gray-300 text-gray-900 px-4 py-3 pr-10 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-transparent transition-all duration-200 hover:bg-gray-50"
              onchange="handleTeamMemberChange(this.value)"
            >
              <option value="all" selected={selectedTeamMember === 'all'}>👥 All Team Members</option>
              {allTeamMembers.map((member) => (
                <option value={member.id} selected={selectedTeamMember === member.id.toString()}>
                  👤 {member.name}
                </option>
              ))}
            </select>
            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-500">
              <svg class="fill-current h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
              </svg>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Period Info with enhanced styling -->
    <div class="bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl border border-gray-300 p-6 shadow-sm">
      <div class="flex items-center space-x-3">
        <div class="p-2 bg-gray-200 rounded-lg">
          <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
          </svg>
        </div>
        <div>
          <p class="text-sm font-medium text-gray-700">
            <span class="font-semibold">Showing data for:</span> {periodDisplayName}
          </p>
          <p class="text-xs text-gray-500">
            {startDate.toLocaleDateString()} - {endDate.toLocaleDateString()}
          </p>
        </div>
      </div>
    </div>

    <!-- Metrics and Charts Layout -->
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
      <!-- Key Metrics Column -->
      <div class="lg:col-span-1">
        <div class="bg-white rounded-lg border border-gray-300 p-4 sticky top-6 shadow-sm">
          <div class="text-left mb-4">
            <h3 class="text-sm font-medium text-gray-700 mb-1">Key Metrics</h3>
            <p class="text-xs text-gray-500">{periodDisplayName}</p>
          </div>
          
          <div class="space-y-3">
            <!-- Total Hours -->
            <div class="text-left p-3 bg-gray-50 rounded border border-gray-200">
              <div class="text-lg font-semibold text-gray-900">{totalHours > 0 ? totalHoursFormatted : '0h 0m'}</div>
              <div class="text-xs text-gray-600">Total Hours</div>
            </div>

            <!-- Total Cost -->
            <div class="text-left p-3 bg-gray-50 rounded border border-gray-200">
              <div class="text-lg font-semibold text-gray-900">{totalCost > 0 ? totalCostFormatted : '$0.00'}</div>
              <div class="text-xs text-gray-600">Total Cost</div>
            </div>

            <!-- Average Hours per Member -->
            <div class="text-left p-3 bg-gray-50 rounded border border-gray-200">
              <div class="text-lg font-semibold text-gray-900">
                {activeTeamMembers > 0 ? Math.round((totalHours / activeTeamMembers) / 3600 * 10) / 10 : 0}h
              </div>
              <div class="text-xs text-gray-600">Avg Hours/Member</div>
            </div>

            <!-- Average Rate -->
            <div class="text-left p-3 bg-gray-50 rounded border border-gray-200">
              <div class="text-lg font-semibold text-gray-900">
                {totalHours > 0 ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(totalCost / (totalHours / 3600)) : '$0.00'}
              </div>
              <div class="text-xs text-gray-600">Avg Rate/Hour</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Charts Column -->
      <div class="lg:col-span-3">
        <div class="space-y-8">          
          <ReportsCharts 
            client:load
            projectCosts={projectCosts}
            clientCosts={clientCosts}
            timeSeriesData={timeSeriesData.timeSeriesData}
            period={periodDisplayName}
            viewType={viewType}
          />
        </div>
      </div>
    </div>
  </div>

  <script is:inline>
    // Enhanced JavaScript with better UX
    window.handlePeriodChange = function(period) {
      const customDateRange = document.getElementById('customDateRange');
      
      if (!customDateRange) return;
      
      if (period === 'custom') {
        customDateRange.classList.remove('hidden');
        // Set default dates if not already set
        const startDate = document.getElementById('startDate');
        const endDate = document.getElementById('endDate');
        
        if (startDate && !startDate.value) {
          const thirtyDaysAgo = new Date();
          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
          startDate.value = thirtyDaysAgo.toISOString().split('T')[0];
        }
        if (endDate && !endDate.value) {
          endDate.value = new Date().toISOString().split('T')[0];
        }
      } else {
        customDateRange.classList.add('hidden');
        // Navigate to the selected period
        const teamMemberSelect = document.getElementById('teamMemberSelect');
        const currentUrl = new URL(window.location);
        currentUrl.searchParams.set('period', period);
        if (teamMemberSelect) {
          currentUrl.searchParams.set('teamMember', teamMemberSelect.value);
        }
        
        // Preserve project/client selection if it exists
        const currentProject = new URLSearchParams(window.location.search).get('project');
        const currentClient = new URLSearchParams(window.location.search).get('client');
        if (currentProject) {
          currentUrl.searchParams.set('project', currentProject);
        }
        if (currentClient) {
          currentUrl.searchParams.set('client', currentClient);
        }
        
        window.location.href = currentUrl.toString();
      }
    };

    window.applyCustomRange = function() {
      const startDateEl = document.getElementById('startDate');
      const endDateEl = document.getElementById('endDate');
      const teamMemberSelect = document.getElementById('teamMemberSelect');
      
      if (!startDateEl || !endDateEl || !teamMemberSelect) return;
      
      const startDate = startDateEl.value;
      const endDate = endDateEl.value;
      
      if (!startDate || !endDate) {
        alert('Please select both start and end dates');
        return;
      }
      
      if (new Date(startDate) > new Date(endDate)) {
        alert('Start date cannot be after end date');
        return;
      }
      
      let url = `/admin/reports?period=custom&teamMember=${teamMemberSelect.value}&startDate=${startDate}&endDate=${endDate}`;
      
      // Preserve project/client selection if it exists
      const currentProject = new URLSearchParams(window.location.search).get('project');
      const currentClient = new URLSearchParams(window.location.search).get('client');
      if (currentProject) {
        url += `&project=${currentProject}`;
      }
      if (currentClient) {
        url += `&client=${currentClient}`;
      }
      
      window.location.href = url;
    };

    // Project search functionality
    let searchTimeout;
    let dropdownOpen = false;
    
    window.handleProjectSearch = function(searchTerm) {
      clearTimeout(searchTimeout);
      
      if (searchTerm.length < 2) {
        hideProjectDropdown();
        return;
      }
      
      searchTimeout = setTimeout(() => {
        searchProjects(searchTerm);
      }, 300);
    };
    
    window.toggleDropdown = function() {
      const searchInput = document.getElementById('projectSearch');
      if (!searchInput) return;
      
      if (dropdownOpen) {
        hideProjectDropdown();
      } else {
        // Show all projects and clients
        searchAllProjects();
        showProjectDropdown();
      }
    };
    
    window.searchProjects = async function(searchTerm) {
      try {
        const response = await fetch(`/api/admin/reports/search-projects?q=${encodeURIComponent(searchTerm)}&limit=10`);
        const projects = await response.json();
        
        const dropdown = document.getElementById('projectDropdown');
        if (!dropdown) return;
        
        dropdown.innerHTML = '';
        
        if (projects.length === 0) {
          dropdown.innerHTML = '<div class="px-4 py-2 text-gray-500 text-sm">No projects found</div>';
        } else {
          projects.forEach(project => {
            const option = document.createElement('div');
            option.className = 'px-4 py-2 hover:bg-gray-100 cursor-pointer text-sm';
            if (project.type === 'project') {
              option.innerHTML = `
                <div class="font-medium text-black">${project.displayName}</div>
                <div class="text-xs text-black">${project.description}</div>
              `;
            } else {
              option.innerHTML = `
                <div class="font-medium">${project.displayName}</div>
                <div class="text-xs text-gray-500">${project.description}</div>
              `;
            }
            option.onclick = () => selectProject(project);
            dropdown.appendChild(option);
          });
        }
        
        showProjectDropdown();
      } catch (error) {
        console.error('Error searching projects:', error);
      }
    };
    
    window.searchAllProjects = async function() {
      try {
        const response = await fetch(`/api/admin/reports/search-projects?all=true&limit=20`);
        const projects = await response.json();
        
        const dropdown = document.getElementById('projectDropdown');
        if (!dropdown) return;
        
        dropdown.innerHTML = '';
        
        if (projects.length === 0) {
          dropdown.innerHTML = '<div class="px-4 py-2 text-gray-500 text-sm">No projects or clients found</div>';
        } else {
          // Add "All Clients" and "All Projects" options at the top
          const allClientsOption = projects.find(item => item.type === 'all-clients');
          const allProjectsOption = projects.find(item => item.type === 'all-projects');
          
          if (allClientsOption) {
            const option = document.createElement('div');
            option.className = 'px-4 py-2 hover:bg-gray-100 cursor-pointer text-sm font-medium border-b border-gray-200';
            option.innerHTML = `
              <div class="font-semibold">${allClientsOption.displayName}</div>
              <div class="text-xs text-gray-500">${allClientsOption.description}</div>
            `;
            option.onclick = () => selectProject(allClientsOption);
            dropdown.appendChild(option);
          }
          
          if (allProjectsOption) {
            const option = document.createElement('div');
            option.className = 'px-4 py-2 hover:bg-gray-100 cursor-pointer text-sm font-medium border-b border-gray-200';
            option.innerHTML = `
              <div class="font-semibold">${allProjectsOption.displayName}</div>
              <div class="text-xs text-gray-500">${allProjectsOption.description}</div>
            `;
            option.onclick = () => selectProject(allProjectsOption);
            dropdown.appendChild(option);
          }
          
          // Add a header for clients
          let hasClients = false;
          let hasProjects = false;
          
          projects.forEach(item => {
            if (item.type === 'client') hasClients = true;
            if (item.type === 'project') hasProjects = true;
          });
          
          if (hasClients) {
            const clientHeader = document.createElement('div');
            clientHeader.className = 'px-4 py-2 bg-gray-50 text-xs font-semibold text-gray-600 uppercase tracking-wide';
            clientHeader.textContent = 'Clients (All Projects)';
            dropdown.appendChild(clientHeader);
          }
          
          projects.forEach(item => {
            if (item.type === 'client') {
              const option = document.createElement('div');
              option.className = 'px-4 py-2 hover:bg-gray-100 cursor-pointer text-sm pl-6';
              option.innerHTML = `
                <div class="font-medium">${item.displayName}</div>
                <div class="text-xs text-gray-500">${item.description}</div>
              `;
              option.onclick = () => selectProject(item);
              dropdown.appendChild(option);
            }
          });
          
          if (hasProjects) {
            const projectHeader = document.createElement('div');
            projectHeader.className = 'px-4 py-2 bg-gray-50 text-xs font-semibold text-gray-600 uppercase tracking-wide';
            projectHeader.textContent = 'Individual Projects';
            dropdown.appendChild(projectHeader);
          }
          
          projects.forEach(item => {
            if (item.type === 'project') {
              const option = document.createElement('div');
              option.className = 'px-4 py-2 hover:bg-gray-100 cursor-pointer text-sm pl-6';
              option.innerHTML = `
                <div class="font-medium text-black">${item.displayName}</div>
                <div class="text-xs text-black">${item.description}</div>
              `;
              option.onclick = () => selectProject(item);
              dropdown.appendChild(option);
            }
          });
        }
        
        showProjectDropdown();
      } catch (error) {
        console.error('Error fetching all projects:', error);
      }
    };
    
    window.selectProject = function(item) {
      const searchInput = document.getElementById('projectSearch');
      const clearBtn = document.getElementById('clearProjectBtn');
      
      if (searchInput) {
        // Create display name based on type
        let displayName = item.displayName;
        if (item.type === 'project') {
          displayName = `${item.displayName} - ${item.description}`;
        } else if (item.type === 'client') {
          displayName = `${item.displayName} ${item.description}`;
        }
        searchInput.value = displayName;
      }
      if (clearBtn) {
        clearBtn.classList.remove('hidden');
      }
      
      hideProjectDropdown();
      
      // Navigate to the selected project or client
      const periodSelect = document.getElementById('periodSelect');
      const teamMemberSelect = document.getElementById('teamMemberSelect');
      
      if (!periodSelect || !teamMemberSelect) return;
      
      const currentUrl = new URL(window.location);
      currentUrl.searchParams.set('period', periodSelect.value);
      currentUrl.searchParams.set('teamMember', teamMemberSelect.value);
      
      // Clear existing project/client params
      currentUrl.searchParams.delete('project');
      currentUrl.searchParams.delete('client');
      
      // Set the appropriate parameter based on type
      if (item.type === 'project') {
        currentUrl.searchParams.set('project', item.projectId.toString());
      } else if (item.type === 'client') {
        currentUrl.searchParams.set('client', item.clientId.toString());
      } else if (item.type === 'all-clients') {
        // Show client costs view
        currentUrl.searchParams.set('view', 'client');
      } else if (item.type === 'all-projects') {
        // Show all projects view
        currentUrl.searchParams.set('view', 'project');
      }
      
      // Preserve custom date range if it exists
      const startDate = document.getElementById('startDate');
      const endDate = document.getElementById('endDate');
      if (startDate && endDate && startDate.value && endDate.value) {
        currentUrl.searchParams.set('startDate', startDate.value);
        currentUrl.searchParams.set('endDate', endDate.value);
      }
      
      window.location.href = currentUrl.toString();
    };
    
    window.showProjectDropdown = function() {
      const dropdown = document.getElementById('projectDropdown');
      const arrow = document.getElementById('dropdownArrow');
      if (dropdown) {
        dropdown.classList.remove('hidden');
        dropdownOpen = true;
      }
      if (arrow) {
        arrow.style.transform = 'rotate(180deg)';
      }
    };
    
    window.hideProjectDropdown = function() {
      // Small delay to allow clicking on dropdown items
      setTimeout(() => {
        const dropdown = document.getElementById('projectDropdown');
        const arrow = document.getElementById('dropdownArrow');
        if (dropdown) {
          dropdown.classList.add('hidden');
          dropdownOpen = false;
        }
        if (arrow) {
          arrow.style.transform = 'rotate(0deg)';
        }
      }, 150);
    };
    
    window.clearProjectFilter = function() {
      const searchInput = document.getElementById('projectSearch');
      const clearBtn = document.getElementById('clearProjectBtn');
      
      if (searchInput) {
        searchInput.value = '';
      }
      if (clearBtn) {
        clearBtn.classList.add('hidden');
      }
      
      // Reset dropdown state
      dropdownOpen = false;
      
      // Navigate to remove project/client filter
      const periodSelect = document.getElementById('periodSelect');
      const teamMemberSelect = document.getElementById('teamMemberSelect');
      
      if (!periodSelect || !teamMemberSelect) return;
      
      const currentUrl = new URL(window.location);
      currentUrl.searchParams.set('period', periodSelect.value);
      currentUrl.searchParams.set('teamMember', teamMemberSelect.value);
      currentUrl.searchParams.delete('project');
      currentUrl.searchParams.delete('client');
      
      // Preserve custom date range if it exists
      const startDate = document.getElementById('startDate');
      const endDate = document.getElementById('endDate');
      if (startDate && endDate && startDate.value && endDate.value) {
        currentUrl.searchParams.set('startDate', startDate.value);
        currentUrl.searchParams.set('endDate', endDate.value);
      }
      
      window.location.href = currentUrl.toString();
    };

    window.handleTeamMemberChange = function(teamMember) {
      const periodSelect = document.getElementById('periodSelect');
      
      if (!periodSelect) return;
      
      const currentUrl = new URL(window.location);
      currentUrl.searchParams.set('period', periodSelect.value);
      currentUrl.searchParams.set('teamMember', teamMember);
      
      // Preserve project/client selection if it exists
      const currentProject = new URLSearchParams(window.location.search).get('project');
      const currentClient = new URLSearchParams(window.location.search).get('client');
      if (currentProject) {
        currentUrl.searchParams.set('project', currentProject);
      }
      if (currentClient) {
        currentUrl.searchParams.set('client', currentClient);
      }
      
      // Preserve custom date range if it exists
      const startDate = document.getElementById('startDate');
      const endDate = document.getElementById('endDate');
      if (startDate && endDate && startDate.value && endDate.value) {
        currentUrl.searchParams.set('startDate', startDate.value);
        currentUrl.searchParams.set('endDate', endDate.value);
      }
      
      window.location.href = currentUrl.toString();
    };

    // Initialize custom date range visibility on page load
    document.addEventListener('DOMContentLoaded', function() {
      const periodSelect = document.getElementById('periodSelect');
      const customDateRange = document.getElementById('customDateRange');
      
      if (periodSelect && customDateRange && periodSelect.value === 'custom') {
        customDateRange.classList.remove('hidden');
      }
      
      // Initialize project/client search with current selection
      const currentProject = new URLSearchParams(window.location.search).get('project');
      const currentClient = new URLSearchParams(window.location.search).get('client');
      
      if (currentProject || currentClient) {
        // Fetch the project/client details to display the name
        fetch(`/api/admin/reports/search-projects?q=&limit=50`)
          .then(response => response.json())
          .then(items => {
            let selectedItem = null;
            
            if (currentProject) {
              selectedItem = items.find(item => item.type === 'project' && item.projectId.toString() === currentProject);
            } else if (currentClient) {
              selectedItem = items.find(item => item.type === 'client' && item.clientId.toString() === currentClient);
            }
            
            if (selectedItem) {
              const searchInput = document.getElementById('projectSearch');
              const clearBtn = document.getElementById('clearProjectBtn');
              if (searchInput) {
                // Create display name based on type
                let displayName = selectedItem.displayName;
                if (selectedItem.type === 'project') {
                  displayName = `${selectedItem.displayName} - ${selectedItem.description}`;
                } else if (selectedItem.type === 'client') {
                  displayName = `${selectedItem.displayName} ${selectedItem.description}`;
                }
                searchInput.value = displayName;
              }
              if (clearBtn) {
                clearBtn.classList.remove('hidden');
              }
            }
          })
          .catch(error => console.error('Error fetching project/client details:', error));
      }
    });
  </script>
</AdminLayout> 