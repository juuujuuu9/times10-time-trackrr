---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { timeEntries, users, tasks, projects, clients } from '../../../db/schema';
import { count, sql, sum } from 'drizzle-orm';
import HoursBarChart from '../../../components/charts/HoursBarChart';
import CostBarChart from '../../../components/charts/CostBarChart';
import TeamMemberBarChart from '../../../components/charts/TeamMemberBarChart';
import TimeTrendChart from '../../../components/charts/TimeTrendChart';

// Get filter data
const allClients = await db.select().from(clients).orderBy(clients.name);
const allUsers = await db.select().from(users).orderBy(users.name);

// Get overview stats
const totalUsers = await db.select({ count: count() }).from(users);
const totalProjects = await db.select({ count: count() }).from(projects);
const totalTasks = await db.select({ count: count() }).from(tasks);

// Initialize empty data arrays - will be populated by API calls
let hoursByProject: any[] = [];
let costByProject: any[] = [];
let userWorkloadData: any[] = [];
let timeTrendData: any[] = [];
let totalHours = 0;
let totalCost = 0;


---

<AdminLayout title="Reports" currentPage="reports">
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-white">Reports & Analytics</h1>
        <p class="text-gray-300">Comprehensive insights into your time tracking data</p>
      </div>
      <div class="flex space-x-3">
        <button
          id="exportPdfBtn"
          class="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
        >
          Export PDF
        </button>
        <button
          id="exportCsvBtn"
          class="bg-[#10B981] hover:bg-[#059669] text-white font-medium py-2 px-4 rounded-lg transition-colors"
        >
          Export CSV
        </button>
      </div>
    </div>

    <!-- Filters -->
    <div class="bg-gray-800 rounded-lg shadow border border-gray-700 p-6">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div>
          <label for="search" class="block text-sm font-medium text-gray-300 mb-1">Search</label>
          <input
            type="text"
            id="search"
            placeholder="Search projects or team members..."
            class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
          />
        </div>
        <div>
          <label for="clientFilter" class="block text-sm font-medium text-gray-300 mb-1">Client</label>
          <select
            id="clientFilter"
            class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
          >
            <option value="">All Clients</option>
            {allClients.map((client) => (
              <option value={client.name}>{client.name}</option>
            ))}
          </select>
        </div>
        <div>
          <label for="userFilter" class="block text-sm font-medium text-gray-300 mb-1">Team Member</label>
          <select
            id="userFilter"
            class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
          >
            <option value="">All Team Members</option>
            {allUsers.map((user) => (
              <option value={user.name}>{user.name}</option>
            ))}
          </select>
        </div>
        <div>
          <label for="dateRange" class="block text-sm font-medium text-gray-300 mb-1">Date Range</label>
          <select
            id="dateRange"
            class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
          >
            <option value="">All Time</option>
            <option value="today">Today</option>
            <option value="week" selected>This Week</option>
            <option value="month">This Month</option>
            <option value="quarter">This Quarter</option>
            <option value="custom">Custom Range</option>
          </select>
        </div>
      </div>
      <div id="customDateRange" class="hidden mt-4">
        <label class="block text-sm font-medium text-gray-300 mb-1">Custom Date Range</label>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div class="flex flex-col">
            <label for="startDate" class="block text-xs text-gray-400 mb-1">Start Date</label>
            <input
              type="date"
              id="startDate"
              class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white text-sm"
            />
          </div>
          <div>
            <label for="endDate" class="block text-xs text-gray-400 mb-1">End Date</label>
            <input
              type="date"
              id="endDate"
              class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white text-sm"
            />
          </div>
        </div>
      </div>
    </div>

    <!-- Results Counter -->
    <div class="bg-gray-700 rounded-lg px-6 py-3">
      <div class="flex justify-between items-center">
        <span id="resultsCounter" class="text-sm text-gray-300">
          Showing data for this week
        </span>
        <span class="text-xs text-gray-400" id="totalHoursCounter">
          Total hours: 0
        </span>
      </div>
    </div>

    <!-- Overview Stats -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      <div class="bg-gray-800 rounded-lg shadow border border-gray-700 p-6">
        <div class="flex items-center">
          <div class="p-2 bg-[#4F46E5] rounded-lg">
            <span class="text-2xl text-white">‚è±Ô∏è</span>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-400">Total Hours</p>
            <p class="text-2xl font-bold text-white" id="totalHoursDisplay">
              0
            </p>
          </div>
        </div>
      </div>

      <div class="bg-gray-800 rounded-lg shadow border border-gray-700 p-6">
        <div class="flex items-center">
          <div class="p-2 bg-[#10B981] rounded-lg">
            <span class="text-2xl text-white">üí∞</span>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-400">Total Cost</p>
            <p class="text-2xl font-bold text-white" id="totalCostDisplay">
              $0.00
            </p>
          </div>
        </div>
      </div>

      <div class="bg-gray-800 rounded-lg shadow border border-gray-700 p-6">
        <div class="flex items-center">
          <div class="p-2 bg-[#EC4899] rounded-lg">
            <span class="text-2xl text-white">üìÅ</span>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-400">Total Projects</p>
            <p class="text-2xl font-bold text-white">{totalProjects[0]?.count || 0}</p>
          </div>
        </div>
      </div>

      <div class="bg-gray-800 rounded-lg shadow border border-gray-700 p-6">
        <div class="flex items-center">
          <div class="p-2 bg-[#F59E0B] rounded-lg">
            <span class="text-2xl text-white">üë§</span>
          </div>
          <div class="ml-4">
            <p class="text-sm font-medium text-gray-400">Active Team Members</p>
            <p class="text-2xl font-bold text-white">{totalUsers[0]?.count || 0}</p>
          </div>
        </div>
      </div>
    </div>

    <!-- View Toggle -->
    <div class="bg-gray-800 rounded-lg shadow border border-gray-700 p-4">
      <div class="flex space-x-2">
        <button
          id="hoursViewBtn"
          class="px-4 py-2 rounded-lg font-medium transition-colors bg-[#4F46E5] text-white"
        >
          Hours by Project
        </button>
        <button
          id="costViewBtn"
          class="px-4 py-2 rounded-lg font-medium transition-colors bg-gray-700 text-gray-300 hover:bg-gray-600"
        >
          Cost by Project
        </button>
        <button
          id="teamViewBtn"
          class="px-4 py-2 rounded-lg font-medium transition-colors bg-gray-700 text-gray-300 hover:bg-gray-600"
        >
          Hours by Team Member
        </button>
      </div>
    </div>

    <!-- Hours View -->
    <div id="hoursView" class="space-y-6">
      <!-- Hours Chart -->
      <div class="bg-gray-800 rounded-lg shadow border border-gray-700">
        <div class="px-6 py-4 border-b border-gray-700">
          <h3 class="text-lg font-medium text-white">Total Hours by Project</h3>
          <p class="text-sm text-gray-400">Visual representation of hours worked on each project</p>
        </div>
        <div class="p-6 h-80" id="hoursChartContainer">
          <div class="text-center py-8">
            <p class="text-gray-400">Loading chart data...</p>
          </div>
        </div>
      </div>

      <!-- Hours Table -->
      <div class="bg-gray-800 rounded-lg shadow border border-gray-700">
        <div class="px-6 py-4 border-b border-gray-700">
          <h3 class="text-lg font-medium text-white">Hours by Project - Detailed</h3>
        </div>
        <div class="overflow-x-auto" id="hoursTableContainer">
          <div class="text-center py-8">
            <p class="text-gray-400">Loading table data...</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Cost View -->
    <div id="costView" class="space-y-6 hidden">
      <!-- Cost Chart -->
      <div class="bg-gray-800 rounded-lg shadow border border-gray-700">
        <div class="px-6 py-4 border-b border-gray-700">
          <h3 class="text-lg font-medium text-white">Total Cost by Project</h3>
          <p class="text-sm text-gray-400">Visual representation of cost for each project</p>
        </div>
        <div class="p-6 h-80" id="costChartContainer">
          <div class="text-center py-8">
            <p class="text-gray-400">Loading chart data...</p>
          </div>
        </div>
      </div>

      <!-- Cost Table -->
      <div class="bg-gray-800 rounded-lg shadow border border-gray-700">
        <div class="px-6 py-4 border-b border-gray-700">
          <h3 class="text-lg font-medium text-white">Cost by Project - Detailed</h3>
        </div>
        <div class="overflow-x-auto" id="costTableContainer">
          <div class="text-center py-8">
            <p class="text-gray-400">Loading table data...</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Team Member Hours View -->
    <div id="teamView" class="space-y-6 hidden">
      <!-- Team Member Hours Chart -->
      <div class="bg-gray-800 rounded-lg shadow border border-gray-700">
        <div class="px-6 py-4 border-b border-gray-700">
          <h3 class="text-lg font-medium text-white">Total Hours by Team Member</h3>
          <p class="text-sm text-gray-400">Hours worked by each team member across all projects</p>
        </div>
        <div class="p-6 h-80" id="teamChartContainer">
          <div class="text-center py-8">
            <p class="text-gray-400">Loading chart data...</p>
          </div>
        </div>
      </div>

      <!-- Team Member Hours Table -->
      <div class="bg-gray-800 rounded-lg shadow border border-gray-700">
        <div class="px-6 py-4 border-b border-gray-700">
          <h3 class="text-lg font-medium text-white">Team Member Hours - Detailed</h3>
        </div>
        <div class="overflow-x-auto" id="teamTableContainer">
          <div class="text-center py-8">
            <p class="text-gray-400">Loading table data...</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Additional Charts Section -->
    <div id="additionalCharts" class="space-y-6">
      <!-- Time Trends Chart -->
      <div class="bg-gray-800 rounded-lg shadow border border-gray-700">
        <div class="px-6 py-4 border-b border-gray-700">
          <h3 class="text-lg font-medium text-white">Time Tracking Trends (Last 7 Days)</h3>
          <p class="text-sm text-gray-400">Daily hours and cost trends over the past week</p>
        </div>
        <div class="p-6 h-80" id="trendChartContainer">
          <div class="text-center py-8">
            <p class="text-gray-400">Loading trend data...</p>
          </div>
        </div>
      </div>

      <!-- Pie Chart Section -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Hours Distribution Pie Chart -->
        <div class="bg-gray-800 rounded-lg shadow border border-gray-700">
          <div class="px-6 py-4 border-b border-gray-700">
            <h3 class="text-lg font-medium text-white">Hours Distribution</h3>
            <p class="text-sm text-gray-400">Percentage breakdown of hours by project</p>
          </div>
          <div class="p-6 h-80" id="hoursPieChartContainer">
            <div class="text-center py-8">
              <p class="text-gray-400">Loading pie chart data...</p>
            </div>
          </div>
        </div>

        <!-- Cost Distribution Pie Chart -->
        <div class="bg-gray-800 rounded-lg shadow border border-gray-700">
          <div class="px-6 py-4 border-b border-gray-700">
            <h3 class="text-lg font-medium text-white">Cost Distribution</h3>
            <p class="text-sm text-gray-400">Percentage breakdown of costs by project</p>
          </div>
          <div class="p-6 h-80" id="costPieChartContainer">
            <div class="text-center py-8">
              <p class="text-gray-400">Loading pie chart data...</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Team Workload Chart -->
      <div class="bg-gray-800 rounded-lg shadow border border-gray-700">
        <div class="px-6 py-4 border-b border-gray-700">
          <h3 class="text-lg font-medium text-white">Team Workload Overview</h3>
          <p class="text-sm text-gray-400">Hours worked by each team member across all projects</p>
        </div>
        <div class="p-6 h-80" id="workloadChartContainer">
          <div class="text-center py-8">
            <p class="text-gray-400">Loading workload data...</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // View toggle functionality
    const hoursViewBtn = document.getElementById('hoursViewBtn');
    const costViewBtn = document.getElementById('costViewBtn');
    const teamViewBtn = document.getElementById('teamViewBtn');
    const hoursView = document.getElementById('hoursView');
    const costView = document.getElementById('costView');
    const teamView = document.getElementById('teamView');
    const additionalCharts = document.getElementById('additionalCharts');

    let currentView = 'hours'; // 'hours', 'cost', or 'team'

    function showHoursView() {
      hoursView?.classList.remove('hidden');
      costView?.classList.add('hidden');
      teamView?.classList.add('hidden');
      additionalCharts?.classList.remove('hidden');
      
      hoursViewBtn?.classList.remove('bg-gray-700', 'text-gray-300');
      hoursViewBtn?.classList.add('bg-[#4F46E5]', 'text-white');
      costViewBtn?.classList.remove('bg-[#10B981]', 'text-white');
      costViewBtn?.classList.add('bg-gray-700', 'text-gray-300');
      teamViewBtn?.classList.remove('bg-[#EC4899]', 'text-white');
      teamViewBtn?.classList.add('bg-gray-700', 'text-gray-300');
      
      currentView = 'hours';
      loadData();
    }

    function showCostView() {
      hoursView?.classList.add('hidden');
      costView?.classList.remove('hidden');
      teamView?.classList.add('hidden');
      additionalCharts?.classList.remove('hidden');
      
      costViewBtn?.classList.remove('bg-gray-700', 'text-gray-300');
      costViewBtn?.classList.add('bg-[#10B981]', 'text-white');
      hoursViewBtn?.classList.remove('bg-[#4F46E5]', 'text-white');
      hoursViewBtn?.classList.add('bg-gray-700', 'text-gray-300');
      teamViewBtn?.classList.remove('bg-[#EC4899]', 'text-white');
      teamViewBtn?.classList.add('bg-gray-700', 'text-gray-300');
      
      currentView = 'cost';
      loadData();
    }

    function showTeamView() {
      hoursView?.classList.add('hidden');
      costView?.classList.add('hidden');
      teamView?.classList.remove('hidden');
      additionalCharts?.classList.remove('hidden');
      
      teamViewBtn?.classList.remove('bg-gray-700', 'text-gray-300');
      teamViewBtn?.classList.add('bg-[#EC4899]', 'text-white');
      hoursViewBtn?.classList.remove('bg-[#4F46E5]', 'text-white');
      hoursViewBtn?.classList.add('bg-gray-700', 'text-gray-300');
      costViewBtn?.classList.remove('bg-[#10B981]', 'text-white');
      costViewBtn?.classList.add('bg-gray-700', 'text-gray-300');
      
      currentView = 'team';
      loadData();
    }

    hoursViewBtn?.addEventListener('click', showHoursView);
    costViewBtn?.addEventListener('click', showCostView);
    teamViewBtn?.addEventListener('click', showTeamView);

    // Data loading functionality
    async function loadData() {
      console.log('loadData function called');
      const dateRangeSelect = document.getElementById('dateRange') as HTMLSelectElement;
      const startDateInput = document.getElementById('startDate') as HTMLInputElement;
      const endDateInput = document.getElementById('endDate') as HTMLInputElement;
      
      let startDate = '';
      let endDate = '';
      
      // Determine date range based on selection
      if (dateRangeSelect.value === 'custom' && startDateInput.value && endDateInput.value) {
        startDate = startDateInput.value;
        endDate = endDateInput.value;
      } else if (dateRangeSelect.value === 'today') {
        const today = new Date().toISOString().split('T')[0];
        startDate = today;
        endDate = today;
      } else if (dateRangeSelect.value === 'week') {
        // Current week (Sunday to Saturday)
        const now = new Date();
        const currentDay = now.getDay();
        const daysFromSunday = currentDay;
        const daysToSaturday = 6 - currentDay;
        
        const startOfWeek = new Date(now);
        startOfWeek.setDate(now.getDate() - daysFromSunday);
        startDate = startOfWeek.toISOString().split('T')[0];
        
        const endOfWeek = new Date(now);
        endOfWeek.setDate(now.getDate() + daysToSaturday);
        endDate = endOfWeek.toISOString().split('T')[0];
      } else if (dateRangeSelect.value === 'month') {
        const now = new Date();
        const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
        const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);
        startDate = startOfMonth.toISOString().split('T')[0];
        endDate = endOfMonth.toISOString().split('T')[0];
      } else if (dateRangeSelect.value === 'quarter') {
        const now = new Date();
        const quarter = Math.floor(now.getMonth() / 3);
        const startOfQuarter = new Date(now.getFullYear(), quarter * 3, 1);
        const endOfQuarter = new Date(now.getFullYear(), (quarter + 1) * 3, 0);
        startDate = startOfQuarter.toISOString().split('T')[0];
        endDate = endOfQuarter.toISOString().split('T')[0];
      }
      
      try {
        const params = new URLSearchParams();
        if (startDate) params.append('startDate', startDate);
        if (endDate) params.append('endDate', endDate);
        params.append('viewType', currentView);
        params.append('includeTrends', 'true');
        
        const response = await fetch(`/api/admin/reports/data?${params.toString()}`);
        const result = await response.json();
        
        if (result.success) {
          console.log('Data loaded successfully:', result.data);
          console.log('Trend data:', result.trendData);
          console.log('Workload data:', result.workloadData);
          console.log('About to call updateChartsAndTables...');
          updateChartsAndTables(result.data, result.totals, result.trendData, result.workloadData);
          console.log('updateChartsAndTables completed');
          updateResultsCounter(result.data.length);
        } else {
          console.error('Failed to load data:', result.error);
        }
      } catch (error) {
        console.error('Error loading data:', error);
      }
    }

    function updateChartsAndTables(data: any[], totals: any, trendData: any[] = [], workloadData: any[] = []) {
      console.log('updateChartsAndTables called with data length:', data.length);
      console.log('totals:', totals);
      console.log('trendData length:', trendData.length);
      console.log('workloadData length:', workloadData.length);
      
      // Update overview stats
      const totalHoursElement = document.getElementById('totalHoursDisplay');
      const totalCostElement = document.getElementById('totalCostDisplay');
      const totalHoursCounter = document.getElementById('totalHoursCounter');
      
      if (totalHoursElement) {
        totalHoursElement.textContent = String(Math.round(Number(totals.totalHours) * 10) / 10);
      }
      if (totalCostElement) {
        totalCostElement.textContent = `$${Number(totals.totalCost).toFixed(2)}`;
      }
      if (totalHoursCounter) {
        totalHoursCounter.textContent = `Total hours: ${Math.round(Number(totals.totalHours) * 10) / 10}`;
      }
      
      // Update results counter
      const resultsCounter = document.getElementById('resultsCounter');
      if (resultsCounter) {
        resultsCounter.textContent = `Showing ${data.length} ${currentView === 'hours' ? 'projects' : currentView === 'cost' ? 'projects' : 'team members'}`;
      }

      // Update charts and tables based on current view
      try {
        console.log('Current view:', currentView);
        if (currentView === 'hours') {
          console.log('Calling updateHoursView...');
          updateHoursView(data);
        } else if (currentView === 'cost') {
          console.log('Calling updateCostView...');
          updateCostView(data);
        } else if (currentView === 'team') {
          console.log('Calling updateTeamView...');
          updateTeamView(data);
        }

        // Update additional charts
        console.log('Calling updateAdditionalCharts...');
        updateAdditionalCharts(data, totals, trendData, workloadData);
        console.log('All chart updates completed');
      } catch (error) {
        console.error('Error updating charts:', error);
      }
    }

    function updateHoursView(data: any[]) {
      console.log('updateHoursView called with data length:', data.length);
      const chartContainer = document.getElementById('hoursChartContainer');
      const tableContainer = document.getElementById('hoursTableContainer');
      
      console.log('chartContainer found:', !!chartContainer);
      console.log('tableContainer found:', !!tableContainer);
      
      if (chartContainer) {
        if (data.length > 0) {
          console.log('Creating hours chart with data:', data);
          // Create chart using Chart.js directly
          chartContainer.innerHTML = '<canvas id="hoursChart" width="400" height="300"></canvas>';
          console.log('Canvas created, calling createHoursChart...');
          createHoursChart(data);
        } else {
          chartContainer.innerHTML = '<div class="text-center py-8"><p class="text-gray-400">No time entries found. Add some time entries to see project hours.</p></div>';
        }
      }
      
      if (tableContainer) {
        if (data.length > 0) {
          createHoursTable(data, tableContainer);
        } else {
          tableContainer.innerHTML = '<div class="text-center py-8"><p class="text-gray-400">No data available</p></div>';
        }
      }
    }

    function updateCostView(data: any[]) {
      const chartContainer = document.getElementById('costChartContainer');
      const tableContainer = document.getElementById('costTableContainer');
      
      if (chartContainer) {
        if (data.length > 0) {
          // Create chart using Chart.js directly
          chartContainer.innerHTML = '<canvas id="costChart" width="400" height="300"></canvas>';
          createCostChart(data);
        } else {
          chartContainer.innerHTML = '<div class="text-center py-8"><p class="text-gray-400">No cost data found. Add some time entries to see project costs.</p></div>';
        }
      }
      
      if (tableContainer) {
        if (data.length > 0) {
          createCostTable(data, tableContainer);
        } else {
          tableContainer.innerHTML = '<div class="text-center py-8"><p class="text-gray-400">No cost data available</p></div>';
        }
      }
    }

    function updateTeamView(data: any[]) {
      const chartContainer = document.getElementById('teamChartContainer');
      const tableContainer = document.getElementById('teamTableContainer');
      
      if (chartContainer) {
        if (data.length > 0) {
          // Create chart using Chart.js directly
          chartContainer.innerHTML = '<canvas id="teamChart" width="400" height="300"></canvas>';
          createTeamChart(data);
        } else {
          chartContainer.innerHTML = '<div class="text-center py-8"><p class="text-gray-400">No team member data found. Add time entries to see team member hours.</p></div>';
        }
      }
      
      if (tableContainer) {
        if (data.length > 0) {
          createTeamTable(data, tableContainer);
        } else {
          tableContainer.innerHTML = '<div class="text-center py-8"><p class="text-gray-400">No team member data available</p></div>';
        }
      }
    }

    function updateResultsCounter(count: number) {
      const resultsCounter = document.getElementById('resultsCounter');
      if (resultsCounter) {
        const label = currentView === 'hours' ? 'projects' : currentView === 'cost' ? 'projects' : 'team members';
        resultsCounter.textContent = `Showing ${count} ${label}`;
      }
    }

    // Chart and table creation functions
    function createHoursChart(data: any[]) {
      console.log('createHoursChart called with data:', data);
      const ctx = document.getElementById('hoursChart') as HTMLCanvasElement;
      if (!ctx) {
        console.error('Canvas element not found');
        return;
      }

      console.log('Chart.js available:', typeof (window as any).Chart);
      console.log('Canvas element found:', !!ctx);
      
      // Destroy existing chart if it exists
      if ((window as any).hoursChart) {
              console.log('Destroying existing hours chart');
      (window as any).hoursChart.destroy();
    }
    
        try {
      console.log('Processing chart data...');
      console.log('Data sample:', data[0]);
      console.log('Data structure check:', {
        hasProjectName: data[0]?.hasOwnProperty('projectName'),
        hasTotalHours: data[0]?.hasOwnProperty('totalHours'),
        projectNameType: typeof data[0]?.projectName,
        totalHoursType: typeof data[0]?.totalHours
      });
      const chartData = {
        labels: data.map(item => item.projectName),
        datasets: [{
          label: 'Hours',
          data: data.map(item => Math.round(Number(item.totalHours) * 10) / 10),
          backgroundColor: [
            '#4F46E5', '#10B981', '#F59E0B', '#EC4899',
            '#8B5CF6', '#06B6D4', '#84CC16', '#F97316'
          ],
          borderColor: [
            '#3730A3', '#059669', '#D97706', '#BE185D',
            '#7C3AED', '#0891B2', '#65A30D', '#EA580C'
          ],
          borderWidth: 1,
          borderRadius: 8,
        }]
      };
      
      console.log('Chart data prepared:', chartData);

            try {
        console.log('Creating Chart.js instance...');
        (window as any).hoursChart = new (window as any).Chart(ctx, {
          type: 'bar',
          data: chartData,
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: { display: false },
              tooltip: {
                backgroundColor: '#1F2937',
                titleColor: '#F9FAFB',
                bodyColor: '#D1D5DB',
                borderColor: '#374151',
                borderWidth: 1,
                cornerRadius: 8,
                displayColors: false,
                callbacks: {
                  title: (context: any) => {
                    const index = context[0].dataIndex;
                    return `${data[index].projectName} (${data[index].clientName})`;
                  },
                  label: (context: any) => `Hours: ${context.parsed.y}`,
                },
              },
            },
            scales: {
              x: {
                grid: { color: '#374151', drawBorder: false },
                ticks: { color: '#D1D5DB', font: { size: 12 }, maxRotation: 45 },
              },
              y: {
                grid: { color: '#374151', drawBorder: false },
                ticks: { color: '#D1D5DB', font: { size: 12 }, callback: (value: any) => `${value}h` },
              },
            },
          },
        });
        console.log('Hours chart created successfully');
        console.log('Chart instance:', (window as any).hoursChart);
      } catch (error: any) {
        console.error('Error creating hours chart:', error);
        console.error('Error details:', error.message);
        console.error('Error stack:', error.stack);
      }
    } catch (error: any) {
      console.error('Error processing chart data:', error);
      console.error('Error details:', error.message);
      console.error('Error stack:', error.stack);
    }
    }

    function createCostChart(data: any[]) {
      const ctx = document.getElementById('costChart') as HTMLCanvasElement;
      if (!ctx) return;

      // Destroy existing chart if it exists
      if ((window as any).costChart) {
        (window as any).costChart.destroy();
      }

      (window as any).costChart = new (window as any).Chart(ctx, {
        type: 'bar',
        data: {
          labels: data.map(item => item.projectName),
          datasets: [{
            label: 'Cost ($)',
            data: data.map(item => Math.round(Number(item.totalCost) * 100) / 100),
            backgroundColor: [
              '#10B981', '#4F46E5', '#F59E0B', '#EC4899',
              '#8B5CF6', '#06B6D4', '#84CC16', '#F97316'
            ],
            borderColor: [
              '#059669', '#3730A3', '#D97706', '#BE185D',
              '#7C3AED', '#0891B2', '#65A30D', '#EA580C'
            ],
            borderWidth: 1,
            borderRadius: 8,
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: false },
            tooltip: {
              backgroundColor: '#1F2937',
              titleColor: '#F9FAFB',
              bodyColor: '#D1D5DB',
              borderColor: '#374151',
              borderWidth: 1,
              cornerRadius: 8,
              displayColors: false,
              callbacks: {
                title: (context: any) => {
                  const index = context[0].dataIndex;
                  return `${data[index].projectName} (${data[index].clientName})`;
                },
                label: (context: any) => {
                  const index = context[0].dataIndex;
                  const cost = context.parsed.y;
                  const hours = data[index].totalHours;
                  return [
                    `Cost: $${cost.toFixed(2)}`,
                    `Hours: ${hours.toFixed(1)}h`,
                    `Rate: $${hours > 0 ? (cost / hours).toFixed(2) : '0.00'}/h`
                  ];
                },
              },
            },
          },
          scales: {
            x: {
              grid: { color: '#374151', drawBorder: false },
              ticks: { color: '#D1D5DB', font: { size: 12 }, maxRotation: 45 },
            },
            y: {
              grid: { color: '#374151', drawBorder: false },
              ticks: { color: '#D1D5DB', font: { size: 12 }, callback: (value: any) => `$${value}` },
            },
          },
        },
      });
    }

    function createTeamChart(data: any[]) {
      const ctx = document.getElementById('teamChart') as HTMLCanvasElement;
      if (!ctx) return;

      // Destroy existing chart if it exists
      if ((window as any).teamChart) {
        (window as any).teamChart.destroy();
      }

      (window as any).teamChart = new (window as any).Chart(ctx, {
        type: 'bar',
        data: {
          labels: data.map(item => item.userName),
          datasets: [{
            label: 'Hours',
            data: data.map(item => Math.round(Number(item.totalHours) * 10) / 10),
            backgroundColor: [
              '#EC4899', '#4F46E5', '#10B981', '#F59E0B',
              '#8B5CF6', '#06B6D4', '#84CC16', '#F97316'
            ],
            borderColor: [
              '#BE185D', '#3730A3', '#059669', '#D97706',
              '#7C3AED', '#0891B2', '#65A30D', '#EA580C'
            ],
            borderWidth: 1,
            borderRadius: 8,
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: false },
            tooltip: {
              backgroundColor: '#1F2937',
              titleColor: '#F9FAFB',
              bodyColor: '#D1D5DB',
              borderColor: '#374151',
              borderWidth: 1,
              cornerRadius: 8,
              displayColors: false,
              callbacks: {
                title: (context: any) => {
                  const index = context[0].dataIndex;
                  return data[index].userName;
                },
                label: (context: any) => `Hours: ${context.parsed.y}`,
              },
            },
          },
          scales: {
            x: {
              grid: { color: '#374151', drawBorder: false },
              ticks: { color: '#D1D5DB', font: { size: 12 }, maxRotation: 45 },
            },
            y: {
              grid: { color: '#374151', drawBorder: false },
              ticks: { color: '#D1D5DB', font: { size: 12 }, callback: (value: any) => `${value}h` },
            },
          },
        },
      });
    }

    function createHoursTable(data: any[], container: HTMLElement) {
      const totalProjectHours = data.reduce((sum, p) => sum + Number(p.totalHours), 0);
      
      const tableHTML = `
        <table class="min-w-full divide-y divide-gray-700">
          <thead class="bg-gray-700">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Project</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Client</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Total Hours</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Percentage</th>
            </tr>
          </thead>
          <tbody class="bg-gray-800 divide-y divide-gray-700">
            ${data.map(project => {
              const percentage = totalProjectHours > 0 ? (Number(project.totalHours) / totalProjectHours) * 100 : 0;
              return `
                <tr class="hover:bg-gray-700">
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-white">${project.projectName}</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">${project.clientName}</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-white">${Math.round(Number(project.totalHours) * 10) / 10} hours</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-white">${percentage.toFixed(1)}%</td>
                </tr>
              `;
            }).join('')}
          </tbody>
        </table>
      `;
      
      container.innerHTML = tableHTML;
    }

    function createCostTable(data: any[], container: HTMLElement) {
      const totalProjectCost = data.reduce((sum, p) => sum + Number(p.totalCost), 0);
      
      const tableHTML = `
        <table class="min-w-full divide-y divide-gray-700">
          <thead class="bg-gray-700">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Project</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Client</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Total Hours</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Total Cost</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Percentage</th>
            </tr>
          </thead>
          <tbody class="bg-gray-800 divide-y divide-gray-700">
            ${data.map(project => {
              const percentage = totalProjectCost > 0 ? (Number(project.totalCost) / totalProjectCost) * 100 : 0;
              return `
                <tr class="hover:bg-gray-700">
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-white">${project.projectName}</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">${project.clientName}</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-white">${Math.round(Number(project.totalHours) * 10) / 10} hours</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-white">$${Number(project.totalCost).toFixed(2)}</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-white">${percentage.toFixed(1)}%</td>
                </tr>
              `;
            }).join('')}
          </tbody>
        </table>
      `;
      
      container.innerHTML = tableHTML;
    }

    function createTeamTable(data: any[], container: HTMLElement) {
      const totalTeamHours = data.reduce((sum, m) => sum + Number(m.totalHours), 0);
      
      const tableHTML = `
        <table class="min-w-full divide-y divide-gray-700">
          <thead class="bg-gray-700">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Team Member</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Total Hours</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Percentage</th>
            </tr>
          </thead>
          <tbody class="bg-gray-800 divide-y divide-gray-700">
            ${data.map(member => {
              const percentage = totalTeamHours > 0 ? (Number(member.totalHours) / totalTeamHours) * 100 : 0;
              return `
                <tr class="hover:bg-gray-700">
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-white">${member.userName}</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-white">${Math.round(Number(member.totalHours) * 10) / 10} hours</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-white">${percentage.toFixed(1)}%</td>
                </tr>
              `;
            }).join('')}
          </tbody>
        </table>
      `;
      
      container.innerHTML = tableHTML;
    }

    // Additional chart functions
    function updateAdditionalCharts(data: any[], totals: any, trendData: any[] = [], workloadData: any[] = []) {
      // Create trend chart
      createTrendChart(trendData);
      
      // Create pie charts if we have project data
      if (currentView === 'hours' || currentView === 'cost') {
        createHoursPieChart(data);
        createCostPieChart(data);
      }
      
      // Create workload chart
      createWorkloadChart(workloadData);
    }

    function createTrendChart(trendData: any[] = []) {
      const container = document.getElementById('trendChartContainer');
      if (!container) return;

      if (trendData.length === 0) {
        container.innerHTML = '<div class="text-center py-8"><p class="text-gray-400">No trend data available</p></div>';
        return;
      }

      // Process trend data
      const dates = trendData.map(item => {
        const date = new Date(item.date);
        return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
      });
      const hoursData = trendData.map(item => Math.round(item.hours * 10) / 10);
      const costData = trendData.map(item => Math.round(item.cost * 100) / 100);

      container.innerHTML = '<canvas id="trendChart" width="400" height="300"></canvas>';
      const ctx = document.getElementById('trendChart') as HTMLCanvasElement;
      if (!ctx) return;

      // Destroy existing chart if it exists
      if ((window as any).trendChart) {
        (window as any).trendChart.destroy();
      }

      (window as any).trendChart = new (window as any).Chart(ctx, {
        type: 'line',
        data: {
          labels: dates,
          datasets: [
            {
              label: 'Hours',
              data: hoursData,
              borderColor: '#4F46E5',
              backgroundColor: 'rgba(79, 70, 229, 0.1)',
              borderWidth: 3,
              fill: true,
              tension: 0.4,
              yAxisID: 'y',
            },
            {
              label: 'Cost ($)',
              data: costData,
              borderColor: '#10B981',
              backgroundColor: 'rgba(16, 185, 129, 0.1)',
              borderWidth: 3,
              fill: true,
              tension: 0.4,
              yAxisID: 'y1',
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          interaction: {
            mode: 'index',
            intersect: false,
          },
          plugins: {
            legend: {
              display: true,
              labels: {
                color: '#D1D5DB',
                usePointStyle: true,
              }
            },
            tooltip: {
              backgroundColor: '#1F2937',
              titleColor: '#F9FAFB',
              bodyColor: '#D1D5DB',
              borderColor: '#374151',
              borderWidth: 1,
              cornerRadius: 8,
            },
          },
          scales: {
            x: {
              grid: { color: '#374151', drawBorder: false },
              ticks: { color: '#D1D5DB', font: { size: 12 } },
            },
            y: {
              type: 'linear',
              display: true,
              position: 'left',
              grid: { color: '#374151', drawBorder: false },
              ticks: { color: '#D1D5DB', font: { size: 12 }, callback: (value: any) => `${value}h` },
            },
            y1: {
              type: 'linear',
              display: true,
              position: 'right',
              grid: { drawOnChartArea: false },
              ticks: { color: '#D1D5DB', font: { size: 12 }, callback: (value: any) => `$${value}` },
            },
          },
        },
      });
    }

    function createHoursPieChart(data: any[]) {
      const container = document.getElementById('hoursPieChartContainer');
      if (!container) return;

      if (data.length === 0) {
        container.innerHTML = '<div class="text-center py-8"><p class="text-gray-400">No data available</p></div>';
        return;
      }

      container.innerHTML = '<canvas id="hoursPieChart" width="400" height="300"></canvas>';
      const ctx = document.getElementById('hoursPieChart') as HTMLCanvasElement;
      if (!ctx) return;

      // Destroy existing chart if it exists
      if ((window as any).hoursPieChart) {
        (window as any).hoursPieChart.destroy();
      }

      const colors = [
        '#4F46E5', '#10B981', '#F59E0B', '#EC4899',
        '#8B5CF6', '#06B6D4', '#84CC16', '#F97316'
      ];

      (window as any).hoursPieChart = new (window as any).Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: data.map(item => item.projectName),
          datasets: [{
            data: data.map(item => Math.round(Number(item.totalHours) * 10) / 10),
            backgroundColor: colors.slice(0, data.length),
            borderColor: '#1F2937',
            borderWidth: 2,
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom',
              labels: {
                color: '#D1D5DB',
                padding: 20,
                usePointStyle: true,
              }
            },
            tooltip: {
              backgroundColor: '#1F2937',
              titleColor: '#F9FAFB',
              bodyColor: '#D1D5DB',
              borderColor: '#374151',
              borderWidth: 1,
              cornerRadius: 8,
              callbacks: {
                label: (context: any) => {
                  const total = context.dataset.data.reduce((a: number, b: number) => a + b, 0);
                  const percentage = ((context.parsed / total) * 100).toFixed(1);
                  return `${context.label}: ${context.parsed}h (${percentage}%)`;
                },
              },
            },
          },
        },
      });
    }

    function createCostPieChart(data: any[]) {
      const container = document.getElementById('costPieChartContainer');
      if (!container) return;

      if (data.length === 0) {
        container.innerHTML = '<div class="text-center py-8"><p class="text-gray-400">No data available</p></div>';
        return;
      }

      container.innerHTML = '<canvas id="costPieChart" width="400" height="300"></canvas>';
      const ctx = document.getElementById('costPieChart') as HTMLCanvasElement;
      if (!ctx) return;

      // Destroy existing chart if it exists
      if ((window as any).costPieChart) {
        (window as any).costPieChart.destroy();
      }

      const colors = [
        '#10B981', '#4F46E5', '#F59E0B', '#EC4899',
        '#8B5CF6', '#06B6D4', '#84CC16', '#F97316'
      ];

      (window as any).costPieChart = new (window as any).Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: data.map(item => item.projectName),
          datasets: [{
            data: data.map(item => Math.round(Number(item.totalCost) * 100) / 100),
            backgroundColor: colors.slice(0, data.length),
            borderColor: '#1F2937',
            borderWidth: 2,
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom',
              labels: {
                color: '#D1D5DB',
                padding: 20,
                usePointStyle: true,
              }
            },
            tooltip: {
              backgroundColor: '#1F2937',
              titleColor: '#F9FAFB',
              bodyColor: '#D1D5DB',
              borderColor: '#374151',
              borderWidth: 1,
              cornerRadius: 8,
              callbacks: {
                label: (context: any) => {
                  const total = context.dataset.data.reduce((a: number, b: number) => a + b, 0);
                  const percentage = ((context.parsed / total) * 100).toFixed(1);
                  return `${context.label}: $${context.parsed.toFixed(2)} (${percentage}%)`;
                },
              },
            },
          },
        },
      });
    }

    function createWorkloadChart(workloadData: any[] = []) {
      const container = document.getElementById('workloadChartContainer');
      if (!container) return;

      if (workloadData.length === 0) {
        container.innerHTML = '<div class="text-center py-8"><p class="text-gray-400">No workload data available</p></div>';
        return;
      }

      container.innerHTML = '<canvas id="workloadChart" width="400" height="300"></canvas>';
      const ctx = document.getElementById('workloadChart') as HTMLCanvasElement;
      if (!ctx) return;

      // Destroy existing chart if it exists
      if ((window as any).workloadChart) {
        (window as any).workloadChart.destroy();
      }

      const colors = [
        '#EC4899', '#4F46E5', '#10B981', '#F59E0B', '#8B5CF6',
        '#06B6D4', '#84CC16', '#F97316', '#8B5CF6', '#06B6D4'
      ];

      (window as any).workloadChart = new (window as any).Chart(ctx, {
        type: 'bar',
        data: {
          labels: workloadData.map(item => item.userName),
          datasets: [{
            label: 'Hours',
            data: workloadData.map(item => Math.round(Number(item.totalHours) * 10) / 10),
            backgroundColor: colors.slice(0, workloadData.length),
            borderColor: colors.slice(0, workloadData.length).map(color => color.replace('1', '0')),
            borderWidth: 1,
            borderRadius: 8,
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: false },
            tooltip: {
              backgroundColor: '#1F2937',
              titleColor: '#F9FAFB',
              bodyColor: '#D1D5DB',
              borderColor: '#374151',
              borderWidth: 1,
              cornerRadius: 8,
              displayColors: false,
              callbacks: {
                label: (context: any) => `Hours: ${context.parsed.y}`,
              },
            },
          },
          scales: {
            x: {
              grid: { color: '#374151', drawBorder: false },
              ticks: { color: '#D1D5DB', font: { size: 12 }, maxRotation: 45 },
            },
            y: {
              grid: { color: '#374151', drawBorder: false },
              ticks: { color: '#D1D5DB', font: { size: 12 }, callback: (value: any) => `${value}h` },
            },
          },
        },
      });
    }

    // Filter functionality
    const searchInput = document.getElementById('search');
    const clientFilter = document.getElementById('clientFilter');
    const userFilter = document.getElementById('userFilter');
    const dateRange = document.getElementById('dateRange');
    const customDateRange = document.getElementById('customDateRange');
    const startDate = document.getElementById('startDate');
    const endDate = document.getElementById('endDate');

    // Show/hide custom date range
    dateRange?.addEventListener('change', () => {
      if ((dateRange as HTMLSelectElement).value === 'custom') {
        customDateRange?.classList.remove('hidden');
      } else {
        customDateRange?.classList.add('hidden');
      }
      loadData(); // Reload data when date range changes
    });

    // Filter function for client-side filtering
    function applyFilters() {
      const searchTerm = (searchInput as HTMLInputElement)?.value.toLowerCase() || '';
      const selectedClient = (clientFilter as HTMLSelectElement)?.value || '';
      const selectedUser = (userFilter as HTMLSelectElement)?.value || '';

      // Filter project hours table
      const projectRows = document.querySelectorAll('#hoursView table tbody tr');
      projectRows.forEach(row => {
        const projectName = row.querySelector('td:nth-child(1)')?.textContent?.toLowerCase() || '';
        const clientName = row.querySelector('td:nth-child(2)')?.textContent || '';

        let show = true;

        // Search filter
        if (searchTerm && !projectName.includes(searchTerm)) {
          show = false;
        }

        // Client filter
        if (selectedClient && clientName !== selectedClient) {
          show = false;
        }

        if (show) {
          row.classList.remove('hidden');
        } else {
          row.classList.add('hidden');
        }
      });

      // Filter cost table
      const costRows = document.querySelectorAll('#costView table tbody tr');
      costRows.forEach(row => {
        const projectName = row.querySelector('td:nth-child(1)')?.textContent?.toLowerCase() || '';
        const clientName = row.querySelector('td:nth-child(2)')?.textContent || '';

        let show = true;

        // Search filter
        if (searchTerm && !projectName.includes(searchTerm)) {
          show = false;
        }

        // Client filter
        if (selectedClient && clientName !== selectedClient) {
          show = false;
        }

        if (show) {
          row.classList.remove('hidden');
        } else {
          row.classList.add('hidden');
        }
      });

      // Filter team member hours table
      const teamMemberRows = document.querySelectorAll('#teamView table tbody tr');
      teamMemberRows.forEach(row => {
        const memberName = row.querySelector('td:nth-child(1)')?.textContent?.toLowerCase() || '';

        let show = true;

        // Search filter
        if (searchTerm && !memberName.includes(searchTerm)) {
          show = false;
        }

        // User filter
        if (selectedUser && memberName !== selectedUser.toLowerCase()) {
          show = false;
        }

        if (show) {
          row.classList.remove('hidden');
        } else {
          row.classList.add('hidden');
        }
      });
    }

    // Add event listeners for filters
    searchInput?.addEventListener('input', applyFilters);
    clientFilter?.addEventListener('change', applyFilters);
    userFilter?.addEventListener('change', applyFilters);
    startDate?.addEventListener('change', loadData);
    endDate?.addEventListener('change', loadData);

    // Initialize with current week as default
    const dateRangeSelect = document.getElementById('dateRange') as HTMLSelectElement;
    if (dateRangeSelect) {
      dateRangeSelect.value = 'week';
      console.log('Initializing reports page...');
      console.log('Chart.js available:', typeof (window as any).Chart);
      loadData();
    }

    // Export functionality
    const exportCsvBtn = document.getElementById('exportCsvBtn');
    const exportPdfBtn = document.getElementById('exportPdfBtn');

    if (exportCsvBtn) {
      exportCsvBtn.addEventListener('click', () => {
        let csv = '';
        
        if (currentView === 'hours') {
          csv = 'Project,Client,Total Hours\n';
          // This would need to be populated with actual data from the server
          csv += 'Sample Project,Sample Client,10.5\n';
        } else if (currentView === 'cost') {
          csv = 'Project,Client,Total Hours,Total Cost\n';
          // This would need to be populated with actual data from the server
          csv += 'Sample Project,Sample Client,10.5,$525.00\n';
        } else {
          csv = 'Team Member,Total Hours\n';
          // This would need to be populated with actual data from the server
          csv += 'Sample User,10.5\n';
        }
        
        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `time-tracking-report-${currentView}.csv`;
        a.click();
        window.URL.revokeObjectURL(url);
      });
    }

    if (exportPdfBtn) {
      exportPdfBtn.addEventListener('click', () => {
        alert('PDF export functionality would be implemented here. For now, use the CSV export.');
      });
    }
  </script>
</AdminLayout> 