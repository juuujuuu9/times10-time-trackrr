---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { timeEntries, users, tasks, projects, clients } from '../../../db/schema';
import { count, sql, sum, gte, lte, and, eq } from 'drizzle-orm';
import { getProjectCosts, getClientCosts } from '../../../db/queries';
import { ReportsCharts } from '../../../components/ReportsCharts';
import { DashboardWidgets } from '../../../components/DashboardWidgets';

// Get the selected time period from query params, default to 'last30' (more likely to have data)
const period = Astro.url.searchParams.get('period') || 'last30';
// Get the selected view type from query params, default to 'project'
const viewType = Astro.url.searchParams.get('view') || 'project';
// Get the selected team member from query params, default to 'all'
const selectedTeamMember = Astro.url.searchParams.get('teamMember') || 'all';
// Get custom date range from query params
const customStartDate = Astro.url.searchParams.get('startDate');
const customEndDate = Astro.url.searchParams.get('endDate');

// Calculate date ranges based on selected period
const now = new Date();
let startDate: Date | null = null;
let endDate: Date | null = null;

switch (period) {
  case 'week':
    // This week (Sunday to Saturday)
    const dayOfWeek = now.getDay();
    const daysToSubtract = dayOfWeek === 0 ? 0 : dayOfWeek;
    startDate = new Date(now);
    startDate.setDate(now.getDate() - daysToSubtract);
    startDate.setHours(0, 0, 0, 0);
    endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 6);
    endDate.setHours(23, 59, 59, 999);
    break;
  case 'month':
    // This month
    startDate = new Date(now.getFullYear(), now.getMonth(), 1);
    endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);
    break;
  case 'year':
    // Year to date
    startDate = new Date(now.getFullYear(), 0, 1);
    endDate = new Date(now.getFullYear(), 11, 31, 23, 59, 59, 999);
    break;
  case 'last30':
    // Last 30 days
    startDate = new Date(now);
    startDate.setDate(now.getDate() - 30);
    startDate.setHours(0, 0, 0, 0);
    endDate = new Date(now);
    endDate.setHours(23, 59, 59, 999);
    break;
  case 'custom':
    // Custom period - use provided dates or default to last 30 days
    if (customStartDate && customEndDate) {
      startDate = new Date(customStartDate);
      startDate.setHours(0, 0, 0, 0);
      endDate = new Date(customEndDate);
      endDate.setHours(23, 59, 59, 999);
    } else {
      // Default to last 30 days if no custom dates provided
      startDate = new Date(now);
      startDate.setDate(now.getDate() - 30);
      startDate.setHours(0, 0, 0, 0);
      endDate = new Date(now);
      endDate.setHours(23, 59, 59, 999);
    }
    break;
  default:
    // Default to week if invalid period
    const defaultDayOfWeek = now.getDay();
    const defaultDaysToSubtract = defaultDayOfWeek === 0 ? 0 : defaultDayOfWeek;
    startDate = new Date(now);
    startDate.setDate(now.getDate() - defaultDaysToSubtract);
    startDate.setHours(0, 0, 0, 0);
    endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 6);
    endDate.setHours(23, 59, 59, 999);
}

// Build filter conditions
let filterConditions = [gte(timeEntries.startTime, startDate), lte(timeEntries.startTime, endDate)];

// Add team member filter if a specific member is selected
if (selectedTeamMember !== 'all') {
  filterConditions.push(eq(timeEntries.userId, parseInt(selectedTeamMember)));
}

const dateFilter = and(...filterConditions);

// Get all team members for the dropdown (sorted by first name)
const allTeamMembers = await db
  .select({
    id: users.id,
    name: users.name,
    email: users.email
  })
  .from(users)
  .orderBy(users.name);

// Get basic stats
const totalUsers = await db.select({ count: count() }).from(users);
const totalProjects = await db.select({ count: count() }).from(projects);
const totalTasks = await db.select({ count: count() }).from(tasks);

// Get total hours from time entries (with date filter)
const totalHoursResult = await db
  .select({
    totalSeconds: sql<number>`COALESCE(SUM(
      CASE 
        WHEN ${timeEntries.endTime} IS NOT NULL 
        THEN EXTRACT(EPOCH FROM (${timeEntries.endTime} - ${timeEntries.startTime}))
        ELSE COALESCE(${timeEntries.durationManual}, 0)
      END
    ), 0)`.as('total_seconds')
  })
  .from(timeEntries)
  .where(dateFilter);

// Get total cost from time entries (with date filter)
const totalCostResult = await db
  .select({
    totalCost: sql<number>`COALESCE(SUM(
      CASE 
        WHEN ${timeEntries.endTime} IS NOT NULL 
        THEN EXTRACT(EPOCH FROM (${timeEntries.endTime} - ${timeEntries.startTime})) / 3600 * COALESCE(${users.payRate}, 0)
        ELSE COALESCE(${timeEntries.durationManual}, 0) / 3600 * COALESCE(${users.payRate}, 0)
      END
    ), 0)`.as('total_cost')
  })
  .from(timeEntries)
  .innerJoin(users, sql`${timeEntries.userId} = ${users.id}`)
  .where(dateFilter);

// Get active team members (users with time entries, with date filter)
const activeTeamMembersResult = await db
  .select({
    count: count(sql`DISTINCT ${timeEntries.userId}`)
  })
  .from(timeEntries)
  .where(dateFilter);

// Get data based on view type
const teamMemberId = selectedTeamMember !== 'all' ? parseInt(selectedTeamMember) : undefined;
const projectCosts = viewType === 'project' ? await getProjectCosts(startDate, endDate, teamMemberId) : [];
const clientCosts = viewType === 'client' ? await getClientCosts(startDate, endDate, teamMemberId) : [];

// Format the data for display
const totalHours = totalHoursResult[0]?.totalSeconds || 0;
const totalCost = totalCostResult[0]?.totalCost || 0;
const activeTeamMembers = activeTeamMembersResult[0]?.count || 0;

// Format duration
const formatDuration = (seconds: number) => {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  return `${hours}h ${minutes}m`;
};

const formatDurationToHours = (seconds: number) => {
  return Math.round((seconds / 3600) * 100) / 100;
};

const totalHoursFormatted = formatDuration(totalHours);
const totalHoursDecimal = formatDurationToHours(totalHours);
const totalCostFormatted = new Intl.NumberFormat('en-US', {
  style: 'currency',
  currency: 'USD'
}).format(totalCost);

// Get period display name
const getPeriodDisplayName = (period: string) => {
  switch (period) {
    case 'week': return 'This Week';
    case 'month': return 'This Month';
    case 'year': return 'Year to Date';
    case 'last30': return 'Last 30 Days';
    case 'custom': 
      if (customStartDate && customEndDate) {
        return `Custom Range (${new Date(customStartDate).toLocaleDateString()} - ${new Date(customEndDate).toLocaleDateString()})`;
      }
      return 'Last 30 Days';
    default: return 'This Week';
  }
};

const periodDisplayName = getPeriodDisplayName(period);

// Get time series data for charts
const timeSeriesUrl = new URL('/api/reports/time-series', Astro.url);
timeSeriesUrl.searchParams.set('period', period);
timeSeriesUrl.searchParams.set('teamMember', selectedTeamMember);
if (customStartDate) timeSeriesUrl.searchParams.set('startDate', customStartDate);
if (customEndDate) timeSeriesUrl.searchParams.set('endDate', customEndDate);

const timeSeriesResponse = await fetch(timeSeriesUrl.toString());
const timeSeriesData = timeSeriesResponse.ok ? await timeSeriesResponse.json() : { timeSeriesData: [] };
---

<AdminLayout title="Reports" currentPage="reports">
  <div class="space-y-8">
    <!-- Header with enhanced styling -->
    <div class="bg-gradient-to-r from-gray-50 to-white rounded-xl border border-gray-300 p-8 shadow-sm">
      <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center space-y-4 lg:space-y-0">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 mb-2">📊 Analytics Dashboard</h1>
          <p class="text-gray-600 text-lg">Comprehensive insights into your time tracking data</p>
        </div>
        
        <!-- Enhanced Controls -->
        <div class="flex flex-col sm:flex-row items-stretch sm:items-center space-y-3 sm:space-y-0 sm:space-x-4">
          <!-- Time Period Dropdown -->
          <div class="relative">
            <select 
              id="periodSelect" 
              class="appearance-none bg-white border border-gray-300 text-gray-900 px-4 py-3 pr-10 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-transparent transition-all duration-200 hover:bg-gray-50"
              onchange="handlePeriodChange(this.value)"
            >
              <option value="last30" selected={period === 'last30'}>📅 Last 30 Days</option>
              <option value="week" selected={period === 'week'}>📅 This Week</option>
              <option value="month" selected={period === 'month'}>📅 This Month</option>
              <option value="year" selected={period === 'year'}>📅 Year to Date</option>
              <option value="custom" selected={period === 'custom'}>📅 Custom Range</option>
            </select>
            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-500">
              <svg class="fill-current h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
              </svg>
            </div>
          </div>

          <!-- Custom Date Range Inputs -->
          <div id="customDateRange" class={`flex items-center space-x-2 ${period === 'custom' ? '' : 'hidden'}`}>
            <input 
              type="date" 
              id="startDate" 
              value={customStartDate || ''}
              class="bg-white border border-gray-300 text-gray-900 px-3 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-transparent text-sm transition-all duration-200 hover:bg-gray-50"
              placeholder="Start Date"
            />
            <span class="text-gray-500">to</span>
            <input 
              type="date" 
              id="endDate" 
              value={customEndDate || ''}
              class="bg-white border border-gray-300 text-gray-900 px-3 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-transparent text-sm transition-all duration-200 hover:bg-gray-50"
              placeholder="End Date"
            />
            <button 
              onclick="applyCustomRange()"
              class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-3 rounded-lg text-sm font-medium transition-colors duration-200"
            >
              Apply
            </button>
          </div>

          <!-- View Type Dropdown -->
          <div class="relative">
            <select 
              id="viewSelect" 
              class="appearance-none bg-white border border-gray-300 text-gray-900 px-4 py-3 pr-10 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-transparent transition-all duration-200 hover:bg-gray-50"
              onchange="handleViewChange(this.value)"
            >
              <option value="project" selected={viewType === 'project'}>📁 By Project</option>
              <option value="client" selected={viewType === 'client'}>🏢 By Client</option>
            </select>
            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-500">
              <svg class="fill-current h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
              </svg>
            </div>
          </div>

          <!-- Team Member Dropdown -->
          <div class="relative">
            <select 
              id="teamMemberSelect" 
              class="appearance-none bg-white border border-gray-300 text-gray-900 px-4 py-3 pr-10 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-transparent transition-all duration-200 hover:bg-gray-50"
              onchange="handleTeamMemberChange(this.value)"
            >
              <option value="all" selected={selectedTeamMember === 'all'}>👥 All Team Members</option>
              {allTeamMembers.map((member) => (
                <option value={member.id} selected={selectedTeamMember === member.id.toString()}>
                  👤 {member.name}
                </option>
              ))}
            </select>
            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-500">
              <svg class="fill-current h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
              </svg>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Period Info with enhanced styling -->
    <div class="bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl border border-gray-300 p-6 shadow-sm">
      <div class="flex items-center space-x-3">
        <div class="p-2 bg-gray-200 rounded-lg">
          <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
          </svg>
        </div>
        <div>
          <p class="text-sm font-medium text-gray-700">
            <span class="font-semibold">Showing data for:</span> {periodDisplayName}
          </p>
          <p class="text-xs text-gray-500">
            {startDate.toLocaleDateString()} - {endDate.toLocaleDateString()}
          </p>
        </div>
      </div>
    </div>

    <!-- Metrics and Charts Layout -->
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
      <!-- Key Metrics Column -->
      <div class="lg:col-span-1">
        <div class="bg-white rounded-lg border border-gray-300 p-4 sticky top-6 shadow-sm">
          <div class="text-left mb-4">
            <h3 class="text-sm font-medium text-gray-700 mb-1">Key Metrics</h3>
            <p class="text-xs text-gray-500">{periodDisplayName}</p>
          </div>
          
          <div class="space-y-3">
            <!-- Total Hours -->
            <div class="text-left p-3 bg-gray-50 rounded border border-gray-200">
              <div class="text-lg font-semibold text-gray-900">{totalHours > 0 ? totalHoursFormatted : '0h 0m'}</div>
              <div class="text-xs text-gray-600">Total Hours</div>
            </div>

            <!-- Total Cost -->
            <div class="text-left p-3 bg-gray-50 rounded border border-gray-200">
              <div class="text-lg font-semibold text-gray-900">{totalCost > 0 ? totalCostFormatted : '$0.00'}</div>
              <div class="text-xs text-gray-600">Total Cost</div>
            </div>

            <!-- Average Hours per Member -->
            <div class="text-left p-3 bg-gray-50 rounded border border-gray-200">
              <div class="text-lg font-semibold text-gray-900">
                {activeTeamMembers > 0 ? Math.round((totalHours / activeTeamMembers) / 3600 * 10) / 10 : 0}h
              </div>
              <div class="text-xs text-gray-600">Avg Hours/Member</div>
            </div>

            <!-- Average Rate -->
            <div class="text-left p-3 bg-gray-50 rounded border border-gray-200">
              <div class="text-lg font-semibold text-gray-900">
                {totalHours > 0 ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(totalCost / (totalHours / 3600)) : '$0.00'}
              </div>
              <div class="text-xs text-gray-600">Avg Rate/Hour</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Charts Column -->
      <div class="lg:col-span-3">
        <div class="space-y-8">          
          <ReportsCharts 
            client:load
            projectCosts={projectCosts}
            clientCosts={clientCosts}
            timeSeriesData={timeSeriesData.timeSeriesData}
            period={periodDisplayName}
            viewType={viewType as 'project' | 'client'}
          />
        </div>
      </div>
    </div>
  </div>

  <script is:inline>
    // Enhanced JavaScript with better UX
    window.handlePeriodChange = function(period) {
      const customDateRange = document.getElementById('customDateRange');
      const viewSelect = document.getElementById('viewSelect');
      
      if (!customDateRange || !viewSelect) return;
      
      if (period === 'custom') {
        customDateRange.classList.remove('hidden');
        // Set default dates if not already set
        const startDate = document.getElementById('startDate');
        const endDate = document.getElementById('endDate');
        
        if (startDate && !startDate.value) {
          const thirtyDaysAgo = new Date();
          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
          startDate.value = thirtyDaysAgo.toISOString().split('T')[0];
        }
        if (endDate && !endDate.value) {
          endDate.value = new Date().toISOString().split('T')[0];
        }
      } else {
        customDateRange.classList.add('hidden');
        // Navigate to the selected period
        const teamMemberSelect = document.getElementById('teamMemberSelect');
        const currentUrl = new URL(window.location);
        currentUrl.searchParams.set('period', period);
        currentUrl.searchParams.set('view', viewSelect.value);
        if (teamMemberSelect) {
          currentUrl.searchParams.set('teamMember', teamMemberSelect.value);
        }
        window.location.href = currentUrl.toString();
      }
    };

    window.applyCustomRange = function() {
      const startDateEl = document.getElementById('startDate');
      const endDateEl = document.getElementById('endDate');
      const viewSelect = document.getElementById('viewSelect');
      const teamMemberSelect = document.getElementById('teamMemberSelect');
      
      if (!startDateEl || !endDateEl || !viewSelect || !teamMemberSelect) return;
      
      const startDate = startDateEl.value;
      const endDate = endDateEl.value;
      
      if (!startDate || !endDate) {
        alert('Please select both start and end dates');
        return;
      }
      
      if (new Date(startDate) > new Date(endDate)) {
        alert('Start date cannot be after end date');
        return;
      }
      
      window.location.href = `/admin/reports?period=custom&view=${viewSelect.value}&teamMember=${teamMemberSelect.value}&startDate=${startDate}&endDate=${endDate}`;
    };

    window.handleViewChange = function(view) {
      const periodSelect = document.getElementById('periodSelect');
      const teamMemberSelect = document.getElementById('teamMemberSelect');
      
      if (!periodSelect || !teamMemberSelect) return;
      
      const currentUrl = new URL(window.location);
      currentUrl.searchParams.set('period', periodSelect.value);
      currentUrl.searchParams.set('view', view);
      currentUrl.searchParams.set('teamMember', teamMemberSelect.value);
      
      // Preserve custom date range if it exists
      const startDate = document.getElementById('startDate');
      const endDate = document.getElementById('endDate');
      if (startDate && endDate && startDate.value && endDate.value) {
        currentUrl.searchParams.set('startDate', startDate.value);
        currentUrl.searchParams.set('endDate', endDate.value);
      }
      
      window.location.href = currentUrl.toString();
    };

    window.handleTeamMemberChange = function(teamMember) {
      const periodSelect = document.getElementById('periodSelect');
      const viewSelect = document.getElementById('viewSelect');
      
      if (!periodSelect || !viewSelect) return;
      
      const currentUrl = new URL(window.location);
      currentUrl.searchParams.set('period', periodSelect.value);
      currentUrl.searchParams.set('view', viewSelect.value);
      currentUrl.searchParams.set('teamMember', teamMember);
      
      // Preserve custom date range if it exists
      const startDate = document.getElementById('startDate');
      const endDate = document.getElementById('endDate');
      if (startDate && endDate && startDate.value && endDate.value) {
        currentUrl.searchParams.set('startDate', startDate.value);
        currentUrl.searchParams.set('endDate', endDate.value);
      }
      
      window.location.href = currentUrl.toString();
    };

    // Initialize custom date range visibility on page load
    document.addEventListener('DOMContentLoaded', function() {
      const periodSelect = document.getElementById('periodSelect');
      const customDateRange = document.getElementById('customDateRange');
      
      if (periodSelect && customDateRange && periodSelect.value === 'custom') {
        customDateRange.classList.remove('hidden');
      }
    });
  </script>
</AdminLayout> 