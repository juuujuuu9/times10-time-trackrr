---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { getSessionUser } from '../../utils/session';

// Get the selected time period from query params, default to 'week'
const period = Astro.url.searchParams.get('period') || 'week';
const teamMember = Astro.url.searchParams.get('teamMember') || 'all';
const project = Astro.url.searchParams.get('project');
const client = Astro.url.searchParams.get('client');
const startDate = Astro.url.searchParams.get('startDate');
const endDate = Astro.url.searchParams.get('endDate');

// Get current user to check permissions
const currentUser = await getSessionUser(Astro);
const canViewFinancialData = currentUser ? currentUser.role === 'admin' : false;

// Fetch enhanced dashboard data
let dashboardData = null;
try {
  const apiUrl = new URL('/api/admin/reports/enhanced-dashboard', Astro.url);
  apiUrl.searchParams.set('period', period);
  apiUrl.searchParams.set('teamMember', teamMember);
  if (project) apiUrl.searchParams.set('project', project);
  if (client) apiUrl.searchParams.set('client', client);
  if (startDate) apiUrl.searchParams.set('startDate', startDate);
  if (endDate) apiUrl.searchParams.set('endDate', endDate);

  const response = await fetch(apiUrl.toString());
  if (response.ok) {
    const result = await response.json();
    if (result.success) {
      dashboardData = result.data;
    }
  }
} catch (error) {
  console.error('Error fetching enhanced dashboard data:', error);
}

// Get period display name
const getPeriodDisplayName = (period: string) => {
  switch (period) {
    case 'all': return 'All Time';
    case 'today': return 'Today';
    case 'week': return 'This Week';
    case 'month': return 'This Month';
    case 'quarter': return 'This Quarter';
    case 'custom': 
      if (startDate && endDate) {
        return `Custom Range (${new Date(startDate).toLocaleDateString()} - ${new Date(endDate).toLocaleDateString()})`;
      }
      return 'Custom Range';
    default: return 'This Week';
  }
};

const periodDisplayName = getPeriodDisplayName(period);
---

<AdminLayout title="Enhanced Dashboard" currentPage="dashboard">
  <div class="space-y-8">
    <!-- Header -->
    <div class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-200 p-8 shadow-sm">
      <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center space-y-4 lg:space-y-0">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 mb-2">🚀 Enhanced Analytics Dashboard</h1>
          <p class="text-gray-600 text-lg">Advanced insights and visualizations for your time tracking data</p>
        </div>
        
        <!-- Period Info -->
        <div class="bg-white rounded-lg border border-blue-200 p-4">
          <div class="flex items-center space-x-3">
            <div class="p-2 bg-blue-100 rounded-lg">
              <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
            </div>
            <div>
              <p class="text-xl font-medium text-gray-700">
                {periodDisplayName}
              </p>
              <p class="text-sm text-gray-500">
                {dashboardData?.filters?.startDate && dashboardData?.filters?.endDate 
                  ? `${new Date(dashboardData.filters.startDate).toLocaleDateString()} - ${new Date(dashboardData.filters.endDate).toLocaleDateString()}`
                  : 'All Time'
                }
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Enhanced Dashboard Widgets -->
    {dashboardData && (
      <div id="enhanced-dashboard-widgets" 
           data-time-entries={JSON.stringify(dashboardData.timeEntries)}
           data-period={periodDisplayName}
           data-can-view-financial={canViewFinancialData}
           data-user-metrics={JSON.stringify(dashboardData.userMetrics)}
           data-project-metrics={JSON.stringify(dashboardData.projectMetrics)}
           data-client-metrics={JSON.stringify(dashboardData.clientMetrics)}
           data-summary={JSON.stringify(dashboardData.summary)}>
      </div>
    )}

    <!-- Loading State -->
    {!dashboardData && (
      <div class="bg-white rounded-lg border border-gray-300 p-8 shadow-sm">
        <div class="flex items-center justify-center space-x-3">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <p class="text-gray-600">Loading enhanced dashboard data...</p>
        </div>
      </div>
    )}

    <!-- Navigation Links -->
    <div class="bg-white rounded-lg border border-gray-300 p-6 shadow-sm">
      <h3 class="text-lg font-semibold text-gray-900 mb-4">📊 Dashboard Options</h3>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <a href="/admin" class="flex items-center space-x-3 p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
          <div class="p-2 bg-blue-100 rounded-lg">
            <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
          </div>
          <div>
            <p class="font-medium text-gray-900">Standard Dashboard</p>
            <p class="text-sm text-gray-600">Basic charts and metrics</p>
          </div>
        </a>

        <a href="/admin/enhanced-dashboard" class="flex items-center space-x-3 p-4 bg-blue-50 rounded-lg border border-blue-200">
          <div class="p-2 bg-blue-100 rounded-lg">
            <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
            </svg>
          </div>
          <div>
            <p class="font-medium text-gray-900">Enhanced Dashboard</p>
            <p class="text-sm text-gray-600">Advanced analytics and insights</p>
          </div>
        </a>

        <a href="/admin/time-entries" class="flex items-center space-x-3 p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
          <div class="p-2 bg-green-100 rounded-lg">
            <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <div>
            <p class="font-medium text-gray-900">Time Entries</p>
            <p class="text-sm text-gray-600">View and manage time entries</p>
          </div>
        </a>
      </div>
    </div>
  </div>

  <script>
    // Enhanced Dashboard Widgets Component
    class EnhancedDashboardWidgets {
      constructor(container) {
        this.container = container;
        this.timeEntries = JSON.parse(container.dataset.timeEntries || '[]');
        this.period = container.dataset.period || 'This Week';
        this.canViewFinancialData = container.dataset.canViewFinancial === 'true';
        this.userMetrics = JSON.parse(container.dataset.userMetrics || '[]');
        this.projectMetrics = JSON.parse(container.dataset.projectMetrics || '[]');
        this.clientMetrics = JSON.parse(container.dataset.clientMetrics || '[]');
        this.summary = JSON.parse(container.dataset.summary || '{}');
        
        this.selectedView = 'overview';
        this.selectedMetric = 'hours';
        
        this.init();
      }
      
      init() {
        this.render();
        this.bindEvents();
      }
      
      render() {
        this.container.innerHTML = `
          <div class="space-y-6">
            <!-- Enhanced Controls -->
            <div class="bg-white rounded-lg border border-gray-300 p-6 shadow-sm">
              <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-4 sm:space-y-0">
                <div>
                  <h2 class="text-xl font-semibold text-gray-900">Enhanced Analytics</h2>
                  <p class="text-sm text-gray-600">Detailed insights into your time tracking data</p>
                </div>
                
                <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4">
                  <!-- View Selector -->
                  <div class="flex space-x-1 bg-gray-100 rounded-lg p-1">
                    ${[
                      { key: 'overview', label: 'Overview', icon: '📊' },
                      { key: 'users', label: 'Users', icon: '👥' },
                      { key: 'projects', label: 'Projects', icon: '📋' },
                      { key: 'clients', label: 'Clients', icon: '🏢' }
                    ].map(({ key, label, icon }) => `
                      <button
                        data-view="${key}"
                        class="px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                          this.selectedView === key
                            ? 'bg-white text-gray-900 shadow-sm'
                            : 'text-gray-600 hover:text-gray-900'
                        }"
                      >
                        ${icon} ${label}
                      </button>
                    `).join('')}
                  </div>

                  <!-- Metric Selector -->
                  ${this.selectedView !== 'overview' ? `
                    <div class="flex space-x-1 bg-gray-100 rounded-lg p-1">
                      ${[
                        { key: 'hours', label: 'Hours', icon: '⏱️' },
                        { key: 'cost', label: 'Cost', icon: '💰' },
                        { key: 'entries', label: 'Entries', icon: '📝' }
                      ].map(({ key, label, icon }) => `
                        <button
                          data-metric="${key}"
                          class="px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                            this.selectedMetric === key
                              ? 'bg-white text-gray-900 shadow-sm'
                              : 'text-gray-600 hover:text-gray-900'
                          }"
                        >
                          ${icon} ${label}
                        </button>
                      `).join('')}
                    </div>
                  ` : ''}
                </div>
              </div>
            </div>

            ${this.renderContent()}
          </div>
        `;
      }
      
      renderContent() {
        if (this.selectedView === 'overview') {
          return this.renderOverview();
        } else {
          return this.renderDetailedView();
        }
      }
      
      renderOverview() {
        return `
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div class="bg-white rounded-lg border border-gray-300 p-6 shadow-sm">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm font-medium text-gray-600">Total Hours</p>
                  <p class="text-2xl font-bold text-gray-900">${this.summary.totalHours || 0}</p>
                </div>
                <div class="p-3 bg-blue-100 rounded-lg">
                  <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
              </div>
            </div>

            <div class="bg-white rounded-lg border border-gray-300 p-6 shadow-sm">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm font-medium text-gray-600">Total Cost</p>
                  <p class="text-2xl font-bold text-gray-900">
                    ${this.canViewFinancialData ? `$${(this.summary.totalCost || 0).toLocaleString()}` : '***'}
                  </p>
                </div>
                <div class="p-3 bg-green-100 rounded-lg">
                  <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                  </svg>
                </div>
              </div>
            </div>

            <div class="bg-white rounded-lg border border-gray-300 p-6 shadow-sm">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm font-medium text-gray-600">Total Entries</p>
                  <p class="text-2xl font-bold text-gray-900">${this.summary.totalEntries || 0}</p>
                </div>
                <div class="p-3 bg-purple-100 rounded-lg">
                  <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                  </svg>
                </div>
              </div>
            </div>

            <div class="bg-white rounded-lg border border-gray-300 p-6 shadow-sm">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm font-medium text-gray-600">Entry Types</p>
                  <p class="text-lg font-bold text-gray-900">
                    ${this.summary.manualPercentage || 0}% Manual
                  </p>
                  <p class="text-sm text-gray-500">
                    ${this.summary.timerPercentage || 0}% Timer
                  </p>
                </div>
                <div class="p-3 bg-orange-100 rounded-lg">
                  <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                  </svg>
                </div>
              </div>
            </div>
          </div>
        `;
      }
      
      renderDetailedView() {
        const data = this.getSortedData();
        const title = this.getViewTitle();
        
        return `
          <div class="bg-white rounded-lg border border-gray-300 shadow-sm">
            <div class="p-6 border-b border-gray-200">
              <h3 class="text-lg font-semibold text-gray-900">${title}</h3>
              <p class="text-sm text-gray-600">
                Sorted by ${this.selectedMetric === 'hours' ? 'total hours' : this.selectedMetric === 'cost' ? 'total cost' : 'number of entries'}
              </p>
            </div>
            
            <div class="divide-y divide-gray-200">
              ${data.slice(0, 10).map((item, index) => this.renderItem(item, index)).join('')}
            </div>
          </div>
        `;
      }
      
      getSortedData() {
        let data = [];
        switch (this.selectedView) {
          case 'users':
            data = this.userMetrics;
            break;
          case 'projects':
            data = this.projectMetrics;
            break;
          case 'clients':
            data = this.clientMetrics;
            break;
        }
        
        return data.sort((a, b) => {
          if (this.selectedMetric === 'hours') return b.hours - a.hours;
          if (this.selectedMetric === 'cost') return b.cost - a.cost;
          return b.entries - a.entries;
        });
      }
      
      getViewTitle() {
        switch (this.selectedView) {
          case 'users': return '👥 Team Member Performance';
          case 'projects': return '📋 Project Analysis';
          case 'clients': return '🏢 Client Analysis';
          default: return 'Analysis';
        }
      }
      
      renderItem(item, index) {
        const maxHours = Math.max(...this.getSortedData().map(d => d.hours));
        const progressWidth = maxHours > 0 ? (item.hours / maxHours) * 100 : 0;
        
        return `
          <div class="p-6 hover:bg-gray-50 transition-colors">
            <div class="flex items-center justify-between">
              <div class="flex-1">
                <h4 class="text-lg font-medium text-gray-900">${item.name}</h4>
                ${this.selectedView === 'projects' ? `<p class="text-sm text-gray-600">Client: ${item.client}</p>` : ''}
                ${this.selectedView === 'clients' ? `<p class="text-sm text-gray-600">${item.projectCount} projects</p>` : ''}
                ${this.selectedView === 'users' ? `<p class="text-sm text-gray-600">${item.email}</p>` : ''}
              </div>
              
              <div class="flex space-x-6 text-sm">
                <div class="text-center">
                  <p class="text-2xl font-bold text-gray-900">
                    ${this.selectedMetric === 'hours' ? Math.round(item.hours) : 
                      this.selectedMetric === 'cost' ? (this.canViewFinancialData ? `$${Math.round(item.cost).toLocaleString()}` : '***') :
                      item.entries}
                  </p>
                  <p class="text-xs text-gray-500">
                    ${this.selectedMetric === 'hours' ? 'hours' : 
                     this.selectedMetric === 'cost' ? 'cost' : 'entries'}
                  </p>
                </div>
                
                ${this.selectedView === 'users' ? `
                  <div class="text-center">
                    <p class="text-lg font-semibold text-gray-700">
                      ${Math.round(item.manualEntries)}/${Math.round(item.timerEntries)}
                    </p>
                    <p class="text-xs text-gray-500">manual/timer</p>
                  </div>
                ` : ''}
              </div>
            </div>
            
            <!-- Progress bar -->
            <div class="mt-4">
              <div class="flex justify-between text-xs text-gray-500 mb-1">
                <span>Hours: ${Math.round(item.hours)}</span>
                ${this.canViewFinancialData ? `<span>Cost: $${Math.round(item.cost).toLocaleString()}</span>` : ''}
                <span>Entries: ${item.entries}</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div 
                  class="bg-blue-600 h-2 rounded-full transition-all duration-300"
                  style="width: ${Math.min(100, progressWidth)}%"
                ></div>
              </div>
            </div>
          </div>
        `;
      }
      
      bindEvents() {
        this.container.addEventListener('click', (e) => {
          if (e.target.dataset.view) {
            this.selectedView = e.target.dataset.view;
            this.render();
            this.bindEvents();
          } else if (e.target.dataset.metric) {
            this.selectedMetric = e.target.dataset.metric;
            this.render();
            this.bindEvents();
          }
        });
      }
    }

    // Initialize the enhanced dashboard when the page loads
    document.addEventListener('DOMContentLoaded', () => {
      const container = document.getElementById('enhanced-dashboard-widgets');
      if (container) {
        new EnhancedDashboardWidgets(container);
      }
    });
  </script>
</AdminLayout>
