---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { teams, teamMembers as teamMembersTable, projects, clients, users, taskNotes, taskDiscussions, taskFiles, taskLinks, tasks, taskAssignments, timeEntries } from '../../../db/schema';
import { eq, and, desc, count, sql } from 'drizzle-orm';
import { getSessionUser } from '../../../utils/session';

// Get current user
const currentUser = await getSessionUser(Astro);
if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'developer')) {
  return Astro.redirect('/login');
}

// Debug: Log the raw parameter
console.log('Raw ID parameter:', Astro.params.id);

const collaborationId = parseInt(Astro.params.id!);

// Debug: Log the parsed ID
console.log('Parsed collaboration ID:', collaborationId);

// Validate that the ID is a valid number
if (isNaN(collaborationId)) {
  console.log('Invalid collaboration ID, redirecting to collaborations list');
  return Astro.redirect('/admin/collaborations');
}

// Get collaboration details
const collaboration = await db.query.teams.findFirst({
  where: eq(teams.id, collaborationId),
  with: {
    creator: true,
    members: {
      with: {
        user: true
      }
    }
  }
});

// Debug: Log the collaboration data
console.log('Collaboration data:', {
  id: collaboration?.id,
  name: (collaboration as any)?.name,
  description: (collaboration as any)?.description,
  creator: (collaboration as any)?.creator?.name,
  memberCount: (collaboration as any)?.members?.length
});

if (!collaboration) {
  return Astro.redirect('/admin/collaborations');
}

// Get project details if this collaboration is linked to a project
let projectDetails: any = null;
let projectTasks: any[] = [];

// Get project through direct team.project relationship
if (collaboration.projectId) {
  projectDetails = await db.query.projects.findFirst({
    where: eq(projects.id, collaboration.projectId),
    with: {
      client: true
    }
  });
  
  console.log('Found linked project through direct relationship:', {
    id: projectDetails?.id,
    name: projectDetails?.name,
    client: projectDetails?.client?.name
  });
} else if (collaboration.name.includes(' - ')) {
  // Fallback: try to extract project name from collaboration name
  const projectName = collaboration.name.split(' - ')[1];
  console.log('Looking for project with name:', projectName);
  
  projectDetails = await db.query.projects.findFirst({
    where: eq(projects.name, projectName),
    with: {
      client: true
    }
  });
  
  console.log('Found project:', {
    id: projectDetails?.id,
    name: projectDetails?.name,
    client: projectDetails?.client?.name
  });
}
  
  // Get tasks for this project (excluding system-generated "General" tasks)
  if (projectDetails) {
    try {
      projectTasks = await db.query.tasks.findMany({
        where: and(
          eq(tasks.projectId, projectDetails.id),
          eq(tasks.archived, false),
          eq(tasks.isSystem, false) // Exclude system-generated tasks like "General"
        ),
        orderBy: [desc(tasks.createdAt)]
      });
    } catch (error) {
      console.log('Error fetching tasks for project:', projectDetails.id, error.message);
      projectTasks = []; // Set empty array if query fails
    }
    
    // Get task assignments separately
    for (const task of projectTasks) {
      try {
        const assignments = await db.query.taskAssignments.findMany({
          where: eq(taskAssignments.taskId, task.id),
          with: {
            user: true
          }
        });
        task.assignments = assignments;
      } catch (error) {
        console.log('Error fetching assignments for task:', task.id, error.message);
        task.assignments = []; // Set empty array if query fails
      }
    }
  }

// Get team members
const teamMembers = (collaboration as any).members.map((member: any) => ({
  id: member.user.id,
  name: member.user.name,
  email: member.user.email,
  role: member.role,
  joinedAt: member.joinedAt
}));

// Get recent notes (mock data for now - will be replaced with real data)
const recentNotes = [
  {
    id: 1,
    title: "Project Kickoff Notes",
    content: "Outlined the QA checklist and assigned owners for each module. Please review before handoff.",
    author: "Priya Shah",
    createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago
    authorAvatar: "PS"
  }
];

// Get recent discussions (mock data for now)
const recentDiscussions = [
  {
    id: 1,
    content: "Should we move the onboarding tooltip to appear after the user creates the first task?",
    author: "Mark Chen",
    createdAt: new Date(Date.now() - 3 * 60 * 60 * 1000), // 3 hours ago
    authorAvatar: "MC",
    replies: [
      {
        id: 2,
        content: "Yes, that reduces cognitive load on first run. Let's A/B test it this week.",
        author: "Alex Rivera",
        createdAt: new Date(Date.now() - 1 * 60 * 60 * 1000), // 1 hour ago
        authorAvatar: "AR"
      }
    ]
  },
  {
    id: 3,
    content: "Sharing final icons for review.",
    author: "Lina Gomez",
    createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000), // Yesterday
    authorAvatar: "LG",
    replies: []
  }
];

// Get recent files and links (mock data for now)
const recentFiles = [
  {
    id: 1,
    name: "Requirements v3.pdf",
    type: "file",
    author: "Priya",
    createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago
    size: "1.2MB"
  }
];

const recentLinks = [
  {
    id: 1,
    title: "Figma Board",
    url: "https://figma.com/design/example",
    type: "link",
    author: "Mark",
    createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago
  }
];

// Calculate total time tracked for the project
let totalTimeTracked = "0h";
let dueDate = "No due date";

if (projectDetails) {
  // Get time entries for this project with same filters as dashboard
  const projectTimeEntries = await db.query.timeEntries.findMany({
    where: and(
      eq(timeEntries.projectId, projectDetails.id),
      // Exclude ongoing timers (same as dashboard)
      sql`NOT (${timeEntries.startTime} IS NOT NULL AND ${timeEntries.endTime} IS NULL AND ${timeEntries.durationManual} IS NULL)`
    ),
    with: {
      user: true,
      project: true
    }
  });
  
  // Calculate total hours
  let totalSeconds = 0;
  for (const entry of projectTimeEntries) {
    if (entry.durationManual) {
      // Manual duration entry (stored in seconds)
      totalSeconds += entry.durationManual;
    } else if (entry.startTime && entry.endTime) {
      // Timer-based entry
      const start = new Date(entry.startTime);
      const end = new Date(entry.endTime);
      const durationMs = end.getTime() - start.getTime();
      const durationSeconds = Math.floor(durationMs / 1000);
      totalSeconds += durationSeconds;
    }
  }
  
  // Convert to hours and format
  const totalHours = Math.floor(totalSeconds / 3600);
  const remainingSeconds = totalSeconds % 3600;
  const remainingMinutes = Math.floor(remainingSeconds / 60);
  
  if (totalHours > 0) {
    totalTimeTracked = `${totalHours}h${remainingMinutes > 0 ? ` ${remainingMinutes}m` : ''}`;
  } else if (remainingMinutes > 0) {
    totalTimeTracked = `${remainingMinutes}m`;
  }
  
  console.log('Time tracking calculation:', {
    projectId: projectDetails.id,
    projectName: projectDetails.name,
    totalEntries: projectTimeEntries.length,
    totalSeconds,
    totalHours,
    remainingMinutes,
    formattedTime: totalTimeTracked,
    entries: projectTimeEntries.map(entry => ({
      id: entry.id,
      durationManual: entry.durationManual,
      startTime: entry.startTime,
      endTime: entry.endTime,
      hasManual: !!entry.durationManual,
      hasTimer: !!(entry.startTime && entry.endTime)
    }))
  });
}
---

<AdminLayout title={`${collaboration.name} - Collaboration`} currentPage="collaborations">
  <div class="flex h-full">
    <!-- Left Sidebar -->
    <div class="w-1/4 bg-white border-r border-gray-200 p-6 rounded-xl">
      <!-- Project Overview Card -->
      <div class="bg-white rounded-lg border border-gray-200 p-4 mb-6">
        <div class="flex flex-col items-start justify-between mb-3">
          <div class="flex justify-between items-start w-full mb-3">
            
            <!-- Team Members -->
            <div class="flex items-center">
              <div class="flex -space-x-2">
                {teamMembers.slice(0, 4).map((member: any, index: number) => (
                  <div 
                    class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-xs font-medium text-gray-700 border-2 border-white relative group cursor-pointer"
                    title={member.name}
                  >
                    {member.name.charAt(0).toUpperCase()}
                    <!-- Tooltip -->
                    <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10">
                      {member.name}
                      <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
                    </div>
                  </div>
                ))}
                {teamMembers.length > 4 && (
                  <div 
                    class="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium text-gray-600 border-2 border-white relative group cursor-pointer"
                    title={teamMembers.slice(4).map((member: any) => member.name).join(', ')}
                  >
                    +{teamMembers.length - 4}
                    <!-- Tooltip -->
                    <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-10">
                      <div class="flex flex-col space-y-1">
                        {teamMembers.slice(4).map((member: any) => (
                          <div class="whitespace-nowrap">{member.name}</div>
                        ))}
                      </div>
                      <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
                    </div>
                  </div>
                )}
              </div>
            </div>
            <div class="inline-flex items-center rounded-full bg-green-400 text-green-800 h-4 w-4">
              
            </div>
          </div>
          <div class="flex items-start w-full">
            <h2 class="text-lg font-semibold text-gray-900">{(collaboration as any).name}</h2>
          </div>
        </div>
        
        <div class="space-y-2 mb-4">
          <div class="flex items-center text-sm text-gray-600">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            {totalTimeTracked} tracked
          </div>
        </div>

        
      </div>


      <!-- Filters -->
      <div>
        <h3 class="text-sm font-semibold text-gray-900 mb-3">Filters</h3>
        <div class="space-y-2">
          <select id="priorityFilter" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="all">Priority: All</option>
            <option value="low">Low</option>
            <option value="regular">Regular</option>
            <option value="high">High</option>
            <option value="urgent">Urgent</option>
          </select>
          <select id="statusFilter" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="all">Status: All</option>
            <option value="pending">Pending</option>
            <option value="in_progress">In Progress</option>
            <option value="completed">Completed</option>
            <option value="cancelled">Cancelled</option>
          </select>
          <select id="dueFilter" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="all">Due: All</option>
            <option value="overdue">Overdue</option>
            <option value="due_today">Due Today</option>
            <option value="due_week">Due This Week</option>
            <option value="due_month">Due This Month</option>
            <option value="no_due_date">No Due Date</option>
          </select>
          
          <!-- Reset Filters Button -->
          <button id="resetFilters" class="w-full px-3 py-2 text-sm bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium rounded-md transition-colors duration-200 border border-gray-300">
            Reset Filters
          </button>
        </div>
      </div>
    </div>

    <!-- Main Content Area -->
    <div class="flex-1 p-6 pt-0">
      <!-- Header -->
      <div class="flex justify-between gap-4 items-center mb-6">
        <div class="flex items-center flex-1">
          <!-- Breadcrumbs -->
          <nav class="flex items-center space-x-2 text-sm">
            <a href="/admin/collaborations" class="text-gray-500 hover:text-gray-700 underline">Collaborations</a>
            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
            {projectDetails ? (
              <span class="text-gray-500">{projectDetails.client?.name || 'Unknown Client'} - {projectDetails.name}</span>
            ) : (
              <span class="text-gray-500">{(collaboration as any).name}</span>
            )}
          </nav>
        </div>
        <div class="flex items-center space-x-3">
          <button class="inline-flex items-center px-4 py-2 bg-white hover:bg-gray-50 text-gray-700 font-medium rounded-lg border border-gray-300 transition-all duration-200">
            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 512 512">
              <path d="M435.95,287.525c32.51,0,58.87-26.343,58.87-58.853c0-32.51-26.361-58.871-58.87-58.871 c-32.502,0-58.863,26.361-58.863,58.871C377.088,261.182,403.448,287.525,435.95,287.525z"></path>
              <path d="M511.327,344.251c-2.623-15.762-15.652-37.822-25.514-47.677c-1.299-1.306-7.105-1.608-8.673-0.636 c-11.99,7.374-26.074,11.714-41.19,11.714c-15.099,0-29.184-4.34-41.175-11.714c-1.575-0.972-7.373-0.67-8.672,0.636 c-2.757,2.757-5.765,6.427-8.698,10.683c7.935,14.94,14.228,30.81,16.499,44.476c2.27,13.7,1.533,26.67-2.138,38.494 c13.038,4.717,28.673,6.787,44.183,6.787C476.404,397.014,517.804,382.987,511.327,344.251z"></path>
              <path d="M254.487,262.691c52.687,0,95.403-42.716,95.403-95.402c0-52.67-42.716-95.386-95.403-95.386 c-52.678,0-95.378,42.716-95.378,95.386C159.109,219.975,201.808,262.691,254.487,262.691z"></path>
              <path d="M335.269,277.303c-2.07-2.061-11.471-2.588-14.027-1.006c-19.448,11.966-42.271,18.971-66.755,18.971 c-24.466,0-47.3-7.005-66.738-18.971c-2.555-1.583-11.956-1.055-14.026,1.006c-16.021,16.004-37.136,51.782-41.384,77.288 c-10.474,62.826,56.634,85.508,122.148,85.508c65.532,0,132.639-22.682,122.165-85.508 C372.404,329.085,351.289,293.307,335.269,277.303z"></path>
              <path d="M76.049,287.525c32.502,0,58.862-26.343,58.862-58.853c0-32.51-26.36-58.871-58.862-58.871 c-32.511,0-58.871,26.361-58.871,58.871C17.178,261.182,43.538,287.525,76.049,287.525z"></path>
              <path d="M115.094,351.733c2.414-14.353,9.225-31.253,17.764-46.88c-2.38-3.251-4.759-6.083-6.955-8.279 c-1.299-1.306-7.097-1.608-8.672-0.636c-11.991,7.374-26.076,11.714-41.182,11.714c-15.108,0-29.202-4.34-41.183-11.714 c-1.568-0.972-7.382-0.67-8.681,0.636c-9.887,9.854-22.882,31.915-25.514,47.677c-6.468,38.736,34.924,52.762,75.378,52.762 c14.437,0,29.016-1.777,41.459-5.84C113.587,379.108,112.757,365.835,115.094,351.733z"></path>
            </svg>
            Manage Team
          </button>
          <button class="inline-flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-all duration-200">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            New Task
          </button>
        </div>
      </div>

      <!-- Tasks Table -->
      <div class="bg-white rounded-lg border border-gray-200 shadow-sm">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-semibold text-gray-900">Tasks</h2>
        </div>
        
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Task</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Assignee</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Due</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              {projectTasks.length > 0 ? projectTasks.map((task: any) => (
                <tr class="hover:bg-gray-50">
                  <td class="px-6 py-4 whitespace-nowrap">
                    <a href={`/admin/collaborations/${collaborationId}/task/${task.id}`} class="block hover:bg-gray-50 rounded-md p-2 -m-2 transition-colors duration-200">
                      <div class="flex items-center">
                        <div class="flex-shrink-0 h-10 w-10">
                          <div class="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
                            <svg class="h-5 w-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                            </svg>
                          </div>
                        </div>
                        <div class="ml-4">
                          <div class="text-sm font-medium text-gray-900">
                            {task.name}
                          </div>
                          {task.description && (
                            <div class="text-sm text-gray-500 max-w-xs truncate" title={task.description}>{task.description}</div>
                          )}
                        </div>
                      </div>
                    </a>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      {task.assignments && task.assignments.length > 0 ? (
                        <div class="flex -space-x-2">
                          {task.assignments.slice(0, 3).map((assignment: any) => (
                            <div 
                              class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-xs font-medium text-gray-700 border-2 border-white relative group cursor-pointer"
                              title={assignment.user.name}
                            >
                              {assignment.user.name.charAt(0).toUpperCase()}
                              <!-- Tooltip -->
                              <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10">
                                {assignment.user.name}
                                <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
                              </div>
                            </div>
                          ))}
                          {task.assignments.length > 3 && (
                            <div 
                              class="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium text-gray-600 border-2 border-white relative group cursor-pointer"
                              title={task.assignments.slice(3).map((assignment: any) => assignment.user.name).join(', ')}
                            >
                              +{task.assignments.length - 3}
                              <!-- Tooltip -->
                              <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-10">
                                <div class="flex flex-col space-y-1">
                                  {task.assignments.slice(3).map((assignment: any) => (
                                    <div class="whitespace-nowrap">{assignment.user.name}</div>
                                  ))}
                                </div>
                                <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
                              </div>
                            </div>
                          )}
                        </div>
                      ) : (
                        <span class="text-sm text-gray-500">Unassigned</span>
                      )}
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {task.dueDate ? new Date(task.dueDate).toLocaleDateString('en-US', { 
                      year: 'numeric', 
                      month: '2-digit', 
                      day: '2-digit',
                      timeZone: 'UTC'
                    }) : 'No due date'}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      task.priority === 'urgent' ? 'bg-red-100 text-red-800' :
                      task.priority === 'high' ? 'bg-orange-100 text-orange-800' :
                      task.priority === 'regular' ? 'bg-blue-100 text-blue-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      task.status === 'completed' ? 'bg-green-100 text-green-800' :
                      task.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :
                      task.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {task.status.replace('_', ' ').charAt(0).toUpperCase() + task.status.replace('_', ' ').slice(1)}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <button 
                      class="edit-task-btn inline-flex items-center px-3 py-1.5 bg-gray-600 hover:bg-gray-700 text-white text-xs font-medium rounded-md transition-colors duration-200"
                      data-task-id={task.id}
                      data-task-name={task.name}
                      data-task-description={task.description || ''}
                      data-task-status={task.status}
                      data-task-priority={task.priority}
                      data-task-due-date={task.dueDate ? new Date(task.dueDate).toISOString().split('T')[0] : ''}
                    >
                      <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                      </svg>
                      Edit
                    </button>
                  </td>
                </tr>
              )) : (
                <tr>
                  <td colspan="6" class="px-6 py-12 text-center">
                    <div class="flex flex-col items-center space-y-4">
                      <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center">
                        <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                        </svg>
                      </div>
                      <div class="text-center">
                        <h3 class="text-lg font-medium text-gray-900 mb-2">
                          {projectDetails ? 'No collaboration tasks yet' : 'No project linked to this collaboration'}
                        </h3>
                        <p class="text-sm text-gray-500 mb-4">
                          {projectDetails ? 'Create your first task to start collaborating with your team.' : 'Link this collaboration to a project to manage tasks.'}
                        </p>
                        {projectDetails && (
                          <button class="inline-flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-all duration-200">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                            Create First Task
                          </button>
                        )}
                      </div>
                    </div>
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>

    </div>
  </div>
</AdminLayout>

<!-- Notification System -->
<div id="notificationContainer" class="fixed w-full max-w-md top-4 right-4 z-50 space-y-2">
  <!-- Notifications will be dynamically added here -->
</div>

<!-- Team Management Modal -->
<div id="teamModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
  <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-2/3 lg:w-1/2 shadow-lg rounded-md bg-white">
    <div class="mt-3">
      <!-- Modal Header -->
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-medium text-gray-900">Manage Team Members</h3>
        <button id="closeTeamModal" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Current Team Members -->
      <div class="mb-6">
        <h4 class="text-sm font-medium text-gray-700 mb-3">Current Team Members</h4>
        <div id="currentMembersList" class="space-y-2 max-h-40 overflow-y-auto border border-gray-200 rounded-md p-3">
          <!-- Current members will be populated here -->
        </div>
      </div>

      <!-- Add New Members -->
      <div class="mb-6">
        <h4 class="text-sm font-medium text-gray-700 mb-3">Add New Members</h4>
        <div class="flex space-x-2 mb-3">
          <div class="flex-1 relative">
            <input 
              type="text" 
              id="userSearch" 
              placeholder="Search users by name or email..."
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <div id="searchSpinner" class="absolute right-3 top-1/2 transform -translate-y-1/2 hidden">
              <svg class="animate-spin h-4 w-4 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </div>
          </div>
          <button id="searchUsers" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md transition-colors duration-200">
            Search
          </button>
        </div>
        <div id="searchResults" class="space-y-2 max-h-40 overflow-y-auto border border-gray-200 rounded-md p-3 hidden">
          <!-- Search results will be populated here -->
        </div>
      </div>

      <!-- Modal Actions -->
      <div class="flex items-center justify-end space-x-3 pt-4 border-t">
        <button 
          type="button" 
          id="cancelTeamModal" 
          class="px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium rounded-md transition-colors duration-200"
        >
          Cancel
        </button>
        <button 
          type="button" 
          id="saveTeamChanges" 
          class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md transition-colors duration-200"
        >
          Save Changes
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Task Edit Modal -->
<div id="editTaskModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
  <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-2/3 lg:w-1/2 shadow-lg rounded-md bg-white">
    <div class="mt-3">
      <!-- Modal Header -->
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-medium text-gray-900">Edit Task</h3>
        <button id="closeEditTaskModal" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Modal Form -->
      <form id="editTaskForm" class="space-y-4">
        <!-- Task Name -->
        <div>
          <label for="editTaskName" class="block text-sm font-medium text-gray-700 mb-1">Task Name *</label>
          <input 
            type="text" 
            id="editTaskName" 
            name="name" 
            required 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Enter task name"
          />
        </div>

        <!-- Description -->
        <div>
          <label for="editTaskDescription" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
          <textarea 
            id="editTaskDescription" 
            name="description" 
            rows="3"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Enter task description"
          ></textarea>
        </div>

        <!-- Status and Priority Row -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <!-- Status -->
          <div>
            <label for="editTaskStatus" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
            <select 
              id="editTaskStatus" 
              name="status" 
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="pending">Pending</option>
              <option value="in_progress">In Progress</option>
              <option value="completed">Completed</option>
              <option value="cancelled">Cancelled</option>
            </select>
          </div>

          <!-- Priority -->
          <div>
            <label for="editTaskPriority" class="block text-sm font-medium text-gray-700 mb-1">Priority</label>
            <select 
              id="editTaskPriority" 
              name="priority" 
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="low">Low</option>
              <option value="regular">Regular</option>
              <option value="high">High</option>
              <option value="urgent">Urgent</option>
            </select>
          </div>
        </div>

        <!-- Due Date -->
        <div>
          <label for="editTaskDueDate" class="block text-sm font-medium text-gray-700 mb-1">Due Date</label>
          <input 
            type="date" 
            id="editTaskDueDate" 
            name="dueDate" 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <!-- Current Assignees -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Current Assignees</label>
          <div id="editCurrentAssignees" class="space-y-2 max-h-32 overflow-y-auto border border-gray-200 rounded-md p-3">
            <!-- Current assignees will be populated here -->
          </div>
        </div>

        <!-- Add New Assignees -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Add New Assignees</label>
          <div class="flex space-x-2 mb-3">
            <div class="flex-1 relative">
              <input 
                type="text" 
                id="editUserSearch" 
                placeholder="Search users by name or email..."
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <div id="editSearchSpinner" class="absolute right-3 top-1/2 transform -translate-y-1/2 hidden">
                <svg class="animate-spin h-4 w-4 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              </div>
            </div>
            <button id="editSearchUsers" class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-md transition-colors duration-200">
              Search
            </button>
          </div>
          <div id="editSearchResults" class="space-y-2 max-h-40 overflow-y-auto border border-gray-200 rounded-md p-3 hidden">
            <!-- Search results will be populated here -->
          </div>
        </div>

        <!-- Modal Actions -->
        <div class="flex items-center justify-between pt-4 border-t">
          <button 
            type="button" 
            id="deleteTaskBtn" 
            class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-medium rounded-md transition-colors duration-200"
          >
            <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
            Delete Task
          </button>
          <div class="flex space-x-3">
            <button 
              type="button" 
              id="cancelEditTaskModal" 
              class="px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium rounded-md transition-colors duration-200"
            >
              Cancel
            </button>
            <button 
              type="submit" 
              class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-md transition-colors duration-200"
            >
              Save Changes
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Task Creation Modal -->
<div id="taskModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
  <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-2/3 lg:w-1/2 shadow-lg rounded-md bg-white">
    <div class="mt-3">
      <!-- Modal Header -->
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-medium text-gray-900">Create New Task</h3>
        <button id="closeTaskModal" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Modal Form -->
      <form id="taskForm" class="space-y-4">
        <!-- Task Name -->
        <div>
          <label for="taskName" class="block text-sm font-medium text-gray-700 mb-1">Task Name *</label>
          <input 
            type="text" 
            id="taskName" 
            name="name" 
            required 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Enter task name"
          />
        </div>

        <!-- Description -->
        <div>
          <label for="taskDescription" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
          <textarea 
            id="taskDescription" 
            name="description" 
            rows="3"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Enter task description"
          ></textarea>
        </div>

        <!-- Status and Priority Row -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <!-- Status -->
          <div>
            <label for="taskStatus" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
            <select 
              id="taskStatus" 
              name="status" 
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="pending">Pending</option>
              <option value="in_progress">In Progress</option>
              <option value="completed">Completed</option>
              <option value="cancelled">Cancelled</option>
            </select>
          </div>

          <!-- Priority -->
          <div>
            <label for="taskPriority" class="block text-sm font-medium text-gray-700 mb-1">Priority</label>
            <select 
              id="taskPriority" 
              name="priority" 
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="low">Low</option>
              <option value="regular" selected>Regular</option>
              <option value="high">High</option>
              <option value="urgent">Urgent</option>
            </select>
          </div>
        </div>

        <!-- Due Date -->
        <div>
          <label for="taskDueDate" class="block text-sm font-medium text-gray-700 mb-1">Due Date</label>
          <input 
            type="date" 
            id="taskDueDate" 
            name="dueDate" 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <!-- Assignees -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Assign to Team Members</label>
          <div id="assigneeList" class="space-y-2 max-h-32 overflow-y-auto border border-gray-200 rounded-md p-3">
            <!-- Team members will be populated here -->
          </div>
        </div>

        <!-- Modal Actions -->
        <div class="flex items-center justify-end space-x-3 pt-4 border-t">
          <button 
            type="button" 
            id="cancelTaskModal" 
            class="px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium rounded-md transition-colors duration-200"
          >
            Cancel
          </button>
          <button 
            type="submit" 
            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md transition-colors duration-200"
          >
            Create Task
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Data for client-side JavaScript -->
<script define:vars={{ 
  collaborationId: collaborationId,
  teamMembersData: teamMembers.map((member: any) => ({
    id: member.id,
    name: member.name,
    email: member.email
  })), 
  projectDetailsData: projectDetails ? {
    id: projectDetails.id,
    name: projectDetails.name
  } : null, 
  tasksData: projectTasks.map((task: any) => ({
    id: task.id,
    name: task.name,
    description: task.description,
    status: task.status,
    priority: task.priority,
    dueDate: task.dueDate,
    assignments: task.assignments || [],
    createdAt: task.createdAt
  }))
}}>
  // Notification system
  function showNotification(message, type = 'success', duration = 5000) {
    const container = document.getElementById('notificationContainer');
    if (!container) return;

    const notification = document.createElement('div');
    const notificationId = 'notification-' + Date.now();
    
    const bgColor = type === 'success' ? 'bg-green-500' : 
                   type === 'error' ? 'bg-red-500' : 
                   type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500';
    
    const icon = type === 'success' ? 
      '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>' :
      type === 'error' ?
      '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path></svg>' :
      '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg>';

    notification.id = notificationId;
    notification.className = `max-w-sm w-full ${bgColor} shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden transform transition-all duration-300 ease-in-out translate-x-full opacity-0`;
    notification.innerHTML = `
      <div class="p-4">
        <div class="flex items-start">
          <div class="flex-shrink-0">
            ${icon}
          </div>
          <div class="ml-3 w-0 flex-1 pt-0.5">
            <p class="text-sm font-medium text-white">
              ${message}
            </p>
          </div>
          <div class="ml-4 flex-shrink-0 flex">
            <button class="bg-white rounded-md inline-flex text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" onclick="removeNotification('${notificationId}')">
              <span class="sr-only">Close</span>
              <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
    `;

    container.appendChild(notification);

    // Trigger animation
    setTimeout(() => {
      notification.classList.remove('translate-x-full', 'opacity-0');
      notification.classList.add('translate-x-0', 'opacity-100');
    }, 10);

    // Auto remove after duration
    if (duration > 0) {
      setTimeout(() => {
        removeNotification(notificationId);
      }, duration);
    }
  }

  function removeNotification(notificationId) {
    const notification = document.getElementById(notificationId);
    if (!notification) return;

    notification.classList.remove('translate-x-0', 'opacity-100');
    notification.classList.add('translate-x-full', 'opacity-0');

    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }

  // Make functions globally available
  window.showNotification = showNotification;
  window.removeNotification = removeNotification;

  // Add any client-side functionality here
  document.addEventListener('DOMContentLoaded', function() {
    const taskModal = document.getElementById('taskModal');
    const taskForm = document.getElementById('taskForm');
    const closeTaskModal = document.getElementById('closeTaskModal');
    const cancelTaskModal = document.getElementById('cancelTaskModal');
    const assigneeList = document.getElementById('assigneeList');
    
    // Edit task modal elements
    const editTaskModal = document.getElementById('editTaskModal');
    const editTaskForm = document.getElementById('editTaskForm');
    const closeEditTaskModal = document.getElementById('closeEditTaskModal');
    const cancelEditTaskModal = document.getElementById('cancelEditTaskModal');
    const editCurrentAssignees = document.getElementById('editCurrentAssignees');
    const editUserSearch = document.getElementById('editUserSearch');
    const editSearchUsers = document.getElementById('editSearchUsers');
    const editSearchResults = document.getElementById('editSearchResults');
    const editSearchSpinner = document.getElementById('editSearchSpinner');
    const deleteTaskBtn = document.getElementById('deleteTaskBtn');
    
    // Team management modal elements
    const teamModal = document.getElementById('teamModal');
    const closeTeamModal = document.getElementById('closeTeamModal');
    const cancelTeamModal = document.getElementById('cancelTeamModal');
    const currentMembersList = document.getElementById('currentMembersList');
    const userSearch = document.getElementById('userSearch');
    const searchUsers = document.getElementById('searchUsers');
    const searchResults = document.getElementById('searchResults');
    const searchSpinner = document.getElementById('searchSpinner');
    const saveTeamChanges = document.getElementById('saveTeamChanges');
    
    // Filter elements
    const priorityFilter = document.getElementById('priorityFilter');
    const statusFilter = document.getElementById('statusFilter');
    const dueFilter = document.getElementById('dueFilter');
    const resetFiltersBtn = document.getElementById('resetFilters');
    const tasksTableBody = document.querySelector('tbody');

    if (!taskModal || !taskForm || !closeTaskModal || !cancelTaskModal || !assigneeList) {
      console.error('Required modal elements not found');
      return;
    }

    if (!editTaskModal || !editTaskForm || !closeEditTaskModal || !cancelEditTaskModal || !editCurrentAssignees || !editUserSearch || !editSearchUsers || !editSearchResults || !deleteTaskBtn) {
      console.error('Required edit modal elements not found');
      return;
    }

    if (!teamModal || !closeTeamModal || !cancelTeamModal || !currentMembersList || !userSearch || !searchUsers || !searchResults || !saveTeamChanges) {
      console.error('Required team modal elements not found');
      return;
    }

    // Populate assignee list
    function populateAssigneeList() {
      if (!assigneeList) return;
      assigneeList.innerHTML = '';
      teamMembersData.forEach((member) => {
        const assigneeItem = document.createElement('div');
        assigneeItem.className = 'flex items-center space-x-3';
        assigneeItem.innerHTML = `
          <input 
            type="checkbox" 
            id="assignee-${member.id}" 
            value="${member.id}" 
            class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
          />
          <label for="assignee-${member.id}" class="flex items-center space-x-2 cursor-pointer">
            <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-xs font-medium text-gray-700 relative group" title="${member.name}">
              ${member.name.charAt(0).toUpperCase()}
              <!-- Tooltip -->
              <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10">
                ${member.name}
                <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
              </div>
            </div>
            <div>
              <div class="text-sm font-medium text-gray-900">${member.name}</div>
              <div class="text-xs text-gray-500">${member.email}</div>
            </div>
          </label>
        `;
        assigneeList.appendChild(assigneeItem);
      });
    }

    // Team management functions
    function populateCurrentMembers() {
      if (!currentMembersList) return;
      currentMembersList.innerHTML = '';
      teamMembersData.forEach((member) => {
        const memberItem = document.createElement('div');
        memberItem.className = 'flex items-center justify-between p-2 bg-gray-50 rounded-md';
        memberItem.innerHTML = `
          <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-xs font-medium text-gray-700 relative group" title="${member.name}">
              ${member.name.charAt(0).toUpperCase()}
              <!-- Tooltip -->
              <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10">
                ${member.name}
                <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
              </div>
            </div>
            <div>
              <div class="text-sm font-medium text-gray-900">${member.name}</div>
              <div class="text-xs text-gray-500">${member.email}</div>
            </div>
          </div>
          <button 
            class="remove-member-btn text-red-600 hover:text-red-800 text-sm font-medium"
            data-member-id="${member.id}"
          >
            Remove
          </button>
        `;
        currentMembersList.appendChild(memberItem);
      });
    }

    // Debounce timer for search
    let searchTimeout;

    function searchUsersForTeam() {
      const searchTerm = userSearch.value.trim();
      if (!searchTerm) {
        searchResults.classList.add('hidden');
        if (searchSpinner) searchSpinner.classList.add('hidden');
        return;
      }

      // Clear previous timeout
      if (searchTimeout) {
        clearTimeout(searchTimeout);
      }

      // Show loading state
      if (searchSpinner) searchSpinner.classList.remove('hidden');
      searchResults.innerHTML = '<div class="text-center py-4 text-gray-500">Searching...</div>';
      searchResults.classList.remove('hidden');

      // Debounce the actual search
      searchTimeout = setTimeout(() => {
        // Search users via API
        fetch(`/api/admin/users/search?q=${encodeURIComponent(searchTerm)}`)
          .then(response => response.json())
          .then(data => {
            if (searchSpinner) searchSpinner.classList.add('hidden');
            if (data.success && data.users) {
              displaySearchResults(data.users);
            } else {
              searchResults.innerHTML = '<div class="text-center py-4 text-gray-500">No users found</div>';
            }
          })
          .catch(error => {
            console.error('Error searching users:', error);
            if (searchSpinner) searchSpinner.classList.add('hidden');
            searchResults.innerHTML = '<div class="text-center py-4 text-red-500">Error searching users</div>';
          });
      }, 300); // 300ms debounce delay
    }

    function displaySearchResults(users) {
      if (!searchResults) return;
      
      searchResults.innerHTML = '';
      
      if (users.length === 0) {
        searchResults.innerHTML = '<div class="text-center py-4 text-gray-500">No users found</div>';
        return;
      }

      users.forEach(user => {
        // Check if user is already a team member
        const isAlreadyMember = teamMembersData.some(member => member.id === user.id);
        
        const userItem = document.createElement('div');
        userItem.className = `flex items-center justify-between p-2 rounded-md cursor-pointer transition-colors duration-200 ${isAlreadyMember ? 'bg-gray-100 cursor-not-allowed' : 'bg-white hover:bg-blue-50 hover:border-blue-200 border border-transparent'}`;
        
        if (!isAlreadyMember) {
          userItem.setAttribute('data-user-id', user.id);
          userItem.setAttribute('data-user-name', user.name);
          userItem.setAttribute('data-user-email', user.email);
        }
        
        userItem.innerHTML = `
          <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-xs font-medium text-gray-700 relative group" title="${user.name}">
              ${user.name.charAt(0).toUpperCase()}
              <!-- Tooltip -->
              <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10">
                ${user.name}
                <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
              </div>
            </div>
            <div>
              <div class="text-sm font-medium text-gray-900">${user.name}</div>
              <div class="text-xs text-gray-500">${user.email}</div>
            </div>
          </div>
          ${isAlreadyMember ? 
            '<span class="text-sm text-gray-500">Already a member</span>' :
            '<span class="text-sm text-blue-600 font-medium">Click to add</span>'
          }
        `;
        searchResults.appendChild(userItem);
      });
    }

    function showTeamModal() {
      if (!teamModal) return;
      teamModal.classList.remove('hidden');
      populateCurrentMembers();
    }

    function hideTeamModal() {
      if (!teamModal) return;
      teamModal.classList.add('hidden');
      userSearch.value = '';
      searchResults.classList.add('hidden');
    }

    // Show modal
    function showTaskModal() {
      if (!projectDetailsData) {
        showNotification('No project linked to this collaboration. Please link a project first.', 'warning');
        return;
      }
      if (!taskModal) return;
      taskModal.classList.remove('hidden');
      populateAssigneeList();
    }

    // Hide modal
    function hideTaskModal() {
      if (!taskModal || !taskForm) return;
      taskModal.classList.add('hidden');
      taskForm.reset();
    }

    // Edit task modal functions
    let currentEditTaskId = null;
    let currentEditAssignees = [];

    function showEditTaskModal(taskId) {
      if (!editTaskModal) return;
      
      currentEditTaskId = taskId;
      const task = tasksData.find(t => t.id === taskId);
      if (!task) return;
      
      // Populate form fields
      document.getElementById('editTaskName').value = task.name;
      document.getElementById('editTaskDescription').value = task.description || '';
      document.getElementById('editTaskStatus').value = task.status;
      document.getElementById('editTaskPriority').value = task.priority;
      document.getElementById('editTaskDueDate').value = task.dueDate ? new Date(task.dueDate).toISOString().split('T')[0] : '';
      
      // Load current assignees
      loadCurrentAssignees(taskId);
      
      editTaskModal.classList.remove('hidden');
    }

    function hideEditTaskModal() {
      if (!editTaskModal || !editTaskForm) return;
      editTaskModal.classList.add('hidden');
      editTaskForm.reset();
      editUserSearch.value = '';
      editSearchResults.classList.add('hidden');
      if (editSearchSpinner) editSearchSpinner.classList.add('hidden');
      currentEditTaskId = null;
      currentEditAssignees = [];
    }

    async function loadCurrentAssignees(taskId) {
      try {
        const response = await fetch(`/api/admin/tasks/${taskId}/assignments`);
        const assignments = await response.json();
        
        currentEditAssignees = assignments;
        populateEditCurrentAssignees();
      } catch (error) {
        console.error('Error loading current assignees:', error);
        currentEditAssignees = [];
        populateEditCurrentAssignees();
      }
    }

    function populateEditCurrentAssignees() {
      if (!editCurrentAssignees) return;
      editCurrentAssignees.innerHTML = '';
      
      if (currentEditAssignees.length === 0) {
        editCurrentAssignees.innerHTML = '<div class="text-center py-4 text-gray-500">No assignees</div>';
        return;
      }
      
      currentEditAssignees.forEach(assignment => {
        const assigneeItem = document.createElement('div');
        assigneeItem.className = 'flex items-center justify-between p-2 bg-gray-50 rounded-md';
        assigneeItem.innerHTML = `
          <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-xs font-medium text-gray-700 relative group" title="${assignment.userName}">
              ${assignment.userName.charAt(0).toUpperCase()}
              <!-- Tooltip -->
              <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10">
                ${assignment.userName}
                <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
              </div>
            </div>
            <div>
              <div class="text-sm font-medium text-gray-900">${assignment.userName}</div>
              <div class="text-xs text-gray-500">${assignment.userEmail}</div>
            </div>
          </div>
          <button 
            class="remove-assignee-btn text-red-600 hover:text-red-800 text-sm font-medium"
            data-user-id="${assignment.userId}"
          >
            Remove
          </button>
        `;
        
        // Add direct event listener to the button
        const removeButton = assigneeItem.querySelector('.remove-assignee-btn');
        if (removeButton) {
          removeButton.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            const userId = this.getAttribute('data-user-id');
            removeAssigneeFromTask(userId);
          });
        }
        
        editCurrentAssignees.appendChild(assigneeItem);
      });
    }

    // Debounce timer for edit search
    let editSearchTimeout;

    function searchUsersForEditTask() {
      const searchTerm = editUserSearch.value.trim();
      if (!searchTerm) {
        editSearchResults.classList.add('hidden');
        if (editSearchSpinner) editSearchSpinner.classList.add('hidden');
        return;
      }

      // Clear previous timeout
      if (editSearchTimeout) {
        clearTimeout(editSearchTimeout);
      }

      // Show loading state
      if (editSearchSpinner) editSearchSpinner.classList.remove('hidden');
      editSearchResults.innerHTML = '<div class="text-center py-4 text-gray-500">Searching...</div>';
      editSearchResults.classList.remove('hidden');

      // Debounce the actual search
      editSearchTimeout = setTimeout(() => {
        // Search users via API
        fetch(`/api/admin/users/search?q=${encodeURIComponent(searchTerm)}`)
          .then(response => response.json())
          .then(data => {
            if (editSearchSpinner) editSearchSpinner.classList.add('hidden');
            if (data.success && data.users) {
              displayEditSearchResults(data.users);
            } else {
              editSearchResults.innerHTML = '<div class="text-center py-4 text-gray-500">No users found</div>';
            }
          })
          .catch(error => {
            console.error('Error searching users:', error);
            if (editSearchSpinner) editSearchSpinner.classList.add('hidden');
            editSearchResults.innerHTML = '<div class="text-center py-4 text-red-500">Error searching users</div>';
          });
      }, 300); // 300ms debounce delay
    }

    function displayEditSearchResults(users) {
      if (!editSearchResults) return;
      
      editSearchResults.innerHTML = '';
      
      if (users.length === 0) {
        editSearchResults.innerHTML = '<div class="text-center py-4 text-gray-500">No users found</div>';
        return;
      }

      users.forEach(user => {
        // Check if user is already assigned
        const isAlreadyAssigned = currentEditAssignees.some(assignment => assignment.userId === user.id);
        
        const userItem = document.createElement('div');
        userItem.className = `flex items-center justify-between p-2 rounded-md cursor-pointer transition-colors duration-200 ${isAlreadyAssigned ? 'bg-gray-100 cursor-not-allowed' : 'bg-white hover:bg-gray-50 hover:border-gray-200 border border-transparent'}`;
        
        if (!isAlreadyAssigned) {
          userItem.setAttribute('data-user-id', user.id);
          userItem.setAttribute('data-user-name', user.name);
          userItem.setAttribute('data-user-email', user.email);
        }
        
        userItem.innerHTML = `
          <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-xs font-medium text-gray-700 relative group" title="${user.name}">
              ${user.name.charAt(0).toUpperCase()}
              <!-- Tooltip -->
              <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10">
                ${user.name}
                <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
              </div>
            </div>
            <div>
              <div class="text-sm font-medium text-gray-900">${user.name}</div>
              <div class="text-xs text-gray-500">${user.email}</div>
            </div>
          </div>
          ${isAlreadyAssigned ? 
            '<span class="text-sm text-gray-500">Already assigned</span>' :
            '<span class="text-sm text-gray-600 font-medium">Click to add</span>'
          }
        `;
        editSearchResults.appendChild(userItem);
      });
    }

    // Handle new task buttons (both header and empty state)
    const newTaskButtons = document.querySelectorAll('button');
    newTaskButtons.forEach(button => {
      if (button.textContent?.includes('New Task') || button.textContent?.includes('Create First Task')) {
        button.addEventListener('click', showTaskModal);
      }
      if (button.textContent?.includes('Manage Team')) {
        button.addEventListener('click', showTeamModal);
      }
    });

    // Handle edit task buttons
    document.addEventListener('click', function(e) {
      if (e.target.classList.contains('edit-task-btn') || e.target.closest('.edit-task-btn')) {
        const button = e.target.classList.contains('edit-task-btn') ? e.target : e.target.closest('.edit-task-btn');
        const taskId = parseInt(button.getAttribute('data-task-id'));
        showEditTaskModal(taskId);
      }
    });

    // Close modal handlers
    closeTaskModal.addEventListener('click', hideTaskModal);
    cancelTaskModal.addEventListener('click', hideTaskModal);
    
    // Edit task modal handlers
    closeEditTaskModal.addEventListener('click', hideEditTaskModal);
    cancelEditTaskModal.addEventListener('click', hideEditTaskModal);
    
    // Team modal handlers
    closeTeamModal.addEventListener('click', hideTeamModal);
    cancelTeamModal.addEventListener('click', hideTeamModal);

    // Close modal when clicking outside
    taskModal.addEventListener('click', function(e) {
      if (e.target === taskModal) {
        hideTaskModal();
      }
    });
    
    teamModal.addEventListener('click', function(e) {
      if (e.target === teamModal) {
        hideTeamModal();
      }
    });
    
    editTaskModal.addEventListener('click', function(e) {
      if (e.target === editTaskModal) {
        hideEditTaskModal();
      }
    });

    // Handle form submission
    taskForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(taskForm);
      const taskData = {
        name: formData.get('name'),
        description: formData.get('description'),
        status: formData.get('status'),
        priority: formData.get('priority'),
        dueDate: formData.get('dueDate') || null,
        projectId: projectDetailsData.id
      };

      // Get selected assignees
      const selectedAssignees = Array.from(document.querySelectorAll('input[type="checkbox"]:checked'))
        .map(checkbox => parseInt(checkbox.value));

      try {
        // Create the task
        const taskResponse = await fetch('/api/admin/tasks', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(taskData)
        });

        if (!taskResponse.ok) {
          const errorData = await taskResponse.json();
          throw new Error(errorData.error || 'Failed to create task');
        }

        const newTask = await taskResponse.json();
        console.log('Task created:', newTask);

        // Assign users to the task if any were selected
        if (selectedAssignees.length > 0) {
          const assignResponse = await fetch('/api/admin/tasks/assign', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              taskId: newTask.id,
              userIds: selectedAssignees
            })
          });

          if (!assignResponse.ok) {
            const errorData = await assignResponse.json();
            console.error('Failed to assign users:', errorData.error);
            // Don't throw here - task was created successfully
          }
        }

        // Show success message and refresh page
        showNotification('Task created successfully!', 'success');
        hideTaskModal();
        window.location.reload();

      } catch (error) {
        console.error('Error creating task:', error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
        showNotification('Failed to create task: ' + errorMessage, 'error');
      }
    });

    // Handle edit task form submission
    editTaskForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      if (!currentEditTaskId) return;
      
      const formData = new FormData(editTaskForm);
      const taskData = {
        id: currentEditTaskId,
        name: formData.get('name'),
        description: formData.get('description'),
        status: formData.get('status'),
        priority: formData.get('priority'),
        dueDate: formData.get('dueDate') || null,
        projectId: projectDetailsData.id
      };

      try {
        // Update the task
        const taskResponse = await fetch('/api/admin/tasks', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(taskData)
        });

        if (!taskResponse.ok) {
          const errorData = await taskResponse.json();
          throw new Error(errorData.error || 'Failed to update task');
        }

        // Note: Assignments are now handled immediately when users are added/removed
        // No need to update assignments here since they're managed in real-time

        // Show success message and refresh page
        showNotification('Task updated successfully!', 'success');
        hideEditTaskModal();
        window.location.reload();

      } catch (error) {
        console.error('Error updating task:', error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
        showNotification('Failed to update task: ' + errorMessage, 'error');
      }
    });

    // Handle delete task
    deleteTaskBtn.addEventListener('click', async function() {
      if (!currentEditTaskId) return;
      
      const task = tasksData.find(t => t.id === currentEditTaskId);
      if (!task) return;
      
      if (confirm(`Are you sure you want to delete the task "${task.name}"? This action cannot be undone.`)) {
        try {
          const response = await fetch(`/api/admin/tasks/${currentEditTaskId}`, {
            method: 'DELETE'
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to delete task');
          }

          showNotification('Task deleted successfully!', 'success');
          hideEditTaskModal();
          window.location.reload();
        } catch (error) {
          console.error('Error deleting task:', error);
          const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
          showNotification('Failed to delete task: ' + errorMessage, 'error');
        }
      }
    });

    // Team management event handlers
    searchUsers.addEventListener('click', searchUsersForTeam);
    
    // Edit task search event handlers
    editSearchUsers.addEventListener('click', searchUsersForEditTask);
    
    // Search as user types
    userSearch.addEventListener('input', function(e) {
      const searchTerm = e.target.value.trim();
      if (searchTerm.length >= 2) {
        searchUsersForTeam();
      } else if (searchTerm.length === 0) {
        // Clear timeout if user clears the search
        if (searchTimeout) {
          clearTimeout(searchTimeout);
        }
        searchResults.classList.add('hidden');
        if (searchSpinner) searchSpinner.classList.add('hidden');
      }
    });
    
    userSearch.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        searchUsersForTeam();
      }
    });

    // Edit task search as user types
    editUserSearch.addEventListener('input', function(e) {
      const searchTerm = e.target.value.trim();
      if (searchTerm.length >= 2) {
        searchUsersForEditTask();
      } else if (searchTerm.length === 0) {
        // Clear timeout if user clears the search
        if (editSearchTimeout) {
          clearTimeout(editSearchTimeout);
        }
        editSearchResults.classList.add('hidden');
        if (editSearchSpinner) editSearchSpinner.classList.add('hidden');
      }
    });
    
    editUserSearch.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        searchUsersForEditTask();
      }
    });

    // Handle add/remove member buttons dynamically
    document.addEventListener('click', function(e) {
      // Handle clicking on entire user container
      const userContainer = e.target.closest('[data-user-id]');
      if (userContainer && !userContainer.classList.contains('cursor-not-allowed')) {
        const userId = userContainer.getAttribute('data-user-id');
        addMemberToTeam(userId);
        return;
      }
      
      // Handle old add-member-btn (for backward compatibility)
      if (e.target.classList.contains('add-member-btn')) {
        const userId = e.target.getAttribute('data-user-id');
        addMemberToTeam(userId);
      }
      
      if (e.target.classList.contains('remove-member-btn')) {
        const memberId = e.target.getAttribute('data-member-id');
        removeMemberFromTeam(memberId);
      }

      // Handle edit task assignee actions
      if (e.target.classList.contains('remove-assignee-btn')) {
        const userId = e.target.getAttribute('data-user-id');
        removeAssigneeFromTask(userId);
      }
    });

    function addMemberToTeam(userId) {
      // Get user data from container attributes
      const userContainer = document.querySelector(`[data-user-id="${userId}"]`);
      if (!userContainer) return;
      
      const userName = userContainer.getAttribute('data-user-name');
      const userEmail = userContainer.getAttribute('data-user-email');
      
      // Add to team members data
      const newMember = {
        id: parseInt(userId),
        name: userName,
        email: userEmail,
        role: 'member',
        joinedAt: new Date()
      };
      teamMembersData.push(newMember);
      
      // Update UI
      populateCurrentMembers();
      
      // Reset search
      userSearch.value = '';
      searchResults.classList.add('hidden');
      if (searchSpinner) searchSpinner.classList.add('hidden');
      
      // Show success message
      showNotification(`${userName} has been added to the team!`, 'success');
    }

    function removeMemberFromTeam(memberId) {
      const member = teamMembersData.find(m => m.id === parseInt(memberId));
      if (!member) return;
      
      if (confirm(`Are you sure you want to remove ${member.name} from the team?`)) {
        // Remove from team members data
        teamMembersData = teamMembersData.filter(m => m.id !== parseInt(memberId));
        
        // Update UI
        populateCurrentMembers();
        
        // Show success message
        showNotification(`${member.name} has been removed from the team!`, 'success');
      }
    }

    async function removeAssigneeFromTask(userId) {
      const assignee = currentEditAssignees.find(a => a.userId === parseInt(userId));
      if (!assignee) return;
      
      if (confirm(`Are you sure you want to remove ${assignee.userName} from this task?`)) {
        try {
          // Get current assignee IDs (excluding the one to remove)
          const updatedUserIds = currentEditAssignees
            .filter(a => a.userId !== parseInt(userId))
            .map(a => a.userId);
          
          // Update assignments via API (this replaces ALL assignments)
          const response = await fetch('/api/admin/tasks/assign', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              taskId: currentEditTaskId,
              userIds: updatedUserIds
            })
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to remove assignee');
          }
          
          // Update local state
          currentEditAssignees = currentEditAssignees.filter(a => a.userId !== parseInt(userId));
          
          // Update UI
          populateEditCurrentAssignees();
          
          // Show success message
          showNotification(`${assignee.userName} has been removed from the task!`, 'success');
          
        } catch (error) {
          console.error('Error removing assignee:', error);
          const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
          showNotification('Failed to remove assignee: ' + errorMessage, 'error');
          
          // Reload current assignees to get the actual state from the server
          await loadCurrentAssignees(currentEditTaskId);
        }
      }
    }

    // Handle clicking on search results in edit modal
    document.addEventListener('click', function(e) {
      const editUserContainer = e.target.closest('[data-user-id]');
      if (editUserContainer && editUserContainer.closest('#editSearchResults') && !editUserContainer.classList.contains('cursor-not-allowed')) {
        const userId = editUserContainer.getAttribute('data-user-id');
        addAssigneeToTask(userId);
      }
    });

    async function addAssigneeToTask(userId) {
      // Get user data from container attributes
      const userContainer = document.querySelector(`#editSearchResults [data-user-id="${userId}"]`);
      if (!userContainer) return;
      
      const userName = userContainer.getAttribute('data-user-name');
      const userEmail = userContainer.getAttribute('data-user-email');
      
      try {
        // Add to current assignees
        const newAssignee = {
          userId: parseInt(userId),
          userName: userName,
          userEmail: userEmail
        };
        currentEditAssignees.push(newAssignee);
        
        // Get the updated list of user IDs
        const updatedUserIds = currentEditAssignees.map(a => a.userId);
        
        // Update assignments via API
        const response = await fetch('/api/admin/tasks/assign', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            taskId: currentEditTaskId,
            userIds: updatedUserIds
          })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to add assignee');
        }
        
        // Update UI
        populateEditCurrentAssignees();
        
        // Reset search
        editUserSearch.value = '';
        editSearchResults.classList.add('hidden');
        if (editSearchSpinner) editSearchSpinner.classList.add('hidden');
        
        // Show success message
        showNotification(`${userName} has been added to the task!`, 'success');
        
      } catch (error) {
        console.error('Error adding assignee:', error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
        showNotification('Failed to add assignee: ' + errorMessage, 'error');
        
        // Remove from local state if API call failed
        currentEditAssignees = currentEditAssignees.filter(a => a.userId !== parseInt(userId));
        populateEditCurrentAssignees();
      }
    }

    // Save team changes
    saveTeamChanges.addEventListener('click', async function() {
      try {
        // Get current team member IDs
        const currentMemberIds = teamMembersData.map(member => member.id);
        
        // Update team members via API
        const response = await fetch(`/api/admin/teams/${collaborationId}/members`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            memberIds: currentMemberIds
          })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to update team members');
        }

        showNotification('Team members updated successfully!', 'success');
        hideTeamModal();
        window.location.reload(); // Refresh to show updated team
        
      } catch (error) {
        console.error('Error updating team members:', error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
        showNotification('Failed to update team members: ' + errorMessage, 'error');
      }
    });

    // Filter functionality
    function filterTasks() {
      if (!tasksTableBody || !tasksData) return;

      const priorityValue = priorityFilter?.value || 'all';
      const statusValue = statusFilter?.value || 'all';
      const dueValue = dueFilter?.value || 'all';

      // Get all task rows (excluding the empty state row)
      const taskRows = Array.from(tasksTableBody.children).filter(row => 
        !row.querySelector('td[colspan]') // Exclude empty state row
      );

      let visibleCount = 0;

      taskRows.forEach(row => {
        const taskId = row.querySelector('a[href*="/task/"]')?.getAttribute('href')?.split('/').pop();
        const task = tasksData.find(t => t.id.toString() === taskId);
        
        if (!task) {
          row.style.display = 'none';
          return;
        }

        let showTask = true;

        // Priority filter
        if (priorityValue !== 'all' && task.priority !== priorityValue) {
          showTask = false;
        }

        // Status filter
        if (statusValue !== 'all' && task.status !== statusValue) {
          showTask = false;
        }

        // Due date filter
        if (dueValue !== 'all') {
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          
          const taskDueDate = task.dueDate ? new Date(task.dueDate) : null;
          
          // Normalize dates to UTC for comparison
          const normalizeDate = (date) => {
            const normalized = new Date(date);
            normalized.setHours(12, 0, 0, 0); // Set to noon UTC
            return normalized;
          };
          
          switch (dueValue) {
            case 'overdue':
              if (!taskDueDate || normalizeDate(taskDueDate) >= today) {
                showTask = false;
              }
              break;
            case 'due_today':
              if (!taskDueDate || normalizeDate(taskDueDate).toDateString() !== today.toDateString()) {
                showTask = false;
              }
              break;
            case 'due_week':
              const weekFromNow = new Date(today);
              weekFromNow.setDate(today.getDate() + 7);
              if (!taskDueDate || normalizeDate(taskDueDate) < today || normalizeDate(taskDueDate) > weekFromNow) {
                showTask = false;
              }
              break;
            case 'due_month':
              const monthFromNow = new Date(today);
              monthFromNow.setMonth(today.getMonth() + 1);
              if (!taskDueDate || normalizeDate(taskDueDate) < today || normalizeDate(taskDueDate) > monthFromNow) {
                showTask = false;
              }
              break;
            case 'no_due_date':
              if (taskDueDate) {
                showTask = false;
              }
              break;
          }
        }

        if (showTask) {
          row.style.display = '';
          visibleCount++;
        } else {
          row.style.display = 'none';
        }
      });

      // Show/hide empty state based on visible tasks
      const emptyStateRow = tasksTableBody.querySelector('td[colspan]')?.closest('tr');
      if (emptyStateRow) {
        if (visibleCount === 0 && tasksData.length > 0) {
          emptyStateRow.style.display = '';
          emptyStateRow.querySelector('h3').textContent = 'No tasks match the current filters';
          emptyStateRow.querySelector('p').textContent = 'Try adjusting your filter criteria to see more tasks.';
        } else if (visibleCount === 0 && tasksData.length === 0) {
          emptyStateRow.style.display = '';
          emptyStateRow.querySelector('h3').textContent = projectDetailsData ? 'No collaboration tasks yet' : 'No project linked to this collaboration';
          emptyStateRow.querySelector('p').textContent = projectDetailsData ? 'Create your first task to start collaborating with your team.' : 'Link this collaboration to a project to manage tasks.';
        } else {
          emptyStateRow.style.display = 'none';
        }
      }
    }

    // Add event listeners for filters
    if (priorityFilter) {
      priorityFilter.addEventListener('change', filterTasks);
    }
    if (statusFilter) {
      statusFilter.addEventListener('change', filterTasks);
    }
    if (dueFilter) {
      dueFilter.addEventListener('change', filterTasks);
    }

    // Reset filters functionality
    if (resetFiltersBtn) {
      resetFiltersBtn.addEventListener('click', function() {
        // Reset all filters to "all"
        if (priorityFilter) priorityFilter.value = 'all';
        if (statusFilter) statusFilter.value = 'all';
        if (dueFilter) dueFilter.value = 'all';
        
        // Apply the reset filters
        filterTasks();
      });
    }

    // Initial filter application
    filterTasks();
  });
</script>
