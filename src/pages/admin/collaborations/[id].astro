---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { teams, teamMembers as teamMembersTable, projects, clients, users, taskNotes, taskDiscussions, taskFiles, taskLinks, tasks, taskAssignments, projectTeams, timeEntries } from '../../../db/schema';
import { eq, and, desc, count, sql } from 'drizzle-orm';
import { getSessionUser } from '../../../utils/session';

// Get current user
const currentUser = await getSessionUser(Astro);
if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'developer')) {
  return Astro.redirect('/login');
}

// Debug: Log the raw parameter
console.log('Raw ID parameter:', Astro.params.id);

const collaborationId = parseInt(Astro.params.id!);

// Debug: Log the parsed ID
console.log('Parsed collaboration ID:', collaborationId);

// Validate that the ID is a valid number
if (isNaN(collaborationId)) {
  console.log('Invalid collaboration ID, redirecting to collaborations list');
  return Astro.redirect('/admin/collaborations');
}

// Get collaboration details
const collaboration = await db.query.teams.findFirst({
  where: eq(teams.id, collaborationId),
  with: {
    creator: true,
    members: {
      with: {
        user: true
      }
    }
  }
});

// Debug: Log the collaboration data
console.log('Collaboration data:', {
  id: collaboration?.id,
  name: (collaboration as any)?.name,
  description: (collaboration as any)?.description,
  creator: (collaboration as any)?.creator?.name,
  memberCount: (collaboration as any)?.members?.length
});

if (!collaboration) {
  return Astro.redirect('/admin/collaborations');
}

// Get project details if this collaboration is linked to a project
let projectDetails: any = null;
let projectTasks: any[] = [];

// Try to find the linked project through project_teams table first
const projectTeam = await db.query.projectTeams.findFirst({
  where: eq(projectTeams.teamId, collaborationId),
  with: {
    project: {
      with: {
        client: true
      }
    }
  }
});

if (projectTeam?.project) {
  projectDetails = projectTeam.project;
  console.log('Found linked project through project_teams:', {
    id: projectDetails.id,
    name: projectDetails.name,
    client: projectDetails.client?.name
  });
} else if (collaboration.name.includes(' - ')) {
  // Fallback: try to extract project name from collaboration name
  const projectName = collaboration.name.split(' - ')[1];
  console.log('Looking for project with name:', projectName);
  
  projectDetails = await db.query.projects.findFirst({
    where: eq(projects.name, projectName),
    with: {
      client: true
    }
  });
  
  console.log('Found project:', {
    id: projectDetails?.id,
    name: projectDetails?.name,
    client: projectDetails?.client?.name
  });
}
  
  // Get tasks for this project (excluding system-generated "General" tasks)
  if (projectDetails) {
    projectTasks = await db.query.tasks.findMany({
      where: and(
        eq(tasks.projectId, projectDetails.id),
        eq(tasks.archived, false),
        eq(tasks.isSystem, false) // Exclude system-generated tasks like "General"
      ),
      orderBy: [desc(tasks.createdAt)]
    });
    
    // Get task assignments separately
    for (const task of projectTasks) {
      const assignments = await db.query.taskAssignments.findMany({
        where: eq(taskAssignments.taskId, task.id),
        with: {
          user: true
        }
      });
      task.assignments = assignments;
    }
  }

// Get team members
const teamMembers = (collaboration as any).members.map((member: any) => ({
  id: member.user.id,
  name: member.user.name,
  email: member.user.email,
  role: member.role,
  joinedAt: member.joinedAt
}));

// Get recent notes (mock data for now - will be replaced with real data)
const recentNotes = [
  {
    id: 1,
    title: "Project Kickoff Notes",
    content: "Outlined the QA checklist and assigned owners for each module. Please review before handoff.",
    author: "Priya Shah",
    createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago
    authorAvatar: "PS"
  }
];

// Get recent discussions (mock data for now)
const recentDiscussions = [
  {
    id: 1,
    content: "Should we move the onboarding tooltip to appear after the user creates the first task?",
    author: "Mark Chen",
    createdAt: new Date(Date.now() - 3 * 60 * 60 * 1000), // 3 hours ago
    authorAvatar: "MC",
    replies: [
      {
        id: 2,
        content: "Yes, that reduces cognitive load on first run. Let's A/B test it this week.",
        author: "Alex Rivera",
        createdAt: new Date(Date.now() - 1 * 60 * 60 * 1000), // 1 hour ago
        authorAvatar: "AR"
      }
    ]
  },
  {
    id: 3,
    content: "Sharing final icons for review.",
    author: "Lina Gomez",
    createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000), // Yesterday
    authorAvatar: "LG",
    replies: []
  }
];

// Get recent files and links (mock data for now)
const recentFiles = [
  {
    id: 1,
    name: "Requirements v3.pdf",
    type: "file",
    author: "Priya",
    createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago
    size: "1.2MB"
  }
];

const recentLinks = [
  {
    id: 1,
    title: "Figma Board",
    url: "https://figma.com/design/example",
    type: "link",
    author: "Mark",
    createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago
  }
];

// Calculate total time tracked for the project
let totalTimeTracked = "0h";
let dueDate = "No due date";

if (projectDetails) {
  // Get time entries for this project with same filters as dashboard
  const projectTimeEntries = await db.query.timeEntries.findMany({
    where: and(
      eq(timeEntries.projectId, projectDetails.id),
      // Exclude ongoing timers (same as dashboard)
      sql`NOT (${timeEntries.startTime} IS NOT NULL AND ${timeEntries.endTime} IS NULL AND ${timeEntries.durationManual} IS NULL)`
    ),
    with: {
      user: true,
      project: true
    }
  });
  
  // Calculate total hours
  let totalSeconds = 0;
  for (const entry of projectTimeEntries) {
    if (entry.durationManual) {
      // Manual duration entry (stored in seconds)
      totalSeconds += entry.durationManual;
    } else if (entry.startTime && entry.endTime) {
      // Timer-based entry
      const start = new Date(entry.startTime);
      const end = new Date(entry.endTime);
      const durationMs = end.getTime() - start.getTime();
      const durationSeconds = Math.floor(durationMs / 1000);
      totalSeconds += durationSeconds;
    }
  }
  
  // Convert to hours and format
  const totalHours = Math.floor(totalSeconds / 3600);
  const remainingSeconds = totalSeconds % 3600;
  const remainingMinutes = Math.floor(remainingSeconds / 60);
  
  if (totalHours > 0) {
    totalTimeTracked = `${totalHours}h${remainingMinutes > 0 ? ` ${remainingMinutes}m` : ''}`;
  } else if (remainingMinutes > 0) {
    totalTimeTracked = `${remainingMinutes}m`;
  }
  
  console.log('Time tracking calculation:', {
    projectId: projectDetails.id,
    projectName: projectDetails.name,
    totalEntries: projectTimeEntries.length,
    totalSeconds,
    totalHours,
    remainingMinutes,
    formattedTime: totalTimeTracked,
    entries: projectTimeEntries.map(entry => ({
      id: entry.id,
      durationManual: entry.durationManual,
      startTime: entry.startTime,
      endTime: entry.endTime,
      hasManual: !!entry.durationManual,
      hasTimer: !!(entry.startTime && entry.endTime)
    }))
  });
}
---

<AdminLayout title={`${collaboration.name} - Collaboration`} currentPage="collaborations">
  <div class="flex h-full">
    <!-- Left Sidebar -->
    <div class="w-1/4 bg-white border-r border-gray-200 p-6 rounded-xl">
      <!-- Project Overview Card -->
      <div class="bg-white rounded-lg border border-gray-200 p-4 mb-6">
        <div class="flex items-start justify-between mb-3">
          <h2 class="text-lg font-semibold text-gray-900">{(collaboration as any).name}</h2>
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
            Active
          </span>
        </div>
        
        <div class="space-y-2 mb-4">
          <div class="flex items-center text-sm text-gray-600">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            {totalTimeTracked} tracked
          </div>
        </div>

        <!-- Team Members -->
        <div class="flex items-center">
          <div class="flex -space-x-2">
            {teamMembers.slice(0, 4).map((member: any, index: number) => (
              <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-xs font-medium text-gray-700 border-2 border-white">
                {member.name.charAt(0).toUpperCase()}
              </div>
            ))}
            {teamMembers.length > 4 && (
              <div class="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium text-gray-600 border-2 border-white">
                +{teamMembers.length - 4}
              </div>
            )}
          </div>
        </div>
      </div>


      <!-- Filters -->
      <div>
        <h3 class="text-sm font-semibold text-gray-900 mb-3">Filters</h3>
        <div class="space-y-2">
          <select id="priorityFilter" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="all">Priority: All</option>
            <option value="low">Low</option>
            <option value="regular">Regular</option>
            <option value="high">High</option>
            <option value="urgent">Urgent</option>
          </select>
          <select id="statusFilter" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="all">Status: All</option>
            <option value="pending">Pending</option>
            <option value="in_progress">In Progress</option>
            <option value="completed">Completed</option>
            <option value="cancelled">Cancelled</option>
          </select>
          <select id="dueFilter" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option value="all">Due: All</option>
            <option value="overdue">Overdue</option>
            <option value="due_today">Due Today</option>
            <option value="due_week">Due This Week</option>
            <option value="due_month">Due This Month</option>
            <option value="no_due_date">No Due Date</option>
          </select>
          
          <!-- Reset Filters Button -->
          <button id="resetFilters" class="w-full px-3 py-2 text-sm bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium rounded-md transition-colors duration-200 border border-gray-300">
            Reset Filters
          </button>
        </div>
      </div>
    </div>

    <!-- Main Content Area -->
    <div class="flex-1 p-6 pt-0">
      <!-- Header -->
      <div class="flex justify-between gap-4 items-center mb-6">
        <div class="flex items-center flex-1">
          <!-- Breadcrumbs -->
          <nav class="flex items-center space-x-2 text-sm">
            <a href="/admin/collaborations" class="text-gray-500 hover:text-gray-700">Collaborations</a>
            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
            {projectDetails ? (
              <>
                <span class="text-gray-900 font-medium">{projectDetails.client?.name || 'Unknown Client'}</span>
                <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
                <span class="text-gray-900 font-medium">{projectDetails.name}</span>
              </>
            ) : (
              <span class="text-gray-900 font-medium">{(collaboration as any).name}</span>
            )}
          </nav>
        </div>
        <div class="flex items-center space-x-3">
          <button class="inline-flex items-center px-4 py-2 bg-white hover:bg-gray-50 text-gray-700 font-medium rounded-lg border border-gray-300 transition-all duration-200">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
            </svg>
            Manage Team
          </button>
          <button class="inline-flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-all duration-200">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            New Task
          </button>
        </div>
      </div>

      <!-- Tasks Table -->
      <div class="bg-white rounded-lg border border-gray-200 shadow-sm">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-semibold text-gray-900">Tasks</h2>
        </div>
        
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Task</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Assignee</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Due</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              {projectTasks.length > 0 ? projectTasks.map((task: any) => (
                <tr class="hover:bg-gray-50">
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      <div class="flex-shrink-0 h-10 w-10">
                        <div class="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
                          <svg class="h-5 w-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                          </svg>
                        </div>
                      </div>
                      <div class="ml-4">
                        <a href={`/admin/collaborations/${collaborationId}/task/${task.id}`} class="text-sm font-medium text-blue-600 hover:text-blue-800 hover:underline">
                          {task.name}
                        </a>
                        {task.description && (
                          <div class="text-sm text-gray-500">{task.description}</div>
                        )}
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      {task.assignments && task.assignments.length > 0 ? (
                        <div class="flex -space-x-2">
                          {task.assignments.slice(0, 3).map((assignment: any) => (
                            <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-xs font-medium text-gray-700 border-2 border-white">
                              {assignment.user.name.charAt(0).toUpperCase()}
                            </div>
                          ))}
                          {task.assignments.length > 3 && (
                            <div class="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium text-gray-600 border-2 border-white">
                              +{task.assignments.length - 3}
                            </div>
                          )}
                        </div>
                      ) : (
                        <span class="text-sm text-gray-500">Unassigned</span>
                      )}
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {task.dueDate ? new Date(task.dueDate).toLocaleDateString('en-US', { 
                      year: 'numeric', 
                      month: '2-digit', 
                      day: '2-digit',
                      timeZone: 'UTC'
                    }) : 'No due date'}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      task.priority === 'urgent' ? 'bg-red-100 text-red-800' :
                      task.priority === 'high' ? 'bg-orange-100 text-orange-800' :
                      task.priority === 'regular' ? 'bg-blue-100 text-blue-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      task.status === 'completed' ? 'bg-green-100 text-green-800' :
                      task.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :
                      task.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {task.status.replace('_', ' ').charAt(0).toUpperCase() + task.status.replace('_', ' ').slice(1)}
                    </span>
                  </td>
                </tr>
              )) : (
                <tr>
                  <td colspan="5" class="px-6 py-12 text-center">
                    <div class="flex flex-col items-center space-y-4">
                      <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center">
                        <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                        </svg>
                      </div>
                      <div class="text-center">
                        <h3 class="text-lg font-medium text-gray-900 mb-2">
                          {projectDetails ? 'No collaboration tasks yet' : 'No project linked to this collaboration'}
                        </h3>
                        <p class="text-sm text-gray-500 mb-4">
                          {projectDetails ? 'Create your first task to start collaborating with your team.' : 'Link this collaboration to a project to manage tasks.'}
                        </p>
                        {projectDetails && (
                          <button class="inline-flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-all duration-200">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                            Create First Task
                          </button>
                        )}
                      </div>
                    </div>
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>

    </div>
  </div>
</AdminLayout>

<!-- Task Creation Modal -->
<div id="taskModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
  <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-2/3 lg:w-1/2 shadow-lg rounded-md bg-white">
    <div class="mt-3">
      <!-- Modal Header -->
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-medium text-gray-900">Create New Task</h3>
        <button id="closeTaskModal" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Modal Form -->
      <form id="taskForm" class="space-y-4">
        <!-- Task Name -->
        <div>
          <label for="taskName" class="block text-sm font-medium text-gray-700 mb-1">Task Name *</label>
          <input 
            type="text" 
            id="taskName" 
            name="name" 
            required 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Enter task name"
          />
        </div>

        <!-- Description -->
        <div>
          <label for="taskDescription" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
          <textarea 
            id="taskDescription" 
            name="description" 
            rows="3"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            placeholder="Enter task description"
          ></textarea>
        </div>

        <!-- Status and Priority Row -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <!-- Status -->
          <div>
            <label for="taskStatus" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
            <select 
              id="taskStatus" 
              name="status" 
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="pending">Pending</option>
              <option value="in_progress">In Progress</option>
              <option value="completed">Completed</option>
              <option value="cancelled">Cancelled</option>
            </select>
          </div>

          <!-- Priority -->
          <div>
            <label for="taskPriority" class="block text-sm font-medium text-gray-700 mb-1">Priority</label>
            <select 
              id="taskPriority" 
              name="priority" 
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="low">Low</option>
              <option value="regular" selected>Regular</option>
              <option value="high">High</option>
              <option value="urgent">Urgent</option>
            </select>
          </div>
        </div>

        <!-- Due Date -->
        <div>
          <label for="taskDueDate" class="block text-sm font-medium text-gray-700 mb-1">Due Date</label>
          <input 
            type="date" 
            id="taskDueDate" 
            name="dueDate" 
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>

        <!-- Assignees -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">Assign to Team Members</label>
          <div id="assigneeList" class="space-y-2 max-h-32 overflow-y-auto border border-gray-200 rounded-md p-3">
            <!-- Team members will be populated here -->
          </div>
        </div>

        <!-- Modal Actions -->
        <div class="flex items-center justify-end space-x-3 pt-4 border-t">
          <button 
            type="button" 
            id="cancelTaskModal" 
            class="px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-700 font-medium rounded-md transition-colors duration-200"
          >
            Cancel
          </button>
          <button 
            type="submit" 
            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md transition-colors duration-200"
          >
            Create Task
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Data for client-side JavaScript -->
<script define:vars={{ teamMembersData: teamMembers.map((member: any) => ({
  id: member.id,
  name: member.name,
  email: member.email
})), projectDetailsData: projectDetails ? {
  id: projectDetails.id,
  name: projectDetails.name
} : null, tasksData: projectTasks.map((task: any) => ({
  id: task.id,
  name: task.name,
  description: task.description,
  status: task.status,
  priority: task.priority,
  dueDate: task.dueDate,
  assignments: task.assignments || [],
  createdAt: task.createdAt
})) }}>
  // Add any client-side functionality here
  document.addEventListener('DOMContentLoaded', function() {
    const taskModal = document.getElementById('taskModal');
    const taskForm = document.getElementById('taskForm');
    const closeTaskModal = document.getElementById('closeTaskModal');
    const cancelTaskModal = document.getElementById('cancelTaskModal');
    const assigneeList = document.getElementById('assigneeList');
    
    // Filter elements
    const priorityFilter = document.getElementById('priorityFilter');
    const statusFilter = document.getElementById('statusFilter');
    const dueFilter = document.getElementById('dueFilter');
    const resetFiltersBtn = document.getElementById('resetFilters');
    const tasksTableBody = document.querySelector('tbody');

    if (!taskModal || !taskForm || !closeTaskModal || !cancelTaskModal || !assigneeList) {
      console.error('Required modal elements not found');
      return;
    }

    // Populate assignee list
    function populateAssigneeList() {
      if (!assigneeList) return;
      assigneeList.innerHTML = '';
      teamMembersData.forEach((member) => {
        const assigneeItem = document.createElement('div');
        assigneeItem.className = 'flex items-center space-x-3';
        assigneeItem.innerHTML = `
          <input 
            type="checkbox" 
            id="assignee-${member.id}" 
            value="${member.id}" 
            class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
          />
          <label for="assignee-${member.id}" class="flex items-center space-x-2 cursor-pointer">
            <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-xs font-medium text-gray-700">
              ${member.name.charAt(0).toUpperCase()}
            </div>
            <div>
              <div class="text-sm font-medium text-gray-900">${member.name}</div>
              <div class="text-xs text-gray-500">${member.email}</div>
            </div>
          </label>
        `;
        assigneeList.appendChild(assigneeItem);
      });
    }

    // Show modal
    function showTaskModal() {
      if (!projectDetailsData) {
        alert('No project linked to this collaboration. Please link a project first.');
        return;
      }
      if (!taskModal) return;
      taskModal.classList.remove('hidden');
      populateAssigneeList();
    }

    // Hide modal
    function hideTaskModal() {
      if (!taskModal || !taskForm) return;
      taskModal.classList.add('hidden');
      taskForm.reset();
    }

    // Handle new task buttons (both header and empty state)
    const newTaskButtons = document.querySelectorAll('button');
    newTaskButtons.forEach(button => {
      if (button.textContent?.includes('New Task') || button.textContent?.includes('Create First Task')) {
        button.addEventListener('click', showTaskModal);
      }
    });

    // Close modal handlers
    closeTaskModal.addEventListener('click', hideTaskModal);
    cancelTaskModal.addEventListener('click', hideTaskModal);

    // Close modal when clicking outside
    taskModal.addEventListener('click', function(e) {
      if (e.target === taskModal) {
        hideTaskModal();
      }
    });

    // Handle form submission
    taskForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(taskForm);
      const taskData = {
        name: formData.get('name'),
        description: formData.get('description'),
        status: formData.get('status'),
        priority: formData.get('priority'),
        dueDate: formData.get('dueDate') || null,
        projectId: projectDetailsData.id
      };

      // Get selected assignees
      const selectedAssignees = Array.from(document.querySelectorAll('input[type="checkbox"]:checked'))
        .map(checkbox => parseInt(checkbox.value));

      try {
        // Create the task
        const taskResponse = await fetch('/api/admin/tasks', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(taskData)
        });

        if (!taskResponse.ok) {
          const errorData = await taskResponse.json();
          throw new Error(errorData.error || 'Failed to create task');
        }

        const newTask = await taskResponse.json();
        console.log('Task created:', newTask);

        // Assign users to the task if any were selected
        if (selectedAssignees.length > 0) {
          const assignResponse = await fetch('/api/admin/tasks/assign', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              taskId: newTask.id,
              userIds: selectedAssignees
            })
          });

          if (!assignResponse.ok) {
            const errorData = await assignResponse.json();
            console.error('Failed to assign users:', errorData.error);
            // Don't throw here - task was created successfully
          }
        }

        // Show success message and refresh page
        alert('Task created successfully!');
        hideTaskModal();
        window.location.reload();

      } catch (error) {
        console.error('Error creating task:', error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
        alert('Failed to create task: ' + errorMessage);
      }
    });

    // Filter functionality
    function filterTasks() {
      if (!tasksTableBody || !tasksData) return;

      const priorityValue = priorityFilter?.value || 'all';
      const statusValue = statusFilter?.value || 'all';
      const dueValue = dueFilter?.value || 'all';

      // Get all task rows (excluding the empty state row)
      const taskRows = Array.from(tasksTableBody.children).filter(row => 
        !row.querySelector('td[colspan]') // Exclude empty state row
      );

      let visibleCount = 0;

      taskRows.forEach(row => {
        const taskId = row.querySelector('a[href*="/task/"]')?.getAttribute('href')?.split('/').pop();
        const task = tasksData.find(t => t.id.toString() === taskId);
        
        if (!task) {
          row.style.display = 'none';
          return;
        }

        let showTask = true;

        // Priority filter
        if (priorityValue !== 'all' && task.priority !== priorityValue) {
          showTask = false;
        }

        // Status filter
        if (statusValue !== 'all' && task.status !== statusValue) {
          showTask = false;
        }

        // Due date filter
        if (dueValue !== 'all') {
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          
          const taskDueDate = task.dueDate ? new Date(task.dueDate) : null;
          
          // Normalize dates to UTC for comparison
          const normalizeDate = (date) => {
            const normalized = new Date(date);
            normalized.setHours(12, 0, 0, 0); // Set to noon UTC
            return normalized;
          };
          
          switch (dueValue) {
            case 'overdue':
              if (!taskDueDate || normalizeDate(taskDueDate) >= today) {
                showTask = false;
              }
              break;
            case 'due_today':
              if (!taskDueDate || normalizeDate(taskDueDate).toDateString() !== today.toDateString()) {
                showTask = false;
              }
              break;
            case 'due_week':
              const weekFromNow = new Date(today);
              weekFromNow.setDate(today.getDate() + 7);
              if (!taskDueDate || normalizeDate(taskDueDate) < today || normalizeDate(taskDueDate) > weekFromNow) {
                showTask = false;
              }
              break;
            case 'due_month':
              const monthFromNow = new Date(today);
              monthFromNow.setMonth(today.getMonth() + 1);
              if (!taskDueDate || normalizeDate(taskDueDate) < today || normalizeDate(taskDueDate) > monthFromNow) {
                showTask = false;
              }
              break;
            case 'no_due_date':
              if (taskDueDate) {
                showTask = false;
              }
              break;
          }
        }

        if (showTask) {
          row.style.display = '';
          visibleCount++;
        } else {
          row.style.display = 'none';
        }
      });

      // Show/hide empty state based on visible tasks
      const emptyStateRow = tasksTableBody.querySelector('td[colspan]')?.closest('tr');
      if (emptyStateRow) {
        if (visibleCount === 0 && tasksData.length > 0) {
          emptyStateRow.style.display = '';
          emptyStateRow.querySelector('h3').textContent = 'No tasks match the current filters';
          emptyStateRow.querySelector('p').textContent = 'Try adjusting your filter criteria to see more tasks.';
        } else if (visibleCount === 0 && tasksData.length === 0) {
          emptyStateRow.style.display = '';
          emptyStateRow.querySelector('h3').textContent = projectDetailsData ? 'No collaboration tasks yet' : 'No project linked to this collaboration';
          emptyStateRow.querySelector('p').textContent = projectDetailsData ? 'Create your first task to start collaborating with your team.' : 'Link this collaboration to a project to manage tasks.';
        } else {
          emptyStateRow.style.display = 'none';
        }
      }
    }

    // Add event listeners for filters
    if (priorityFilter) {
      priorityFilter.addEventListener('change', filterTasks);
    }
    if (statusFilter) {
      statusFilter.addEventListener('change', filterTasks);
    }
    if (dueFilter) {
      dueFilter.addEventListener('change', filterTasks);
    }

    // Reset filters functionality
    if (resetFiltersBtn) {
      resetFiltersBtn.addEventListener('click', function() {
        // Reset all filters to "all"
        if (priorityFilter) priorityFilter.value = 'all';
        if (statusFilter) statusFilter.value = 'all';
        if (dueFilter) dueFilter.value = 'all';
        
        // Apply the reset filters
        filterTasks();
      });
    }

    // Initial filter application
    filterTasks();
  });
</script>
