---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { teams, teamMembers as teamMembersTable, projects, clients, users, taskNotes, taskDiscussions, taskFiles, taskLinks, tasks, taskAssignments, projectTeams, timeEntries } from '../../../db/schema';
import { eq, and, desc, count, sql } from 'drizzle-orm';
import { getSessionUser } from '../../../utils/session';

// Get current user
const currentUser = await getSessionUser(Astro);
if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'developer')) {
  return Astro.redirect('/login');
}

// Debug: Log the raw parameter
console.log('Raw ID parameter:', Astro.params.id);

const collaborationId = parseInt(Astro.params.id!);

// Debug: Log the parsed ID
console.log('Parsed collaboration ID:', collaborationId);

// Validate that the ID is a valid number
if (isNaN(collaborationId)) {
  console.log('Invalid collaboration ID, redirecting to collaborations list');
  return Astro.redirect('/admin/collaborations');
}

// Get collaboration details
const collaboration = await db.query.teams.findFirst({
  where: eq(teams.id, collaborationId),
  with: {
    creator: true,
    members: {
      with: {
        user: true
      }
    }
  }
});

// Debug: Log the collaboration data
console.log('Collaboration data:', {
  id: collaboration?.id,
  name: (collaboration as any)?.name,
  description: (collaboration as any)?.description,
  creator: (collaboration as any)?.creator?.name,
  memberCount: (collaboration as any)?.members?.length
});

if (!collaboration) {
  return Astro.redirect('/admin/collaborations');
}

// Get project details if this collaboration is linked to a project
let projectDetails: any = null;
let projectTasks: any[] = [];

// Try to find the linked project through project_teams table first
const projectTeam = await db.query.projectTeams.findFirst({
  where: eq(projectTeams.teamId, collaborationId),
  with: {
    project: {
      with: {
        client: true
      }
    }
  }
});

if (projectTeam?.project) {
  projectDetails = projectTeam.project;
  console.log('Found linked project through project_teams:', {
    id: projectDetails.id,
    name: projectDetails.name,
    client: projectDetails.client?.name
  });
} else if (collaboration.name.includes(' - ')) {
  // Fallback: try to extract project name from collaboration name
  const projectName = collaboration.name.split(' - ')[1];
  console.log('Looking for project with name:', projectName);
  
  projectDetails = await db.query.projects.findFirst({
    where: eq(projects.name, projectName),
    with: {
      client: true
    }
  });
  
  console.log('Found project:', {
    id: projectDetails?.id,
    name: projectDetails?.name,
    client: projectDetails?.client?.name
  });
}
  
  // Get tasks for this project
  if (projectDetails) {
    projectTasks = await db.query.tasks.findMany({
      where: and(
        eq(tasks.projectId, projectDetails.id),
        eq(tasks.archived, false)
      ),
      orderBy: [desc(tasks.createdAt)]
    });
    
    // Get task assignments separately
    for (const task of projectTasks) {
      const assignments = await db.query.taskAssignments.findMany({
        where: eq(taskAssignments.taskId, task.id),
        with: {
          user: true
        }
      });
      task.assignments = assignments;
    }
  }

// Get team members
const teamMembers = (collaboration as any).members.map((member: any) => ({
  id: member.user.id,
  name: member.user.name,
  email: member.user.email,
  role: member.role,
  joinedAt: member.joinedAt
}));

// Get recent notes (mock data for now - will be replaced with real data)
const recentNotes = [
  {
    id: 1,
    title: "Project Kickoff Notes",
    content: "Outlined the QA checklist and assigned owners for each module. Please review before handoff.",
    author: "Priya Shah",
    createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago
    authorAvatar: "PS"
  }
];

// Get recent discussions (mock data for now)
const recentDiscussions = [
  {
    id: 1,
    content: "Should we move the onboarding tooltip to appear after the user creates the first task?",
    author: "Mark Chen",
    createdAt: new Date(Date.now() - 3 * 60 * 60 * 1000), // 3 hours ago
    authorAvatar: "MC",
    replies: [
      {
        id: 2,
        content: "Yes, that reduces cognitive load on first run. Let's A/B test it this week.",
        author: "Alex Rivera",
        createdAt: new Date(Date.now() - 1 * 60 * 60 * 1000), // 1 hour ago
        authorAvatar: "AR"
      }
    ]
  },
  {
    id: 3,
    content: "Sharing final icons for review.",
    author: "Lina Gomez",
    createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000), // Yesterday
    authorAvatar: "LG",
    replies: []
  }
];

// Get recent files and links (mock data for now)
const recentFiles = [
  {
    id: 1,
    name: "Requirements v3.pdf",
    type: "file",
    author: "Priya",
    createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago
    size: "1.2MB"
  }
];

const recentLinks = [
  {
    id: 1,
    title: "Figma Board",
    url: "https://figma.com/design/example",
    type: "link",
    author: "Mark",
    createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago
  }
];

// Calculate total time tracked for the project
let totalTimeTracked = "0h";
let dueDate = "No due date";

if (projectDetails) {
  // Get time entries for this project with same filters as dashboard
  const projectTimeEntries = await db.query.timeEntries.findMany({
    where: and(
      eq(timeEntries.projectId, projectDetails.id),
      // Exclude ongoing timers (same as dashboard)
      sql`NOT (${timeEntries.startTime} IS NOT NULL AND ${timeEntries.endTime} IS NULL AND ${timeEntries.durationManual} IS NULL)`
    ),
    with: {
      user: true,
      project: true
    }
  });
  
  // Calculate total hours
  let totalSeconds = 0;
  for (const entry of projectTimeEntries) {
    if (entry.durationManual) {
      // Manual duration entry (stored in seconds)
      totalSeconds += entry.durationManual;
    } else if (entry.startTime && entry.endTime) {
      // Timer-based entry
      const start = new Date(entry.startTime);
      const end = new Date(entry.endTime);
      const durationMs = end.getTime() - start.getTime();
      const durationSeconds = Math.floor(durationMs / 1000);
      totalSeconds += durationSeconds;
    }
  }
  
  // Convert to hours and format
  const totalHours = Math.floor(totalSeconds / 3600);
  const remainingSeconds = totalSeconds % 3600;
  const remainingMinutes = Math.floor(remainingSeconds / 60);
  
  if (totalHours > 0) {
    totalTimeTracked = `${totalHours}h${remainingMinutes > 0 ? ` ${remainingMinutes}m` : ''}`;
  } else if (remainingMinutes > 0) {
    totalTimeTracked = `${remainingMinutes}m`;
  }
  
  console.log('Time tracking calculation:', {
    projectId: projectDetails.id,
    projectName: projectDetails.name,
    totalEntries: projectTimeEntries.length,
    totalSeconds,
    totalHours,
    remainingMinutes,
    formattedTime: totalTimeTracked,
    entries: projectTimeEntries.map(entry => ({
      id: entry.id,
      durationManual: entry.durationManual,
      startTime: entry.startTime,
      endTime: entry.endTime,
      hasManual: !!entry.durationManual,
      hasTimer: !!(entry.startTime && entry.endTime)
    }))
  });
}
---

<AdminLayout title={`${collaboration.name} - Collaboration`} currentPage="collaborations">
  <div class="flex h-full">
    <!-- Left Sidebar -->
    <div class="w-1/4 bg-white border-r border-gray-200 p-6 rounded-xl">
      <!-- Project Overview Card -->
      <div class="bg-white rounded-lg border border-gray-200 p-4 mb-6">
        <div class="flex items-center justify-between mb-3">
          <h2 class="text-lg font-semibold text-gray-900">{(collaboration as any).name}</h2>
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
            Active
          </span>
        </div>
        
        <div class="space-y-2 mb-4">
          <div class="flex items-center text-sm text-gray-600">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            {totalTimeTracked} tracked
          </div>
          <div class="flex items-center text-sm text-gray-600">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
            Due: {dueDate}
          </div>
        </div>

        <!-- Team Members -->
        <div class="flex items-center">
          <div class="flex -space-x-2">
            {teamMembers.slice(0, 4).map((member: any, index: number) => (
              <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-xs font-medium text-gray-700 border-2 border-white">
                {member.name.charAt(0).toUpperCase()}
              </div>
            ))}
            {teamMembers.length > 4 && (
              <div class="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium text-gray-600 border-2 border-white">
                +{teamMembers.length - 4}
              </div>
            )}
          </div>
        </div>
      </div>

      <!-- Quick Links -->
      <div class="mb-6">
        <h3 class="text-sm font-semibold text-gray-900 mb-3">Quick Links</h3>
        <nav class="space-y-1">
          <a href="#notes" class="flex items-center px-3 py-2 text-sm text-gray-600 hover:bg-gray-50 rounded-md">
            <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            All Notes
          </a>
          <a href="#discussions" class="flex items-center px-3 py-2 text-sm text-gray-600 hover:bg-gray-50 rounded-md">
            <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
            </svg>
            Discussions
          </a>
          <a href="#files" class="flex items-center px-3 py-2 text-sm text-gray-600 hover:bg-gray-50 rounded-md">
            <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
            </svg>
            Files & Links
          </a>
          <a href="#activity" class="flex items-center px-3 py-2 text-sm text-gray-600 hover:bg-gray-50 rounded-md">
            <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>
            Activity
          </a>
        </nav>
      </div>

      <!-- Filters -->
      <div>
        <h3 class="text-sm font-semibold text-gray-900 mb-3">Filters</h3>
        <div class="space-y-2">
          <select class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option>Tag: All</option>
            <option>Important</option>
            <option>Meeting</option>
            <option>Decision</option>
          </select>
          <select class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option>Author: Any</option>
            {teamMembers.map((member: any) => (
              <option>{member.name}</option>
            ))}
          </select>
          <select class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <option>Date range</option>
            <option>Today</option>
            <option>This week</option>
            <option>This month</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Main Content Area -->
    <div class="flex-1 p-6 pt-0">
      <!-- Header -->
      <div class="flex justify-between gap-4 items-center mb-6">
        <div class="flex items-center flex-1">
          <h1 class="text-2xl font-bold text-gray-900">Project Tasks</h1>
        </div>
        <div class="flex items-center space-x-3">
          <button class="inline-flex items-center px-4 py-2 bg-white hover:bg-gray-50 text-gray-700 font-medium rounded-lg border border-gray-300 transition-all duration-200">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
            </svg>
            Manage Team
          </button>
          <button class="inline-flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-all duration-200">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            + New Task
          </button>
        </div>
      </div>

      <!-- Tasks Table -->
      <div class="bg-white rounded-lg border border-gray-200 shadow-sm">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-semibold text-gray-900">Tasks</h2>
        </div>
        
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Task</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Assignee</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Due</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              {projectTasks.length > 0 ? projectTasks.map((task: any) => (
                <tr class="hover:bg-gray-50">
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      <div class="flex-shrink-0 h-10 w-10">
                        <div class="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
                          <svg class="h-5 w-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                          </svg>
                        </div>
                      </div>
                      <div class="ml-4">
                        <div class="text-sm font-medium text-gray-900">{task.name}</div>
                        {task.description && (
                          <div class="text-sm text-gray-500">{task.description}</div>
                        )}
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      {task.assignments && task.assignments.length > 0 ? (
                        <div class="flex -space-x-2">
                          {task.assignments.slice(0, 3).map((assignment: any) => (
                            <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-xs font-medium text-gray-700 border-2 border-white">
                              {assignment.user.name.charAt(0).toUpperCase()}
                            </div>
                          ))}
                          {task.assignments.length > 3 && (
                            <div class="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center text-xs font-medium text-gray-600 border-2 border-white">
                              +{task.assignments.length - 3}
                            </div>
                          )}
                        </div>
                      ) : (
                        <span class="text-sm text-gray-500">Unassigned</span>
                      )}
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    No due date
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      task.priority === 'urgent' ? 'bg-red-100 text-red-800' :
                      task.priority === 'high' ? 'bg-orange-100 text-orange-800' :
                      task.priority === 'regular' ? 'bg-blue-100 text-blue-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      task.status === 'completed' ? 'bg-green-100 text-green-800' :
                      task.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :
                      task.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {task.status.replace('_', ' ').charAt(0).toUpperCase() + task.status.replace('_', ' ').slice(1)}
                    </span>
                  </td>
                </tr>
              )) : (
                <tr>
                  <td colspan="5" class="px-6 py-12 text-center text-sm text-gray-500">
                    {projectDetails ? 'No tasks found for this project.' : 'No project linked to this collaboration.'}
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>

    </div>
  </div>
</AdminLayout>

<script>
  // Add any client-side functionality here
  document.addEventListener('DOMContentLoaded', function() {
    // Handle new task button
    const newTaskBtn = document.querySelector('button');
    if (newTaskBtn && newTaskBtn.textContent?.includes('+ New Task')) {
      newTaskBtn.addEventListener('click', function() {
        // Handle new task creation logic
        console.log('Creating new task...');
      });
    }
  });
</script>
