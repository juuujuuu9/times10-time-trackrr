---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { db } from '../../db/index';
import { teams, teamMembers, users } from '../../db/schema';
import { eq, and, count, desc } from 'drizzle-orm';
import { getSessionUser } from '../../utils/session';

// Get current user
const currentUser = await getSessionUser(Astro);
if (!currentUser || (currentUser.role !== 'admin' && currentUser.role !== 'developer')) {
  return Astro.redirect('/login');
}

// Get all teams with member counts
const allTeams = await db
  .select({
    id: teams.id,
    name: teams.name,
    description: teams.description,
    createdBy: teams.createdBy,
    createdAt: teams.createdAt,
    updatedAt: teams.updatedAt,
    archived: teams.archived,
    memberCount: count(teamMembers.userId)
  })
  .from(teams)
  .leftJoin(teamMembers, eq(teams.id, teamMembers.teamId))
  .where(eq(teams.archived, false))
  .groupBy(teams.id)
  .orderBy(desc(teams.createdAt));

// Get team creators
const teamCreators = await db
  .select({
    teamId: teams.id,
    creatorName: users.name,
    creatorEmail: users.email
  })
  .from(teams)
  .innerJoin(users, eq(teams.createdBy, users.id))
  .where(eq(teams.archived, false));

const creatorMap = new Map(teamCreators.map(creator => [creator.teamId, creator]));
---

<AdminLayout title="Team Management" currentPage="teams">
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Team Management</h1>
        <p class="text-gray-600">Create and manage teams for collaborative work</p>
      </div>
      <button
        id="createTeamBtn"
        class="inline-flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105"
      >
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        Create Team
      </button>
    </div>

    <!-- Summary Stats -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
      <div class="bg-white rounded-lg shadow border border-gray-300 p-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <div class="w-8 h-8 bg-gray-200 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-gray-600">Total Teams</p>
            </div>
          </div>
          <p class="text-2xl font-bold text-gray-900">{allTeams.length}</p>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow border border-gray-300 p-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-green-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-gray-600">Total Members</p>
            </div>
          </div>
          <p class="text-2xl font-bold text-gray-900">{allTeams.reduce((sum, team) => sum + team.memberCount, 0)}</p>
        </div>
      </div>
      
      <div class="bg-white rounded-lg shadow border border-gray-300 p-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-blue-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-gray-600">Active Teams</p>
            </div>
          </div>
          <p class="text-2xl font-bold text-gray-900">{allTeams.filter(team => team.memberCount > 0).length}</p>
        </div>
      </div>
      
      <div class="bg-white rounded-lg shadow border border-gray-300 p-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <div class="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-purple-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-gray-600">Avg Members</p>
            </div>
          </div>
          <p class="text-2xl font-bold text-gray-900">
            {allTeams.length > 0 ? Math.round(allTeams.reduce((sum, team) => sum + team.memberCount, 0) / allTeams.length) : 0}
          </p>
        </div>
      </div>
    </div>

    <!-- Teams List -->
    <div class="bg-white rounded-lg shadow border border-gray-300">
      <div class="px-6 py-4 border-b border-gray-200">
        <h2 class="text-lg font-semibold text-gray-900">All Teams</h2>
      </div>
      
      <div class="p-6">
        {allTeams.length === 0 ? (
          <div class="text-center py-8">
            <div class="mx-auto h-16 w-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
              <svg class="h-8 w-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">No teams yet</h3>
            <p class="text-gray-600 mb-4">Create your first team to get started with collaborative features.</p>
            <button 
              id="createFirstTeamBtn"
              class="inline-flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105"
            >
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              Create First Team
            </button>
          </div>
        ) : (
          <div class="space-y-4">
            {allTeams.map((team) => {
              const creator = creatorMap.get(team.id);
              return (
                <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-all duration-200">
                  <div class="flex items-center justify-between">
                    <div class="flex items-center">
                      <div class="h-12 w-12 bg-gray-200 rounded-lg flex items-center justify-center">
                        <svg class="h-6 w-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                        </svg>
                      </div>
                      <div class="ml-4">
                        <h3 class="text-lg font-semibold text-gray-900">{team.name}</h3>
                        <p class="text-sm text-gray-600">{team.description || 'No description'}</p>
                        <div class="flex items-center space-x-4 mt-1">
                          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                            {team.memberCount} members
                          </span>
                          <span class="text-xs text-gray-500">
                            Created by {creator?.creatorName || 'Unknown'}
                          </span>
                          <span class="text-xs text-gray-500">
                            {new Date(team.createdAt).toLocaleDateString()}
                          </span>
                        </div>
                      </div>
                    </div>
                    
                    <div class="flex items-center space-x-2">
                      <a 
                        href={`/teams/${team.id}`}
                        class="inline-flex items-center px-3 py-2 bg-gray-600 hover:bg-gray-700 text-white text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105"
                      >
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                        </svg>
                        View
                      </a>
                      
                      <button 
                        class="edit-team-btn inline-flex items-center px-3 py-2 bg-white hover:bg-gray-100 text-gray-700 text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 border border-gray-300"
                        data-team-id={team.id}
                        data-team-name={team.name}
                        data-team-description={team.description || ''}
                      >
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                        Edit
                      </button>
                      
                      <button 
                        class="delete-team-btn inline-flex items-center px-3 py-2 bg-red-100 hover:bg-red-200 text-red-700 text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105 border border-red-300"
                        data-team-id={team.id}
                        data-team-name={team.name}
                      >
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                        Archive
                      </button>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  </div>

  <!-- Create Team Modal -->
  <div id="createTeamModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-semibold text-gray-900">Create New Team</h3>
        </div>
        <form id="createTeamForm" class="px-6 py-4">
          <div class="space-y-4">
            <div>
              <label for="teamName" class="block text-sm font-medium text-gray-700 mb-1">Team Name</label>
              <input 
                type="text" 
                id="teamName" 
                name="teamName"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Enter team name"
              />
            </div>
            <div>
              <label for="teamDescription" class="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
              <textarea 
                id="teamDescription" 
                name="teamDescription"
                rows="3"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Describe what this team does"
              ></textarea>
            </div>
          </div>
          <div class="flex justify-end space-x-3 mt-6">
            <button 
              type="button" 
              id="cancelCreateTeam"
              class="inline-flex items-center px-4 py-2 text-gray-300 bg-gray-700 hover:bg-gray-600 rounded-md transition-all duration-200 font-medium"
            >
              <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
              Cancel
            </button>
            <button 
              type="submit"
              class="inline-flex items-center px-4 py-2 bg-[#415058] hover:bg-[#1F292E] text-white rounded-md transition-all duration-200 font-medium shadow-sm hover:shadow-md"
            >
              <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              Create Team
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Edit Team Modal -->
  <div id="editTeamModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-semibold text-gray-900">Edit Team</h3>
        </div>
        <form id="editTeamForm" class="px-6 py-4">
          <input type="hidden" id="editTeamId" name="teamId" />
          <div class="space-y-4">
            <div>
              <label for="editTeamName" class="block text-sm font-medium text-gray-700 mb-1">Team Name</label>
              <input 
                type="text" 
                id="editTeamName" 
                name="teamName"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Enter team name"
              />
            </div>
            <div>
              <label for="editTeamDescription" class="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
              <textarea 
                id="editTeamDescription" 
                name="teamDescription"
                rows="3"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Describe what this team does"
              ></textarea>
            </div>
          </div>
          <div class="flex justify-end space-x-3 mt-6">
            <button 
              type="button" 
              id="cancelEditTeam"
              class="inline-flex items-center px-4 py-2 text-gray-300 bg-gray-700 hover:bg-gray-600 rounded-md transition-all duration-200 font-medium"
            >
              <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
              Cancel
            </button>
            <button 
              type="submit"
              class="inline-flex items-center px-4 py-2 bg-[#415058] hover:bg-[#1F292E] text-white rounded-md transition-all duration-200 font-medium shadow-sm hover:shadow-md"
            >
              <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              Update Team
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  // Team Management JavaScript
  document.addEventListener('DOMContentLoaded', function() {
    const createTeamBtn = document.getElementById('createTeamBtn');
    const createFirstTeamBtn = document.getElementById('createFirstTeamBtn');
    const createTeamModal = document.getElementById('createTeamModal');
    const editTeamModal = document.getElementById('editTeamModal');
    const cancelCreateTeam = document.getElementById('cancelCreateTeam');
    const cancelEditTeam = document.getElementById('cancelEditTeam');
    const createTeamForm = document.getElementById('createTeamForm');
    const editTeamForm = document.getElementById('editTeamForm');
    const editTeamBtns = document.querySelectorAll('.edit-team-btn');
    const deleteTeamBtns = document.querySelectorAll('.delete-team-btn');

    // Show create team modal
    function showCreateTeamModal() {
      createTeamModal?.classList.remove('hidden');
    }

    // Hide create team modal
    function hideCreateTeamModal() {
      createTeamModal?.classList.add('hidden');
      (createTeamForm as HTMLFormElement)?.reset();
    }

    // Show edit team modal
    function showEditTeamModal(teamId: string, teamName: string, teamDescription: string) {
      (document.getElementById('editTeamId') as HTMLInputElement)!.value = teamId;
      (document.getElementById('editTeamName') as HTMLInputElement)!.value = teamName;
      (document.getElementById('editTeamDescription') as HTMLTextAreaElement)!.value = teamDescription;
      editTeamModal?.classList.remove('hidden');
    }

    // Hide edit team modal
    function hideEditTeamModal() {
      editTeamModal?.classList.add('hidden');
      (editTeamForm as HTMLFormElement)?.reset();
    }

    // Event listeners
    createTeamBtn?.addEventListener('click', showCreateTeamModal);
    createFirstTeamBtn?.addEventListener('click', showCreateTeamModal);
    cancelCreateTeam?.addEventListener('click', hideCreateTeamModal);
    cancelEditTeam?.addEventListener('click', hideEditTeamModal);

    // Edit team buttons
    editTeamBtns.forEach(btn => {
      btn.addEventListener('click', function(this: HTMLElement) {
        const teamId = this.dataset.teamId;
        const teamName = this.dataset.teamName;
        const teamDescription = this.dataset.teamDescription;
        showEditTeamModal(teamId!, teamName!, teamDescription!);
      });
    });

    // Delete team buttons
    deleteTeamBtns.forEach(btn => {
      btn.addEventListener('click', function(this: HTMLElement) {
        const teamId = this.dataset.teamId;
        const teamName = this.dataset.teamName;
        
        if (confirm(`Are you sure you want to archive the team "${teamName}"? This action can be undone.`)) {
          deleteTeam(teamId!);
        }
      });
    });

    // Close modals when clicking outside
    createTeamModal?.addEventListener('click', function(e) {
      if (e.target === createTeamModal) {
        hideCreateTeamModal();
      }
    });

    editTeamModal?.addEventListener('click', function(e) {
      if (e.target === editTeamModal) {
        hideEditTeamModal();
      }
    });

    // Handle create team form submission
    createTeamForm?.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(createTeamForm as HTMLFormElement);
      const teamData = {
        name: formData.get('teamName'),
        description: formData.get('teamDescription')
      };

      try {
        const response = await fetch('/api/teams', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(teamData)
        });

        const result = await response.json();

        if (result.success) {
          // Refresh the page to show the new team
          window.location.reload();
        } else {
          alert('Error creating team: ' + (result.error || 'Unknown error'));
        }
      } catch (error) {
        console.error('Error creating team:', error);
        alert('Error creating team. Please try again.');
      }
    });

    // Handle edit team form submission
    editTeamForm?.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(editTeamForm as HTMLFormElement);
      const teamId = formData.get('teamId');
      const teamData = {
        name: formData.get('teamName'),
        description: formData.get('teamDescription')
      };

      try {
        const response = await fetch(`/api/teams/${teamId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(teamData)
        });

        const result = await response.json();

        if (result.success) {
          // Refresh the page to show the updated team
          window.location.reload();
        } else {
          alert('Error updating team: ' + (result.error || 'Unknown error'));
        }
      } catch (error) {
        console.error('Error updating team:', error);
        alert('Error updating team. Please try again.');
      }
    });

    // Delete team function
    async function deleteTeam(teamId: string) {
      try {
        const response = await fetch(`/api/teams/${teamId}`, {
          method: 'DELETE'
        });

        const result = await response.json();

        if (result.success) {
          // Refresh the page to show the updated list
          window.location.reload();
        } else {
          alert('Error archiving team: ' + (result.error || 'Unknown error'));
        }
      } catch (error) {
        console.error('Error archiving team:', error);
        alert('Error archiving team. Please try again.');
      }
    }
  });
</script>
