---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { getSessionUser } from '../../utils/session';
import { db } from '../../db';
import { users, clients, projects, timeEntries } from '../../db/schema';
import { eq, and, sql } from 'drizzle-orm';

// Get the selected time period from query params, default to 'week'
const period = Astro.url.searchParams.get('period') || 'week';

// Get client filter parameters
const teamClientFilter = Astro.url.searchParams.get('teamClient') || 'all';
const projectClientFilter = Astro.url.searchParams.get('projectClient') || 'all';

// Get all available clients (for dropdown options, not filtered by current selections)
const allClients = await db
  .select({
    name: clients.name
  })
  .from(clients)
  .where(eq(clients.archived, false))
  .orderBy(clients.name);

// Get current user to check permissions
const currentUser = await getSessionUser(Astro);
const canViewFinancialData = currentUser ? currentUser.role === 'admin' : false;

// Calculate date range based on period
const now = new Date();
let startDate: Date | null = null;
let endDate: Date | null = null;

switch (period) {
  case 'all':
    startDate = null;
    endDate = null;
    break;
  case 'today':
    startDate = new Date(now);
    startDate.setHours(0, 0, 0, 0);
    endDate = new Date(now);
    endDate.setHours(23, 59, 59, 999);
    break;
  case 'week':
    const dayOfWeek = now.getDay();
    const daysToSubtract = dayOfWeek === 0 ? 0 : dayOfWeek;
    startDate = new Date(now);
    startDate.setDate(now.getDate() - daysToSubtract);
    startDate.setHours(0, 0, 0, 0);
    endDate = new Date(startDate);
    endDate.setDate(startDate.getDate() + 6);
    endDate.setHours(23, 59, 59, 999);
    break;
  case 'month':
    startDate = new Date(now.getFullYear(), now.getMonth(), 1);
    endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);
    break;
  case 'quarter':
    // This quarter
    const currentQuarter = Math.floor(now.getMonth() / 3);
    const quarterStartMonth = currentQuarter * 3;
    startDate = new Date(now.getFullYear(), quarterStartMonth, 1);
    endDate = new Date(now.getFullYear(), quarterStartMonth + 3, 0, 23, 59, 59, 999);
    break;
  default:
    startDate = new Date(now);
    startDate.setDate(now.getDate() - 7);
    startDate.setHours(0, 0, 0, 0);
    endDate = new Date(now);
    endDate.setHours(23, 59, 59, 999);
}

// Build filter conditions
let filterConditions = [
  eq(clients.archived, false),
  eq(projects.archived, false)
];

// Add date filter
if (startDate && endDate) {
  filterConditions.push(sql`(
    (${timeEntries.startTime} IS NOT NULL AND ${timeEntries.startTime} >= ${startDate} AND ${timeEntries.startTime} <= ${endDate})
    OR 
    (${timeEntries.startTime} IS NULL AND ${timeEntries.createdAt} >= ${startDate} AND ${timeEntries.createdAt} <= ${endDate})
  )`);
} else if (startDate) {
  // Handle case where only startDate is provided (shouldn't happen with current logic)
  filterConditions.push(sql`(
    (${timeEntries.startTime} IS NOT NULL AND ${timeEntries.startTime} >= ${startDate})
    OR 
    (${timeEntries.startTime} IS NULL AND ${timeEntries.createdAt} >= ${startDate})
  )`);
}

// Add client filter for team members (if not 'all')
if (teamClientFilter !== 'all') {
  filterConditions.push(eq(clients.name, teamClientFilter));
}

// Get time entries with all details (for team members)
const timeEntriesWithDetails = await db
  .select({
    id: timeEntries.id,
    userId: timeEntries.userId,
    projectId: timeEntries.projectId,
    startTime: timeEntries.startTime,
    endTime: timeEntries.endTime,
    durationManual: timeEntries.durationManual,
    notes: timeEntries.notes,
    createdAt: timeEntries.createdAt,
    userName: users.name,
    userEmail: users.email,
    userPayRate: users.payRate,
    projectName: projects.name,
    clientName: clients.name
  })
  .from(timeEntries)
  .innerJoin(users, eq(timeEntries.userId, users.id))
  .innerJoin(projects, eq(timeEntries.projectId, projects.id))
  .innerJoin(clients, eq(projects.clientId, clients.id))
  .where(and(
    ...filterConditions,
    // Exclude ongoing timers
    sql`NOT (${timeEntries.startTime} IS NOT NULL AND ${timeEntries.endTime} IS NULL AND ${timeEntries.durationManual} IS NULL)`
  ))
  .orderBy(timeEntries.createdAt);

// Get time entries for projects (with project client filter)
let projectFilterConditions = [
  eq(clients.archived, false),
  eq(projects.archived, false)
];

// Add date filter for projects
if (startDate && endDate) {
  projectFilterConditions.push(sql`(
    (${timeEntries.startTime} IS NOT NULL AND ${timeEntries.startTime} >= ${startDate} AND ${timeEntries.startTime} <= ${endDate})
    OR 
    (${timeEntries.startTime} IS NULL AND ${timeEntries.createdAt} >= ${startDate} AND ${timeEntries.createdAt} <= ${endDate})
  )`);
} else if (startDate) {
  projectFilterConditions.push(sql`(
    (${timeEntries.startTime} IS NOT NULL AND ${timeEntries.startTime} >= ${startDate})
    OR 
    (${timeEntries.startTime} IS NULL AND ${timeEntries.createdAt} >= ${startDate})
  )`);
}

// Add client filter for projects (if not 'all')
if (projectClientFilter !== 'all') {
  projectFilterConditions.push(eq(clients.name, projectClientFilter));
}

const projectTimeEntries = await db
  .select({
    id: timeEntries.id,
    userId: timeEntries.userId,
    projectId: timeEntries.projectId,
    startTime: timeEntries.startTime,
    endTime: timeEntries.endTime,
    durationManual: timeEntries.durationManual,
    notes: timeEntries.notes,
    createdAt: timeEntries.createdAt,
    userName: users.name,
    userEmail: users.email,
    userPayRate: users.payRate,
    projectName: projects.name,
    clientName: clients.name
  })
  .from(timeEntries)
  .innerJoin(users, eq(timeEntries.userId, users.id))
  .innerJoin(projects, eq(timeEntries.projectId, projects.id))
  .innerJoin(clients, eq(projects.clientId, clients.id))
  .where(and(
    ...projectFilterConditions,
    // Exclude ongoing timers
    sql`NOT (${timeEntries.startTime} IS NOT NULL AND ${timeEntries.endTime} IS NULL AND ${timeEntries.durationManual} IS NULL)`
  ))
  .orderBy(timeEntries.createdAt);

// Get time entries for client analysis (only filtered by time period, not by client)
let clientFilterConditions = [
  eq(clients.archived, false),
  eq(projects.archived, false)
];

// Add date filter for client analysis
if (startDate && endDate) {
  clientFilterConditions.push(sql`(
    (${timeEntries.startTime} IS NOT NULL AND ${timeEntries.startTime} >= ${startDate} AND ${timeEntries.startTime} <= ${endDate})
    OR 
    (${timeEntries.startTime} IS NULL AND ${timeEntries.createdAt} >= ${startDate} AND ${timeEntries.createdAt} <= ${endDate})
  )`);
} else if (startDate) {
  clientFilterConditions.push(sql`(
    (${timeEntries.startTime} IS NOT NULL AND ${timeEntries.startTime} >= ${startDate})
    OR 
    (${timeEntries.startTime} IS NULL AND ${timeEntries.createdAt} >= ${startDate})
  )`);
}

const clientTimeEntries = await db
  .select({
    id: timeEntries.id,
    userId: timeEntries.userId,
    projectId: timeEntries.projectId,
    startTime: timeEntries.startTime,
    endTime: timeEntries.endTime,
    durationManual: timeEntries.durationManual,
    notes: timeEntries.notes,
    createdAt: timeEntries.createdAt,
    userName: users.name,
    userEmail: users.email,
    userPayRate: users.payRate,
    projectName: projects.name,
    clientName: clients.name
  })
  .from(timeEntries)
  .innerJoin(users, eq(timeEntries.userId, users.id))
  .innerJoin(projects, eq(timeEntries.projectId, projects.id))
  .innerJoin(clients, eq(projects.clientId, clients.id))
  .where(and(
    ...clientFilterConditions,
    // Exclude ongoing timers
    sql`NOT (${timeEntries.startTime} IS NOT NULL AND ${timeEntries.endTime} IS NULL AND ${timeEntries.durationManual} IS NULL)`
  ))
  .orderBy(timeEntries.createdAt);

// Debug: Log the number of entries returned (remove in production)
// console.log('Total entries returned:', timeEntriesWithDetails.length);

// Calculate summary metrics
const totalHours = timeEntriesWithDetails.reduce((sum, entry) => {
  if (entry.durationManual) {
    return sum + (entry.durationManual / 3600);
  } else if (entry.startTime && entry.endTime) {
    return sum + ((new Date(entry.endTime).getTime() - new Date(entry.startTime).getTime()) / (1000 * 60 * 60));
  }
  return sum;
}, 0);

const totalCost = timeEntriesWithDetails.reduce((sum, entry) => {
  if (entry.userPayRate) {
    const payRate = parseFloat(entry.userPayRate);
    if (entry.durationManual) {
      return sum + (entry.durationManual / 3600 * payRate);
    } else if (entry.startTime && entry.endTime) {
      const hours = (new Date(entry.endTime).getTime() - new Date(entry.startTime).getTime()) / (1000 * 60 * 60);
      return sum + (hours * payRate);
    }
  }
  return sum;
}, 0);

const manualEntries = timeEntriesWithDetails.filter(e => e.durationManual).length;
const timerEntries = timeEntriesWithDetails.filter(e => e.startTime && e.endTime).length;

// Calculate user metrics
const userMetrics = timeEntriesWithDetails.reduce((acc, entry) => {
  if (!acc[entry.userId]) {
    acc[entry.userId] = {
      id: entry.userId,
      name: entry.userName,
      email: entry.userEmail,
      payRate: entry.userPayRate,
      entries: 0,
      hours: 0,
      cost: 0,
      manualEntries: 0,
      timerEntries: 0,
      clients: new Set()
    };
  }

  const stats = acc[entry.userId];
  stats.entries++;
  
  // Add client to user's client set
  stats.clients.add(entry.clientName);

  let hours = 0;
  if (entry.durationManual) {
    hours = entry.durationManual / 3600;
    stats.manualEntries++;
  } else if (entry.startTime && entry.endTime) {
    hours = (new Date(entry.endTime).getTime() - new Date(entry.startTime).getTime()) / (1000 * 60 * 60);
    stats.timerEntries++;
  }

  stats.hours += hours;

  if (entry.userPayRate) {
    const payRate = parseFloat(entry.userPayRate);
    stats.cost += hours * payRate;
  }

  return acc;
}, {} as Record<number, any>);

// Calculate project metrics (using project-specific data)
const projectMetrics = projectTimeEntries.reduce((acc, entry) => {
  if (!acc[entry.projectId]) {
    acc[entry.projectId] = {
      id: entry.projectId,
      name: entry.projectName,
      client: entry.clientName,
      entries: 0,
      hours: 0,
      cost: 0
    };
  }

  const stats = acc[entry.projectId];
  stats.entries++;

  let hours = 0;
  if (entry.durationManual) {
    hours = entry.durationManual / 3600;
  } else if (entry.startTime && entry.endTime) {
    hours = (new Date(entry.endTime).getTime() - new Date(entry.startTime).getTime()) / (1000 * 60 * 60);
  }

  stats.hours += hours;

  if (entry.userPayRate) {
    const payRate = parseFloat(entry.userPayRate);
    stats.cost += hours * payRate;
  }

  return acc;
}, {} as Record<number, any>);

// Calculate client metrics (using client-specific data that's not filtered by client)
const clientMetrics = clientTimeEntries.reduce((acc, entry) => {
  if (!acc[entry.clientName]) {
    acc[entry.clientName] = {
      name: entry.clientName,
      entries: 0,
      hours: 0,
      cost: 0,
      projects: new Set()
    };
  }

  const stats = acc[entry.clientName];
  stats.entries++;
  stats.projects.add(entry.projectName);

  let hours = 0;
  if (entry.durationManual) {
    hours = entry.durationManual / 3600;
  } else if (entry.startTime && entry.endTime) {
    hours = (new Date(entry.endTime).getTime() - new Date(entry.startTime).getTime()) / (1000 * 60 * 60);
  }

  stats.hours += hours;

  if (entry.userPayRate) {
    const payRate = parseFloat(entry.userPayRate);
    stats.cost += hours * payRate;
  }

  return acc;
}, {} as Record<string, any>);

// Convert to arrays and sort
const userMetricsArray = Object.values(userMetrics).map((user: any) => ({
  ...user,
  clients: Array.from(user.clients)
})).sort((a: any, b: any) => b.hours - a.hours);
const projectMetricsArray = Object.values(projectMetrics).sort((a: any, b: any) => b.hours - a.hours);
const clientMetricsArray = Object.entries(clientMetrics).map(([name, data]: [string, any]) => ({
  name,
  ...data,
  projectCount: data.projects.size
})).sort((a: any, b: any) => b.hours - a.hours);

// Get period display name
const getPeriodDisplayName = (period: string) => {
  switch (period) {
    case 'all': return 'All Time';
    case 'today': return 'Today';
    case 'week': return 'This Week';
    case 'month': return 'This Month';
    case 'quarter': return 'This Quarter';
    default: return 'This Week';
  }
};

const periodDisplayName = getPeriodDisplayName(period);

// Debug logging (remove in production)
// console.log('Period:', period);
// console.log('Start Date:', startDate);
// console.log('End Date:', endDate);
// console.log('Filter Conditions:', filterConditions);
---

<AdminLayout title="Enhanced Dashboard" currentPage="dashboard">
  <div class="space-y-8">
    <!-- Header -->
    <div class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-200 p-8 shadow-sm">
      <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center space-y-4 lg:space-y-0">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 mb-2">🚀 Enhanced Analytics Dashboard</h1>
          <p class="text-gray-600 text-lg">Advanced insights and visualizations for your time tracking data</p>
        </div>
        
        <!-- Period Info -->
        <div class="bg-white rounded-lg border border-blue-200 p-4">
          <div class="flex items-center space-x-3">
            <div class="p-2 bg-blue-100 rounded-lg">
              <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
            </div>
            <div>
              <p class="text-xl font-medium text-gray-700">
                {periodDisplayName}
              </p>
              <p class="text-sm text-gray-500">
                {startDate && endDate 
                  ? `${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`
                  : 'All Time'
                }
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Dashboard Options -->
    <div class="bg-white rounded-lg border border-gray-300 p-6 shadow-sm">
      <h3 class="text-lg font-semibold text-gray-900 mb-4">📊 Dashboard Options</h3>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <a href="/admin" class="flex items-center space-x-3 p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
          <div class="p-2 bg-blue-100 rounded-lg">
            <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
          </div>
          <div>
            <p class="font-medium text-gray-900">Standard Dashboard</p>
            <p class="text-sm text-gray-600">Basic charts and metrics</p>
          </div>
        </a>

        <a href="/admin/enhanced-dashboard-simple" class="flex items-center space-x-3 p-4 bg-blue-50 rounded-lg border border-blue-200">
          <div class="p-2 bg-blue-100 rounded-lg">
            <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
            </svg>
          </div>
          <div>
            <p class="font-medium text-gray-900">Enhanced Dashboard</p>
            <p class="text-sm text-gray-600">Advanced analytics and insights</p>
          </div>
        </a>

        <a href="/admin/time-entries" class="flex items-center space-x-3 p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
          <div class="p-2 bg-green-100 rounded-lg">
            <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <div>
            <p class="font-medium text-gray-900">Time Entries</p>
            <p class="text-sm text-gray-600">View and manage time entries</p>
          </div>
        </a>
      </div>
    </div>

    <!-- Overview Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      <div class="bg-white rounded-lg border border-gray-300 p-6 shadow-sm">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-600">Total Hours</p>
            <p class="text-2xl font-bold text-gray-900">{Math.round(totalHours)}</p>
          </div>
          <div class="p-3 bg-blue-100 rounded-lg">
            <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg border border-gray-300 p-6 shadow-sm">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-600">Total Cost</p>
            <p class="text-2xl font-bold text-gray-900">
              {canViewFinancialData ? `$${Math.round(totalCost).toLocaleString()}` : '***'}
            </p>
          </div>
          <div class="p-3 bg-green-100 rounded-lg">
            <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
            </svg>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg border border-gray-300 p-6 shadow-sm">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-600">Total Entries</p>
            <p class="text-2xl font-bold text-gray-900">{timeEntriesWithDetails.length}</p>
          </div>
          <div class="p-3 bg-purple-100 rounded-lg">
            <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
            </svg>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg border border-gray-300 p-6 shadow-sm">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm font-medium text-gray-600">Entry Types</p>
            <p class="text-lg font-bold text-gray-900">
              {Math.round(manualEntries/timeEntriesWithDetails.length*100)}% Manual
            </p>
            <p class="text-sm text-gray-500">
              {Math.round(timerEntries/timeEntriesWithDetails.length*100)}% Timer
            </p>
          </div>
          <div class="p-3 bg-orange-100 rounded-lg">
            <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
          </div>
        </div>
      </div>
    </div>

    <!-- Analytics Tabs -->
    <div class="bg-white rounded-lg border border-gray-300 shadow-sm">
      <!-- Tab Navigation -->
      <div class="border-b border-gray-200">
        <div class="flex items-center justify-between px-6">
          <nav class="flex space-x-8" aria-label="Tabs">
            <button 
              class="tab-button active py-4 px-1 border-b-2 border-blue-500 font-medium text-sm text-blue-600"
              data-tab="team"
            >
              👥 Team Members
            </button>
            <button 
              class="tab-button py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300"
              data-tab="projects"
            >
              📋 Projects
            </button>
            <button 
              class="tab-button py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300"
              data-tab="clients"
            >
              🏢 Clients
            </button>
          </nav>
          
          <!-- Time Period Dropdown -->
          <div class="relative">
            <select 
              id="periodSelect" 
              class="appearance-none bg-white border border-gray-300 text-gray-900 px-4 py-2 pr-8 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200 hover:bg-gray-50 text-sm"
            >
              <option value="all" selected={period === 'all'}>📅 All Time</option>
              <option value="today" selected={period === 'today'}>📅 Today</option>
              <option value="week" selected={period === 'week'}>📅 This Week</option>
              <option value="month" selected={period === 'month'}>📅 This Month</option>
              <option value="quarter" selected={period === 'quarter'}>📅 This Quarter</option>
            </select>
            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-500">
              <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Tab Content -->
      <div class="tab-content">
        <!-- Team Member Performance Tab -->
        <div id="tab-team" class="tab-panel active">
          <div class="p-6 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <div>
                <h3 class="text-lg font-semibold text-gray-900">👥 Team Member Performance</h3>
                <p class="text-sm text-gray-600">Sorted by total hours worked</p>
              </div>
              
              <!-- Client Filter Dropdown -->
              <div class="relative">
                <select 
                  id="teamClientFilter" 
                  class="appearance-none bg-white border border-gray-300 text-gray-900 px-3 py-2 pr-8 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200 hover:bg-gray-50 text-sm"
                >
                  <option value="all" selected={teamClientFilter === 'all'}>🏢 All Clients</option>
                  {allClients.map((client: any) => (
                    <option value={client.name} selected={teamClientFilter === client.name}>{client.name}</option>
                  ))}
                </select>
                <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-500">
                  <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
                  </svg>
                </div>
              </div>
            </div>
          </div>
          
          <div class="divide-y divide-gray-200">
            {userMetricsArray.slice(0, 10).map((user: any, index: number) => {
              const maxHours = Math.max(...userMetricsArray.map((u: any) => u.hours));
              const progressWidth = maxHours > 0 ? (user.hours / maxHours) * 100 : 0;
              
              return (
                <div class="p-6 hover:bg-gray-50 transition-colors" data-clients={user.clients.join(',')}>
                  <div class="flex items-center justify-between">
                    <div class="flex-1">
                      <h4 class="text-lg font-medium text-gray-900">{user.name}</h4>
                      <p class="text-sm text-gray-600">{user.email}</p>
                    </div>
                    
                    <div class="flex space-x-6 text-sm">
                      <div class="text-center">
                        <p class="text-2xl font-bold text-gray-900">{Math.round(user.hours)}</p>
                        <p class="text-xs text-gray-500">hours</p>
                      </div>
                      
                      <div class="text-center">
                        <p class="text-lg font-semibold text-gray-700">
                          {Math.round(user.manualEntries)}/{Math.round(user.timerEntries)}
                        </p>
                        <p class="text-xs text-gray-500">manual/timer</p>
                      </div>
                      
                      {canViewFinancialData && (
                        <div class="text-center">
                          <p class="text-lg font-bold text-gray-900">${Math.round(user.cost).toLocaleString()}</p>
                          <p class="text-xs text-gray-500">cost</p>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <!-- Progress bar -->
                  <div class="mt-4">
                    <div class="flex justify-between text-xs text-gray-500 mb-1">
                      <span>Hours: {Math.round(user.hours)}</span>
                      {canViewFinancialData && <span>Cost: ${Math.round(user.cost).toLocaleString()}</span>}
                      <span>Entries: {user.entries}</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        class="bg-blue-600 h-2 rounded-full transition-all duration-300"
                        style={`width: ${Math.min(100, progressWidth)}%`}
                      ></div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        <!-- Project Analysis Tab -->
        <div id="tab-projects" class="tab-panel hidden">
          <div class="p-6 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <div>
                <h3 class="text-lg font-semibold text-gray-900">📋 Project Analysis</h3>
                <p class="text-sm text-gray-600">Sorted by total hours worked</p>
              </div>
              
              <!-- Client Filter Dropdown -->
              <div class="relative">
                <select 
                  id="clientFilter" 
                  class="appearance-none bg-white border border-gray-300 text-gray-900 px-3 py-2 pr-8 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all duration-200 hover:bg-gray-50 text-sm"
                >
                  <option value="all" selected={projectClientFilter === 'all'}>🏢 All Clients</option>
                  {allClients.map((client: any) => (
                    <option value={client.name} selected={projectClientFilter === client.name}>{client.name}</option>
                  ))}
                </select>
                <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-500">
                  <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
                  </svg>
                </div>
              </div>
            </div>
          </div>
          
          <div class="divide-y divide-gray-200">
            {projectMetricsArray.slice(0, 10).map((project: any, index: number) => {
              const maxHours = Math.max(...projectMetricsArray.map((p: any) => p.hours));
              const progressWidth = maxHours > 0 ? (project.hours / maxHours) * 100 : 0;
              
              return (
                <div class="p-6 hover:bg-gray-50 transition-colors">
                  <div class="flex items-center justify-between">
                    <div class="flex-1">
                      <h4 class="text-lg font-medium text-gray-900">{project.name}</h4>
                      <p class="text-sm text-gray-600">Client: {project.client}</p>
                    </div>
                    
                    <div class="flex space-x-6 text-sm">
                      <div class="text-center">
                        <p class="text-2xl font-bold text-gray-900">{Math.round(project.hours)}</p>
                        <p class="text-xs text-gray-500">hours</p>
                      </div>
                      
                      {canViewFinancialData && (
                        <div class="text-center">
                          <p class="text-lg font-bold text-gray-900">${Math.round(project.cost).toLocaleString()}</p>
                          <p class="text-xs text-gray-500">cost</p>
                        </div>
                      )}
                      
                      <div class="text-center">
                        <p class="text-lg font-bold text-gray-900">{project.entries}</p>
                        <p class="text-xs text-gray-500">entries</p>
                      </div>
                    </div>
                  </div>
                  
                  <!-- Progress bar -->
                  <div class="mt-4">
                    <div class="flex justify-between text-xs text-gray-500 mb-1">
                      <span>Hours: {Math.round(project.hours)}</span>
                      {canViewFinancialData && <span>Cost: ${Math.round(project.cost).toLocaleString()}</span>}
                      <span>Entries: {project.entries}</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        class="bg-green-600 h-2 rounded-full transition-all duration-300"
                        style={`width: ${Math.min(100, progressWidth)}%`}
                      ></div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        <!-- Client Analysis Tab -->
        <div id="tab-clients" class="tab-panel hidden">
          <div class="p-6 border-b border-gray-200">
            <h3 class="text-lg font-semibold text-gray-900">🏢 Client Analysis</h3>
            <p class="text-sm text-gray-600">Sorted by total hours worked</p>
          </div>
          
          <div class="divide-y divide-gray-200">
            {clientMetricsArray.slice(0, 10).map((client: any, index: number) => {
              const maxHours = Math.max(...clientMetricsArray.map((c: any) => c.hours));
              const progressWidth = maxHours > 0 ? (client.hours / maxHours) * 100 : 0;
              
              return (
                <div class="p-6 hover:bg-gray-50 transition-colors">
                  <div class="flex items-center justify-between">
                    <div class="flex-1">
                      <h4 class="text-lg font-medium text-gray-900">{client.name}</h4>
                      <p class="text-sm text-gray-600">{client.projectCount} projects</p>
                    </div>
                    
                    <div class="flex space-x-6 text-sm">
                      <div class="text-center">
                        <p class="text-2xl font-bold text-gray-900">{Math.round(client.hours)}</p>
                        <p class="text-xs text-gray-500">hours</p>
                      </div>
                      
                      {canViewFinancialData && (
                        <div class="text-center">
                          <p class="text-lg font-bold text-gray-900">${Math.round(client.cost).toLocaleString()}</p>
                          <p class="text-xs text-gray-500">cost</p>
                        </div>
                      )}
                      
                      <div class="text-center">
                        <p class="text-lg font-bold text-gray-900">{client.entries}</p>
                        <p class="text-xs text-gray-500">entries</p>
                      </div>
                    </div>
                  </div>
                  
                  <!-- Progress bar -->
                  <div class="mt-4">
                    <div class="flex justify-between text-xs text-gray-500 mb-1">
                      <span>Hours: {Math.round(client.hours)}</span>
                      {canViewFinancialData && <span>Cost: ${Math.round(client.cost).toLocaleString()}</span>}
                      <span>Entries: {client.entries}</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        class="bg-purple-600 h-2 rounded-full transition-all duration-300"
                        style={`width: ${Math.min(100, progressWidth)}%`}
                      ></div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>

  </div>
</AdminLayout>

<script>
  // Tab functionality
  document.addEventListener('DOMContentLoaded', function() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabPanels = document.querySelectorAll('.tab-panel');

    tabButtons.forEach(button => {
      button.addEventListener('click', function(this: HTMLElement) {
        const targetTab = this.getAttribute('data-tab');
        
        // Remove active class from all buttons and panels
        tabButtons.forEach((btn) => {
          btn.classList.remove('active', 'border-blue-500', 'text-blue-600');
          btn.classList.add('border-transparent', 'text-gray-500');
        });
        
        tabPanels.forEach((panel) => {
          panel.classList.add('hidden');
          panel.classList.remove('active');
        });
        
        // Add active class to clicked button
        this.classList.add('active', 'border-blue-500', 'text-blue-600');
        this.classList.remove('border-transparent', 'text-gray-500');
        
        // Show corresponding panel
        const targetPanel = document.getElementById(`tab-${targetTab}`);
        if (targetPanel) {
          targetPanel.classList.remove('hidden');
          targetPanel.classList.add('active');
        }
      });
    });

    // Period change functionality
    const periodSelect = document.getElementById('periodSelect') as HTMLSelectElement;
    if (periodSelect) {
      console.log('Period select element found:', periodSelect);
      periodSelect.addEventListener('change', function() {
        const period = this.value;
        console.log('Period changed to:', period);
        const currentUrl = new URL(window.location.href);
        currentUrl.searchParams.set('period', period);
        console.log('Redirecting to:', currentUrl.toString());
        window.location.href = currentUrl.toString();
      });
    } else {
      console.log('Period select element not found');
    }

    // Client filter functionality for Project Analysis tab
    const clientFilter = document.getElementById('clientFilter') as HTMLSelectElement;
    if (clientFilter) {
      console.log('Client filter element found:', clientFilter);
      clientFilter.addEventListener('change', function() {
        const selectedClient = this.value;
        console.log('Client filter changed to:', selectedClient);
        updateProjectClientFilter(selectedClient);
      });
    } else {
      console.log('Client filter element not found');
    }

    // Client filter functionality for Team Member Performance tab
    const teamClientFilter = document.getElementById('teamClientFilter') as HTMLSelectElement;
    if (teamClientFilter) {
      console.log('Team client filter element found:', teamClientFilter);
      teamClientFilter.addEventListener('change', function() {
        const selectedClient = this.value;
        console.log('Team client filter changed to:', selectedClient);
        updateTeamClientFilter(selectedClient);
      });
    } else {
      console.log('Team client filter element not found');
    }
  });

  // Function to update project client filter via URL
  function updateProjectClientFilter(selectedClient: string) {
    const currentUrl = new URL(window.location.href);
    if (selectedClient === 'all') {
      currentUrl.searchParams.delete('projectClient');
    } else {
      currentUrl.searchParams.set('projectClient', selectedClient);
    }
    console.log('Redirecting to:', currentUrl.toString());
    window.location.href = currentUrl.toString();
  }

  // Function to update team client filter via URL
  function updateTeamClientFilter(selectedClient: string) {
    const currentUrl = new URL(window.location.href);
    if (selectedClient === 'all') {
      currentUrl.searchParams.delete('teamClient');
    } else {
      currentUrl.searchParams.set('teamClient', selectedClient);
    }
    console.log('Redirecting to:', currentUrl.toString());
    window.location.href = currentUrl.toString();
  }
</script>

<style>
  .tab-button {
    transition: all 0.2s ease-in-out;
  }
  
  .tab-button:hover {
    color: #374151;
  }
  
  .tab-button.active {
    color: #2563eb;
    border-bottom-color: #2563eb;
  }
  
  .tab-panel {
    transition: opacity 0.2s ease-in-out;
  }
  
  .tab-panel.hidden {
    display: none;
  }
  
  .tab-panel.active {
    display: block;
  }
</style>
