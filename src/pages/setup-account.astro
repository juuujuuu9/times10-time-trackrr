---
import Layout from '../layouts/Layout.astro';

// Get token from URL params
const url = new URL(Astro.request.url);
const token = url.searchParams.get('token');

  if (!token) {
    return Astro.redirect('/');
  }
---

<Layout title="Set Up Your Account - Times10">
  <div class="min-h-screen flex items-center justify-center p-4" style="background-color: #f0eef5;">
    <div class="max-w-md w-full">
      <!-- Logo and Header -->
      <div class="text-center mb-8">
        <div class="flex items-center justify-center mx-auto mb-6">
          <img src="/logo-black.png" alt="Times10 Logo" class="w-auto h-10 object-contain" />
        </div>
        <h1 class="text-3xl font-bold text-gray-900 mb-2">Welcome to the team!</h1>
        <p class="text-gray-600">Set up your account to get started</p>
      </div>

      <!-- Setup Form -->
      <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-8">
        <form id="setupForm" class="space-y-6">
          <div>
            <label for="password" class="block text-sm font-semibold text-gray-700 mb-2">
              Create Your Password
            </label>
            <input
              type="password"
              id="password"
              name="password"
              required
              minlength="8"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-all duration-200 bg-white text-gray-900"
              placeholder="Enter your password"
            />
            <p class="text-xs text-gray-500 mt-1">Password must be at least 8 characters long</p>
          </div>

          <div>
            <label for="confirmPassword" class="block text-sm font-semibold text-gray-700 mb-2">
              Confirm Password
            </label>
            <input
              type="password"
              id="confirmPassword"
              name="confirmPassword"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-all duration-200 bg-white text-gray-900"
              placeholder="Confirm your password"
            />
          </div>

          <div id="errorMessage" class="hidden">
            <div class="bg-red-50 border border-red-200 rounded-lg p-4">
              <p class="text-red-700 text-sm" id="errorText"></p>
            </div>
          </div>

          <div id="successMessage" class="hidden">
            <div class="bg-green-50 border border-green-200 rounded-lg p-4">
              <p class="text-green-700 text-sm">Account setup successful! Redirecting to login...</p>
            </div>
          </div>

          <button
            type="submit"
            id="submitBtn"
            class="w-full text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105 shadow-lg"
            style="background-color: #d63a2e;"
            onmouseover="this.style.backgroundColor='#b83228'"
            onmouseout="this.style.backgroundColor='#d63a2e'"
          >
            <span id="submitText">Set Up Account</span>
            <span id="loadingText" class="hidden">Setting up...</span>
          </button>
        </form>

        <div class="mt-6 text-center">
          <p class="text-sm text-gray-600">
            Already have an account? 
            <a href="/" class="text-gray-600 hover:text-gray-900 font-medium">Sign in here</a>
          </p>
        </div>
      </div>
    </div>
  </div>

  <script>
    const token = new URLSearchParams(window.location.search).get('token');
    const form = document.getElementById('setupForm') as HTMLFormElement;
    const submitBtn = document.getElementById('submitBtn') as HTMLButtonElement;
    const submitText = document.getElementById('submitText');
    const loadingText = document.getElementById('loadingText');
    const errorMessage = document.getElementById('errorMessage');
    const errorText = document.getElementById('errorText');
    const successMessage = document.getElementById('successMessage');

    // Function to check if both password fields are filled and update button color
    function updateButtonColor() {
      const password = (document.getElementById('password') as HTMLInputElement)?.value;
      const confirmPassword = (document.getElementById('confirmPassword') as HTMLInputElement)?.value;
      
      if (password && confirmPassword) {
        submitBtn.style.backgroundColor = '#d63a2e';
        submitBtn.style.opacity = '1';
      } else {
        submitBtn.style.backgroundColor = '#415058';
        submitBtn.style.opacity = '1';
      }
    }

    // Add event listeners to input fields
    document.getElementById('password')?.addEventListener('input', updateButtonColor);
    document.getElementById('confirmPassword')?.addEventListener('input', updateButtonColor);

    if (!token) {
      window.location.href = '/';
    }

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const password = (document.getElementById('password') as HTMLInputElement)?.value;
      const confirmPassword = (document.getElementById('confirmPassword') as HTMLInputElement)?.value;

      // Hide previous messages
      errorMessage?.classList.add('hidden');
      successMessage?.classList.add('hidden');

      // Validate passwords
      if (!password || password.length < 8) {
        showError('Password must be at least 8 characters long');
        return;
      }

      if (password !== confirmPassword) {
        showError('Passwords do not match');
        return;
      }

      // Show loading state
      if (submitBtn) submitBtn.disabled = true;
      submitText?.classList.add('hidden');
      loadingText?.classList.remove('hidden');

      try {
        const response = await fetch('/api/setup-account', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            token,
            password,
          }),
        });

        const data = await response.json();

        if (response.ok) {
          showSuccess();
          // Redirect to login after 2 seconds
          setTimeout(() => {
            window.location.href = '/';
          }, 2000);
        } else {
          showError(data.error || 'Failed to set up account');
        }
      } catch (error) {
        console.error('Error:', error);
        showError('Network error. Please try again.');
      } finally {
        // Reset loading state
        if (submitBtn) submitBtn.disabled = false;
        submitText?.classList.remove('hidden');
        loadingText?.classList.add('hidden');
      }
    });

    function showError(message: string) {
      if (errorText) errorText.textContent = message;
      errorMessage?.classList.remove('hidden');
    }

    function showSuccess() {
      successMessage?.classList.remove('hidden');
    }
  </script>
</Layout> 