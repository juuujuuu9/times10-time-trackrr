---
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import { neon } from '@neondatabase/serverless';
import { getSessionUser } from '../../utils/session';

// Get current user
const currentUser = await getSessionUser(Astro);
if (!currentUser) {
  return Astro.redirect('/login');
}

// Get database connection
const databaseUrl = import.meta.env.DATABASE_URL || process.env.DATABASE_URL;
if (!databaseUrl) {
  throw new Error('DATABASE_URL environment variable is not set');
}

const sql = neon(databaseUrl);

let teamsData: any[] = [];
let memberCounts: any[] = [];
let teamCreators: any[] = [];
let teamClients: any[] = [];
let error: string | null = null;

try {
  // Check if teams table exists first
  const tableExists = await sql`
    SELECT EXISTS (
      SELECT FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name = 'teams'
    );
  `;

  if (!tableExists[0]?.exists) {
    throw new Error('Teams table does not exist. Please run database migrations.');
  }

  // Get teams where current user is a member with their associated clients using direct SQL
  teamsData = await sql`
    SELECT 
      t.id, 
      t.name, 
      t.description, 
      t.created_by, 
      t.created_at, 
      t.updated_at, 
      t.archived,
      t.project_id,
      c.id as client_id,
      c.name as client_name
    FROM teams t
    LEFT JOIN projects p ON t.project_id = p.id
    LEFT JOIN clients c ON p.client_id = c.id
    INNER JOIN team_members tm ON t.id = tm.team_id
    WHERE t.archived = false 
      AND tm.user_id = ${currentUser.id}
    ORDER BY c.name ASC, t.created_at DESC
  `;

  // Get member counts for teams where current user is a member using direct SQL
  memberCounts = await sql`
    SELECT tm.team_id, COUNT(tm2.user_id) as member_count
    FROM team_members tm
    INNER JOIN team_members tm2 ON tm.team_id = tm2.team_id
    WHERE tm.user_id = ${currentUser.id}
    GROUP BY tm.team_id
  `;

  // Get team creators for teams where current user is a member using direct SQL
  teamCreators = await sql`
    SELECT t.id as team_id, u.name as creator_name, u.email as creator_email
    FROM teams t
    INNER JOIN users u ON t.created_by = u.id
    INNER JOIN team_members tm ON t.id = tm.team_id
    WHERE t.archived = false
      AND tm.user_id = ${currentUser.id}
  `;

} catch (err) {
  console.error('Database error:', err);
  error = err instanceof Error ? err.message : 'Unknown database error';
}

// Create a map of team ID to member count
const memberCountMap = new Map();
memberCounts.forEach(mc => {
  memberCountMap.set(mc.team_id, mc.member_count);
});

// Add member counts to teams
const allTeams = teamsData.map(team => ({
  ...team,
  memberCount: memberCountMap.get(team.id) || 0
}));

const creatorMap = new Map(teamCreators.map(creator => [creator.team_id, creator]));

// Group teams by client
const teamsByClient = new Map();
allTeams.forEach(team => {
  const clientKey = team.client_name || 'No Client';
  if (!teamsByClient.has(clientKey)) {
    teamsByClient.set(clientKey, {
      clientName: clientKey,
      clientId: team.client_id,
      teams: []
    });
  }
  teamsByClient.get(clientKey).teams.push(team);
});

// Convert to array and sort by client name
const groupedTeams = Array.from(teamsByClient.values()).sort((a, b) => 
  a.clientName.localeCompare(b.clientName)
);
---

<DashboardLayout title="Collaborations">
  <div class="space-y-6 max-w-7xl mx-auto px-4 sm:px-8 mt-12 w-full">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Collaborations</h1>
        <p class="text-gray-600">View and manage your collaborative teams</p>
      </div>
      <button
        id="startCollabBtn"
        class="inline-flex items-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-lg transition-colors duration-200"
      >
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        Start A Collab
      </button>
    </div>

    {error ? (
      <!-- Error State -->
      <div class="bg-red-50 border border-red-200 rounded-lg p-6">
        <div class="flex items-center">
          <svg class="h-8 w-8 text-red-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 19.5c-.77.833.192 2.5 1.732 2.5z"></path>
          </svg>
          <div>
            <h3 class="text-lg font-medium text-red-800">Database Error</h3>
            <p class="text-red-700 mt-1">{error}</p>
            <div class="mt-4">
              <p class="text-sm text-red-600">
                This usually means the collaborative features tables haven't been created yet. 
                Please run the database migration to create the required tables.
              </p>
            </div>
          </div>
        </div>
      </div>
    ) : (
      <!-- Collaborations by Client -->
      <div class="space-y-6">
        {groupedTeams.length === 0 ? (
          <div class="bg-white rounded-lg shadow border border-gray-300 p-8">
            <div class="text-center">
              <div class="mx-auto h-16 w-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                <svg class="h-8 w-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                </svg>
              </div>
              <h3 class="text-lg font-medium text-gray-900 mb-2">No collaborations yet</h3>
              <p class="text-gray-600 mb-4">You haven't been added to any collaborations yet.</p>
            </div>
          </div>
        ) : (
          groupedTeams.map((clientGroup) => (
            <div class="bg-white rounded-lg shadow border border-gray-300 overflow-hidden hover:shadow-lg transition-all duration-200 hover:border-gray-400">
              <div class="px-6 py-4 bg-gray-50 border-b border-gray-200">
                <div class="flex justify-between items-center">
                  <div class="flex-1">
                    <div class="flex items-center justify-between">
                      <h3 class="text-lg font-medium text-gray-900">{clientGroup.clientName}</h3>
                      <span class="text-sm text-gray-600 mr-8">{clientGroup.teams.length} collaboration{clientGroup.teams.length !== 1 ? 's' : ''}</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                  <thead class="bg-gray-50">
                    <tr>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                        Collaboration Name
                      </th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                        Members
                      </th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                        Created By
                      </th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">
                        Created Date
                      </th>
                      <th class="px-6 py-3 text-right text-xs font-medium text-gray-700 uppercase tracking-wider">
                        Actions
                      </th>
                    </tr>
                  </thead>
                  <tbody class="bg-white divide-y divide-gray-200">
                    {clientGroup.teams.map((team: any) => {
                      const creator = creatorMap.get(team.id);
                      return (
                        <tr class="hover:bg-gray-50">
                          <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                              <div class="h-8 w-8 bg-gray-200 rounded-lg flex items-center justify-center mr-3">
                                <svg class="h-4 w-4 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                </svg>
                              </div>
                              <div>
                                <div class="text-sm font-medium text-gray-900">{team.name}</div>
                                <div class="text-sm text-gray-500">{team.description || 'No description'}</div>
                              </div>
                            </div>
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                              {team.memberCount} members
                            </span>
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {creator?.creator_name || 'Unknown'}
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {new Date(team.created_at).toLocaleDateString()}
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <div class="flex justify-end space-x-2">
                              <a 
                                href={`/dashboard/collaborations/${team.id}`}
                                class="inline-flex items-center px-3 py-2 bg-gray-600 hover:bg-gray-700 text-white text-sm font-medium rounded-lg transition-all duration-200 shadow-sm hover:shadow-md transform hover:scale-105"
                              >
                                <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                </svg>
                                View
                              </a>
                            </div>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            </div>
          ))
        )}
      </div>
    )}
  </div>

  <!-- Start Collaboration Modal -->
  <div id="startCollabModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] border border-gray-300 flex flex-col">
        <div class="px-6 rounded-t-lg py-4 bg-gray-50 border-b border-gray-200 flex-shrink-0">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-gray-900">Start Collaboration</h3>
            <button
              class="close-collab-modal-btn text-gray-400 hover:text-gray-600 transition-colors p-1"
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
        <div class="flex-1 overflow-y-auto">
          <form id="startCollabForm" class="p-6">
            <!-- Project Selection -->
            <div class="mb-6">
              <label class="block text-sm font-medium text-gray-700 mb-2">Project</label>
              <div class="relative">
                <button
                  type="button"
                  id="projectDropdownBtn"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400 bg-white text-gray-900 text-left flex items-center justify-between"
                >
                  <span id="selectedProjectText" class="text-gray-500">Select a project...</span>
                  <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </button>
                <div id="projectDropdown" class="hidden absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-y-auto">
                  <div id="projectList" class="py-1">
                    <!-- Projects will be loaded here -->
                  </div>
                </div>
              </div>
              <p class="text-sm text-gray-500 mt-1">This collaboration will be automatically linked to the selected project.</p>
              <input type="hidden" id="selectedProjectId" />
            </div>

            <!-- Team Members Selection -->
            <div class="mb-6">
              <label class="block text-sm font-medium text-gray-700 mb-2">Team Members</label>
              <div class="relative">
                <input
                  type="text"
                  id="memberSearch"
                  placeholder="Search team members..."
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400 bg-white text-gray-900"
                />
                <div id="memberDropdown" class="hidden absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-y-auto">
                  <div id="memberList" class="py-1">
                    <!-- Team members will be loaded here -->
                  </div>
                </div>
              </div>
              <div id="selectedMembers" class="mt-3 flex flex-wrap gap-2">
                <!-- Selected members will be displayed here -->
              </div>
              <p class="text-sm text-gray-500 mt-1">Select team members who will participate in this collaboration. You can add more members later.</p>
            </div>

            <!-- Description (Optional) -->
            <div class="mb-6">
              <label for="collabDescription" class="block text-sm font-medium text-gray-700 mb-2">Description (Optional)</label>
              <textarea
                id="collabDescription"
                rows="3"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400 bg-white text-gray-900"
                placeholder="Describe the purpose of this collaboration..."
              ></textarea>
            </div>

            <div class="flex justify-end space-x-3">
              <button
                type="button"
                class="close-collab-modal-btn px-4 py-2 text-gray-700 bg-gray-200 hover:bg-gray-300 rounded-md transition-colors font-medium"
              >
                Cancel
              </button>
              <button
                type="submit"
                class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-md transition-colors font-medium"
              >
                Create Collaboration
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script define:vars={{ currentUser }}>
    // Collaboration modal functionality
    document.addEventListener('DOMContentLoaded', function() {
      const startCollabBtn = document.getElementById('startCollabBtn');
      const startCollabModal = document.getElementById('startCollabModal');
      const closeModalBtns = document.querySelectorAll('.close-collab-modal-btn');
      const projectDropdownBtn = document.getElementById('projectDropdownBtn');
      const projectDropdown = document.getElementById('projectDropdown');
      const memberSearch = document.getElementById('memberSearch');
      const memberDropdown = document.getElementById('memberDropdown');
      const startCollabForm = document.getElementById('startCollabForm');
      
      let projects = [];
      let allUsers = [];
      let selectedMembers = [];
      let selectedProject = null;

      // Load projects and users on page load
      loadProjects();
      loadUsers();

      // Modal open/close functionality
      if (startCollabBtn) {
        startCollabBtn.addEventListener('click', () => {
          startCollabModal.classList.remove('hidden');
          loadProjects();
          loadUsers();
        });
      }

      closeModalBtns.forEach(btn => {
        btn.addEventListener('click', () => {
          startCollabModal.classList.add('hidden');
          resetForm();
        });
      });

      // Close modal when clicking outside
      startCollabModal.addEventListener('click', (e) => {
        if (e.target === startCollabModal) {
          startCollabModal.classList.add('hidden');
          resetForm();
        }
      });

      // Project dropdown functionality
      if (projectDropdownBtn) {
        projectDropdownBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          projectDropdown.classList.toggle('hidden');
        });
      }

      // Close project dropdown when clicking outside
      document.addEventListener('click', (e) => {
        if (!projectDropdownBtn.contains(e.target) && !projectDropdown.contains(e.target)) {
          projectDropdown.classList.add('hidden');
        }
      });

      // Member search functionality
      if (memberSearch) {
        memberSearch.addEventListener('input', (e) => {
          const searchTerm = e.target.value.toLowerCase();
          filterMembers(searchTerm);
          memberDropdown.classList.remove('hidden');
        });

        memberSearch.addEventListener('focus', () => {
          memberDropdown.classList.remove('hidden');
        });

        memberSearch.addEventListener('click', () => {
          memberDropdown.classList.remove('hidden');
        });
      }

      // Close member dropdown when clicking outside
      document.addEventListener('click', (e) => {
        if (!memberSearch.contains(e.target) && !memberDropdown.contains(e.target)) {
          memberDropdown.classList.add('hidden');
        }
      });

      // Form submission
      if (startCollabForm) {
        startCollabForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          await createCollaboration();
        });
      }

      // Load projects (excluding those with existing collaborations)
      async function loadProjects() {
        try {
          // Fetch both projects and collaborations in parallel
          const [projectsResponse, collaborationsResponse] = await Promise.all([
            fetch('/api/projects'),
            fetch('/api/collaborations')
          ]);

          if (projectsResponse.ok && collaborationsResponse.ok) {
            const projectsData = await projectsResponse.json();
            const collaborationsData = await collaborationsResponse.json();
            
            const allProjects = projectsData.data || [];
            const existingCollaborations = collaborationsData.data || [];
            
            // Get project IDs that already have collaborations
            const projectsWithCollaborations = new Set(
              existingCollaborations.map(collab => collab.projectId).filter(id => id)
            );
            
            // Filter out projects that already have collaborations
            projects = allProjects.filter(project => !projectsWithCollaborations.has(project.id));
            
            console.log('Available projects for collaboration:', projects.length);
            console.log('Projects with existing collaborations:', projectsWithCollaborations.size);
            
            renderProjects();
          }
        } catch (error) {
          console.error('Error loading projects:', error);
        }
      }

      // Load users
      async function loadUsers() {
        try {
          const response = await fetch('/api/users');
          if (response.ok) {
            const data = await response.json();
            allUsers = data.data || [];
            renderMembers();
          }
        } catch (error) {
          console.error('Error loading users:', error);
        }
      }

      // Render projects in dropdown
      function renderProjects() {
        const projectList = document.getElementById('projectList');
        if (!projectList) return;

        if (projects.length === 0) {
          projectList.innerHTML = `
            <div class="px-4 py-3 text-center text-gray-500">
              <p class="text-sm">No projects available for collaboration</p>
              <p class="text-xs text-gray-400 mt-1">All projects already have active collaborations</p>
            </div>
          `;
          return;
        }

        projectList.innerHTML = projects.map(project => `
          <button
            type="button"
            class="w-full text-left px-4 py-2 hover:bg-gray-100 focus:bg-gray-100 focus:outline-none"
            data-project-id="${project.id}"
            data-project-name="${project.name}"
            data-client-name="${project.clientName || 'No Client'}"
          >
            <div class="font-medium text-gray-900">${project.name}</div>
            <div class="text-sm text-gray-500">${project.clientName || 'No Client'}</div>
          </button>
        `).join('');

        // Add click handlers to project buttons
        projectList.querySelectorAll('button').forEach(btn => {
          btn.addEventListener('click', (e) => {
            e.preventDefault();
            const projectId = btn.getAttribute('data-project-id');
            const projectName = btn.getAttribute('data-project-name');
            const clientName = btn.getAttribute('data-client-name');
            
            selectedProject = { id: parseInt(projectId), name: projectName, clientName };
            document.getElementById('selectedProjectText').textContent = `${clientName} - ${projectName}`;
            document.getElementById('selectedProjectId').value = projectId;
            projectDropdown.classList.add('hidden');
          });
        });
      }

      // Render members in dropdown
      function renderMembers() {
        const memberList = document.getElementById('memberList');
        if (!memberList) return;

        memberList.innerHTML = allUsers
          .filter(user => user.id !== currentUser.id) // Exclude current user
          .map(user => `
            <button
              type="button"
              class="w-full text-left px-4 py-2 hover:bg-gray-100 focus:bg-gray-100 focus:outline-none flex items-center"
              data-user-id="${user.id}"
              data-user-name="${user.name}"
              data-user-email="${user.email}"
              data-user-role="${user.role}"
            >
              <input type="checkbox" class="mr-3 rounded border-gray-300 text-blue-600 focus:ring-blue-500" ${selectedMembers.includes(user.id) ? 'checked' : ''}>
              <div>
                <div class="font-medium text-gray-900">${user.name}</div>
                <div class="text-sm text-gray-500">${user.email}</div>
              </div>
            </button>
          `).join('');

        // Add click handlers to member buttons
        memberList.querySelectorAll('button').forEach(btn => {
          btn.addEventListener('click', (e) => {
            e.preventDefault();
            const userId = parseInt(btn.getAttribute('data-user-id'));
            const userName = btn.getAttribute('data-user-name');
            const userEmail = btn.getAttribute('data-user-email');
            const userRole = btn.getAttribute('data-user-role');
            const checkbox = btn.querySelector('input[type="checkbox"]');
            
            if (selectedMembers.includes(userId)) {
              // Remove member
              selectedMembers = selectedMembers.filter(id => id !== userId);
              checkbox.checked = false;
            } else {
              // Add member
              selectedMembers.push(userId);
              checkbox.checked = true;
            }
            
            // Clear search input and repopulate dropdown
            memberSearch.value = '';
            renderMembers();
            updateSelectedMembersDisplay();
          });
        });
      }

      // Filter members based on search
      function filterMembers(searchTerm) {
        const memberList = document.getElementById('memberList');
        if (!memberList) return;

        const buttons = memberList.querySelectorAll('button');
        buttons.forEach(btn => {
          const userName = btn.getAttribute('data-user-name').toLowerCase();
          const userEmail = btn.getAttribute('data-user-email').toLowerCase();
          const matches = userName.includes(searchTerm) || userEmail.includes(searchTerm);
          btn.style.display = matches ? 'flex' : 'none';
        });
      }

      // Update selected members display
      function updateSelectedMembersDisplay() {
        const selectedMembersContainer = document.getElementById('selectedMembers');
        if (!selectedMembersContainer) return;

        selectedMembersContainer.innerHTML = selectedMembers.map(userId => {
          const user = allUsers.find(u => u.id === userId);
          if (!user) return '';
          
          return `
            <div class="inline-flex items-center px-3 py-1 bg-gray-100 text-gray-800 rounded-full text-sm">
              <span class="mr-2">${user.name}</span>
              <button
                type="button"
                class="ml-1 text-gray-600 hover:text-gray-800"
                onclick="removeMember(${userId})"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          `;
        }).join('');
      }

      // Remove member function (global for onclick)
      window.removeMember = function(userId) {
        selectedMembers = selectedMembers.filter(id => id !== userId);
        updateSelectedMembersDisplay();
        renderMembers(); // Re-render to update checkboxes
      };

      // Create collaboration
      async function createCollaboration() {
        if (!selectedProject) {
          if (projects.length === 0) {
            alert('No projects are available for collaboration. All projects already have active collaborations.');
          } else {
            alert('Please select a project');
          }
          return;
        }

        if (selectedMembers.length === 0) {
          alert('Please select at least one team member');
          return;
        }

        const description = document.getElementById('collabDescription').value;

        const payload = {
          projectId: selectedProject.id,
          description: description,
          teamMembers: selectedMembers
        };

        console.log('Creating collaboration with payload:', payload);

        try {
          const response = await fetch('/api/collaborations', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
          });

          console.log('API response status:', response.status);

          if (response.ok) {
            const result = await response.json();
            if (result.success) {
              // Dispatch notification event
              const notificationEvent = new CustomEvent('collaborationCreated', {
                detail: {
                  collaborationName: selectedProject.name,
                  teamMembers: selectedMembers.length,
                  projectName: selectedProject.name
                }
              });
              document.dispatchEvent(notificationEvent);
              
              // Show success message
              alert('Collaboration created successfully!');
              
              // Close modal and reset form
              startCollabModal.classList.add('hidden');
              resetForm();
              
              // Reload page to show new collaboration
              window.location.reload();
            } else {
              alert('Error creating collaboration: ' + (result.error || 'Unknown error'));
            }
          } else {
            const errorText = await response.text();
            console.error('API error response:', errorText);
            let errorData;
            try {
              errorData = JSON.parse(errorText);
            } catch (e) {
              errorData = { error: errorText };
            }
            alert('Error creating collaboration: ' + (errorData.error || errorData.details || 'Unknown error'));
          }
        } catch (error) {
          console.error('Error creating collaboration:', error);
          alert('Error creating collaboration: ' + error.message);
        }
      }

      // Reset form
      function resetForm() {
        selectedProject = null;
        selectedMembers = [];
        document.getElementById('selectedProjectText').textContent = 'Select a project...';
        document.getElementById('selectedProjectId').value = '';
        document.getElementById('collabDescription').value = '';
        document.getElementById('memberSearch').value = '';
        updateSelectedMembersDisplay();
        renderMembers();
      }
    });
  </script>
</DashboardLayout>
