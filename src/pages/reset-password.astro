---
import Layout from '../layouts/Layout.astro';
import { getSessionUser } from '../utils/session';
import { validatePasswordResetToken } from '../utils/passwordReset';

// Redirect if already logged in
const user = await getSessionUser(Astro);
if (user) {
  if (user.role === 'admin') {
    return Astro.redirect('/admin');
  } else {
    return Astro.redirect('/dashboard');
  }
}

// Get token from URL params
const url = new URL(Astro.request.url);
const token = url.searchParams.get('token');

let tokenValid = false;
let tokenError = '';

if (!token) {
  tokenError = 'No reset token provided';
} else {
  const validation = await validatePasswordResetToken(token);
  tokenValid = validation.valid;
  if (!validation.valid) {
    tokenError = validation.error || 'Invalid reset token';
  }
}
---

<Layout title="Reset Password - Times10 Time Tracker">
  <main class="min-h-[100dvh] flex items-center justify-center p-4" style="background-color: #f0eef5;">
    <div class="w-full max-w-md">
      <!-- Logo and Title -->
      <div class="text-center mb-8">
        <img src="/logo-black.png" alt="Times10 Logo" class="mx-auto mb-4 h-6 w-auto max-w-xs" />
        <img src="/trackr-logo.png" alt="Trackr Logo" class="mx-auto mb-4 h-16 w-auto" />
        <p class="text-[#415058]">Set your new password</p>
      </div>

      <!-- Password Reset Form -->
      <div class="bg-white rounded-2xl shadow-xl p-8 border border-[#C8CDD0]">
        {tokenValid ? (
          <form id="resetPasswordForm" class="space-y-6">
            <div>
              <label for="password" class="block text-sm font-medium text-[#415058] mb-2">
                New Password
              </label>
              <input
                type="password"
                id="password"
                name="password"
                required
                minlength="8"
                class="w-full px-4 py-3 border border-[#C8CDD0] rounded-lg focus:ring-2 focus:ring-[#415058] focus:border-transparent transition-colors bg-white text-[#1F292E] placeholder-[#C8CDD0]"
                placeholder="Enter your new password"
              />
              <p class="text-xs text-[#415058] mt-1">Password must be at least 8 characters long</p>
            </div>

            <div>
              <label for="confirmPassword" class="block text-sm font-medium text-[#415058] mb-2">
                Confirm New Password
              </label>
              <input
                type="password"
                id="confirmPassword"
                name="confirmPassword"
                required
                minlength="8"
                class="w-full px-4 py-3 border border-[#C8CDD0] rounded-lg focus:ring-2 focus:ring-[#415058] focus:border-transparent transition-colors bg-white text-[#1F292E] placeholder-[#C8CDD0]"
                placeholder="Confirm your new password"
              />
            </div>

            <div id="errorMessage" class="hidden">
              <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
                <p id="errorText"></p>
              </div>
            </div>

            <div id="successMessage" class="hidden">
              <div class="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg">
                <p id="successText"></p>
              </div>
            </div>

            <button
              type="submit"
              id="resetButton"
              class="w-full bg-[#415058] text-white font-semibold py-3 px-6 rounded-lg hover:bg-[#1F292E] focus:ring-2 focus:ring-[#415058] focus:ring-offset-2 transition-all duration-200"
            >
              <span id="buttonText">Reset Password</span>
              <span id="loadingSpinner" class="hidden">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Resetting...
              </span>
            </button>
          </form>
        ) : (
          <div class="text-center">
            <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6">
              <p class="font-medium">Invalid Reset Link</p>
              <p class="text-sm mt-1">{tokenError}</p>
            </div>
            <p class="text-[#415058] mb-4">This password reset link is invalid or has expired.</p>
            <a 
              href="/forgot-password" 
              class="inline-block bg-[#415058] text-white font-semibold py-2 px-4 rounded-lg hover:bg-[#1F292E] transition-colors"
            >
              Request New Reset Link
            </a>
          </div>
        )}

        <div class="mt-6 text-center">
          <p class="text-sm text-[#415058]">
            Remember your password? 
            <a href="/login" class="text-[#1F292E] hover:text-[#415058] font-medium">
              Sign in
            </a>
          </p>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Function to check if passwords match and update button color
  function updateButtonColor() {
    const password = (document.getElementById('password') as HTMLInputElement)?.value;
    const confirmPassword = (document.getElementById('confirmPassword') as HTMLInputElement)?.value;
    const button = document.getElementById('resetButton') as HTMLButtonElement;
    
    if (password && confirmPassword && password === confirmPassword && password.length >= 8) {
      button.style.backgroundColor = '#d63a2e';
      button.classList.remove('bg-[#415058]');
    } else {
      button.style.backgroundColor = '';
      button.classList.add('bg-[#415058]');
    }
  }

  // Add event listeners to input fields
  document.getElementById('password')?.addEventListener('input', updateButtonColor);
  document.getElementById('confirmPassword')?.addEventListener('input', updateButtonColor);

  document.getElementById('resetPasswordForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const form = e.target as HTMLFormElement;
    const password = (form.elements.namedItem('password') as HTMLInputElement).value;
    const confirmPassword = (form.elements.namedItem('confirmPassword') as HTMLInputElement).value;
    
    // Validate passwords match
    if (password !== confirmPassword) {
      const errorMessage = document.getElementById('errorMessage') as HTMLDivElement;
      const errorText = document.getElementById('errorText') as HTMLParagraphElement;
      errorText.textContent = 'Passwords do not match';
      errorMessage.classList.remove('hidden');
      return;
    }

    // Validate password length
    if (password.length < 8) {
      const errorMessage = document.getElementById('errorMessage') as HTMLDivElement;
      const errorText = document.getElementById('errorText') as HTMLParagraphElement;
      errorText.textContent = 'Password must be at least 8 characters long';
      errorMessage.classList.remove('hidden');
      return;
    }
    
    const button = document.getElementById('resetButton') as HTMLButtonElement;
    const buttonText = document.getElementById('buttonText') as HTMLSpanElement;
    const loadingSpinner = document.getElementById('loadingSpinner') as HTMLSpanElement;
    const errorMessage = document.getElementById('errorMessage') as HTMLDivElement;
    const errorText = document.getElementById('errorText') as HTMLParagraphElement;
    const successMessage = document.getElementById('successMessage') as HTMLDivElement;
    const successText = document.getElementById('successText') as HTMLParagraphElement;
    
    // Show loading state
    button.disabled = true;
    buttonText.classList.add('hidden');
    loadingSpinner.classList.remove('hidden');
    errorMessage.classList.add('hidden');
    successMessage.classList.add('hidden');
    
    try {
      // Get token from URL
      const token = new URLSearchParams(window.location.search).get('token');
      if (!token) {
        throw new Error('No reset token found');
      }

      const response = await fetch('/api/auth/reset-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ token, password }),
      });
      
      const data = await response.json();
      
      if (data.success) {
        // Show success message
        successText.textContent = data.message;
        successMessage.classList.remove('hidden');
        
        // Clear the form
        form.reset();
        
        // Redirect to login after 3 seconds
        setTimeout(() => {
          window.location.href = '/login';
        }, 3000);
      } else {
        // Show error message
        errorText.textContent = data.error || 'Failed to reset password';
        errorMessage.classList.remove('hidden');
      }
    } catch (error) {
      console.error('Password reset error:', error);
      errorText.textContent = 'Network error. Please try again.';
      errorMessage.classList.remove('hidden');
    } finally {
      // Reset button state
      button.disabled = false;
      buttonText.classList.remove('hidden');
      loadingSpinner.classList.add('hidden');
    }
  });
</script>
