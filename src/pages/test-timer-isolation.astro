---
import Layout from '../layouts/Layout.astro';
import Timer from '../components/Timer';
import { requireAuth } from '../utils/session';

// Require authentication
const user = await requireAuth('/login')(Astro) as any;
---

<Layout title="Timer Isolation Test - Times10 Time Tracker">
  <div class="min-h-screen bg-gray-50 p-8">
    <div class="max-w-4xl mx-auto">
      <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
        <h1 class="text-2xl font-bold text-gray-800 mb-4">Timer State Isolation Test</h1>
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
          <h2 class="text-lg font-semibold text-blue-900 mb-2">Current User</h2>
          <p class="text-blue-700">ID: {user.id}</p>
          <p class="text-blue-700">Name: {user.name}</p>
          <p class="text-blue-700">Email: {user.email}</p>
          <p class="text-blue-700">Role: {user.role}</p>
        </div>
        
        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
          <h2 class="text-lg font-semibold text-yellow-900 mb-2">Multi-User Timer Test Instructions</h2>
          <ol class="text-yellow-800 list-decimal list-inside space-y-1">
            <li>Start a timer on this page as the current user</li>
            <li>Open a new browser tab/window and log in as a different user</li>
            <li>Start a timer as the second user (both users should be tracking simultaneously)</li>
            <li>Switch between browser tabs to verify each user maintains their own timer state</li>
            <li>Log out one user and verify the other user's timer continues running</li>
            <li>Log back in as the first user and verify their timer state is preserved</li>
          </ol>
          <p class="text-yellow-700 text-sm mt-2">
            <strong>Expected Behavior:</strong> Multiple users can track time simultaneously without interfering with each other's timer states.
          </p>
        </div>

        <div class="bg-green-50 border border-green-200 rounded-lg p-4">
          <h2 class="text-lg font-semibold text-green-900 mb-2">All Active Timer States</h2>
          <div id="localStorageInfo" class="text-green-800">
            <p>Loading localStorage information...</p>
          </div>
        </div>
        
        <div class="bg-purple-50 border border-purple-200 rounded-lg p-4">
          <h2 class="text-lg font-semibold text-purple-900 mb-2">Current User Timer Status</h2>
          <div id="currentUserTimerInfo" class="text-purple-800">
            <p>Loading current user timer information...</p>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow-lg p-6">
        <Timer client:load />
      </div>
    </div>
  </div>
</Layout>

<script>
  function updateLocalStorageInfo() {
    const container = document.getElementById('localStorageInfo');
    if (!container) return;

    const keys = Object.keys(localStorage);
    const timerKeys = keys.filter(key => key.startsWith('timerState_'));
    
    if (timerKeys.length === 0) {
      container.innerHTML = '<p>No timer states found in localStorage</p>';
      return;
    }

    const timerInfo = timerKeys.map(key => {
      try {
        const state = JSON.parse(localStorage.getItem(key) || '{}');
        const isActive = state.isRunning && state.startTime;
        const statusClass = isActive ? 'text-green-600' : 'text-gray-600';
        const statusText = isActive ? 'ðŸŸ¢ ACTIVE' : 'âšª INACTIVE';
        
        return `
          <div class="border-t border-green-200 pt-2 mt-2">
            <p><strong>Key:</strong> ${key}</p>
            <p><strong>User ID:</strong> ${state.userId || 'Unknown'}</p>
            <p><strong>Status:</strong> <span class="${statusClass} font-bold">${statusText}</span></p>
            <p><strong>Task ID:</strong> ${state.selectedTask || 'None'}</p>
            <p><strong>Start Time:</strong> ${state.startTime ? new Date(state.startTime).toLocaleString() : 'None'}</p>
            <p><strong>Elapsed Time:</strong> ${state.elapsedTime || 0} seconds</p>
            ${isActive ? `<p><strong>Duration:</strong> ${Math.floor(state.elapsedTime / 3600)}h ${Math.floor((state.elapsedTime % 3600) / 60)}m ${state.elapsedTime % 60}s</p>` : ''}
          </div>
        `;
      } catch (error) {
        return `<p class="text-red-600">Error parsing ${key}: ${error}</p>`;
      }
    }).join('');

    container.innerHTML = timerInfo;
  }

  function updateCurrentUserTimerInfo() {
    const container = document.getElementById('currentUserTimerInfo');
    if (!container) return;

    // Get current user ID from the page
    const userInfo = document.querySelector('.bg-blue-50 p:first-child');
    const userIdMatch = userInfo?.textContent?.match(/ID: (\d+)/);
    const currentUserId = userIdMatch ? parseInt(userIdMatch[1]) : null;

    if (!currentUserId) {
      container.innerHTML = '<p>Could not determine current user ID</p>';
      return;
    }

    const timerStateKey = `timerState_${currentUserId}`;
    const savedState = localStorage.getItem(timerStateKey);
    
    if (!savedState) {
      container.innerHTML = '<p>No timer state found for current user</p>';
      return;
    }

    try {
      const state = JSON.parse(savedState);
      const isActive = state.isRunning && state.startTime;
      const statusClass = isActive ? 'text-green-600' : 'text-gray-600';
      const statusText = isActive ? 'ðŸŸ¢ ACTIVE' : 'âšª INACTIVE';
      
      container.innerHTML = `
        <p><strong>User ID:</strong> ${state.userId || 'Unknown'}</p>
        <p><strong>Status:</strong> <span class="${statusClass} font-bold">${statusText}</span></p>
        <p><strong>Task ID:</strong> ${state.selectedTask || 'None'}</p>
        <p><strong>Start Time:</strong> ${state.startTime ? new Date(state.startTime).toLocaleString() : 'None'}</p>
        <p><strong>Elapsed Time:</strong> ${state.elapsedTime || 0} seconds</p>
        ${isActive ? `<p><strong>Duration:</strong> ${Math.floor(state.elapsedTime / 3600)}h ${Math.floor((state.elapsedTime % 3600) / 60)}m ${state.elapsedTime % 60}s</p>` : ''}
      `;
    } catch (error) {
      container.innerHTML = `<p class="text-red-600">Error parsing timer state: ${error}</p>`;
    }
  }

  // Update localStorage info every 2 seconds
  setInterval(updateLocalStorageInfo, 2000);
  setInterval(updateCurrentUserTimerInfo, 2000);
  
  // Initial update
  updateLocalStorageInfo();
  updateCurrentUserTimerInfo();
</script>
