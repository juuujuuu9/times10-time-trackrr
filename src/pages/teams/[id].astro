---
import Layout from '../../layouts/Layout.astro';
import { getSessionUser } from '../../utils/session';
import { TeamDashboardService } from '../../services/TeamDashboardService';

// Get current user
const currentUser = await getSessionUser(Astro);
if (!currentUser) {
  return Astro.redirect('/login');
}

const teamId = parseInt(Astro.params.id!);
if (!teamId || isNaN(teamId)) {
  return Astro.redirect('/teams');
}

// Get date range from query params
const startDateParam = Astro.url.searchParams.get('startDate');
const endDateParam = Astro.url.searchParams.get('endDate');

let startDate: Date | undefined;
let endDate: Date | undefined;

if (startDateParam) {
  startDate = new Date(startDateParam);
}
if (endDateParam) {
  endDate = new Date(endDateParam);
}

// Get team dashboard data
const teamDashboard = await TeamDashboardService.getTeamDashboard(
  teamId, 
  currentUser.id, 
  startDate, 
  endDate
);

if (!teamDashboard) {
  return Astro.redirect('/teams');
}
---

<Layout title={`${teamDashboard.teamName} - Team Dashboard`}>
  <div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white border-b border-gray-200">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="py-6">
          <div class="flex items-center justify-between">
            <div class="flex items-center">
              <a href="/teams" class="text-gray-400 hover:text-gray-600 mr-4">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </a>
              <div>
                <h1 class="text-3xl font-bold text-gray-900">{teamDashboard.teamName}</h1>
                <p class="mt-1 text-gray-600">{teamDashboard.teamDescription}</p>
              </div>
            </div>
            <div class="flex items-center space-x-4">
              <div class="flex items-center space-x-2">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  {teamDashboard.userRole}
                </span>
              </div>
              <div class="relative">
                <button 
                  id="teamActionsBtn"
                  class="inline-flex items-center px-3 py-2 border border-gray-300 rounded-lg bg-white text-sm font-medium text-gray-700 hover:bg-gray-50"
                >
                  Actions
                  <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Team Stats -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-lg border border-gray-200 p-6">
          <div class="flex items-center">
            <div class="p-2 bg-blue-100 rounded-lg">
              <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Total Hours</p>
              <p class="text-2xl font-bold text-gray-900">{Math.round(teamDashboard.teamStats.totalHours)}h</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg border border-gray-200 p-6">
          <div class="flex items-center">
            <div class="p-2 bg-green-100 rounded-lg">
              <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Total Cost</p>
              <p class="text-2xl font-bold text-gray-900">${Math.round(teamDashboard.teamStats.totalCost)}</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg border border-gray-200 p-6">
          <div class="flex items-center">
            <div class="p-2 bg-purple-100 rounded-lg">
              <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Active Projects</p>
              <p class="text-2xl font-bold text-gray-900">{teamDashboard.teamStats.activeProjects}</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg border border-gray-200 p-6">
          <div class="flex items-center">
            <div class="p-2 bg-orange-100 rounded-lg">
              <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Team Members</p>
              <p class="text-2xl font-bold text-gray-900">{teamDashboard.projects.reduce((sum, p) => sum + p.memberCount, 0)}</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Projects Section -->
      <div class="bg-white rounded-lg border border-gray-200">
        <div class="px-6 py-4 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <h2 class="text-lg font-semibold text-gray-900">Team Projects</h2>
            <button 
              id="addProjectBtn"
              class="inline-flex items-center px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg transition-colors"
            >
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              Add Project
            </button>
          </div>
        </div>
        
        <div class="p-6">
          {teamDashboard.projects.length === 0 ? (
            <div class="text-center py-8">
              <div class="mx-auto h-16 w-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                <svg class="h-8 w-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
              </div>
              <h3 class="text-lg font-medium text-gray-900 mb-2">No projects assigned</h3>
              <p class="text-gray-600 mb-4">This team doesn't have any projects assigned yet.</p>
              <button 
                id="assignFirstProjectBtn"
                class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors"
              >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                Assign Project
              </button>
            </div>
          ) : (
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {teamDashboard.projects.map((project) => (
                <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                  <div class="flex items-start justify-between mb-3">
                    <div>
                      <h3 class="text-lg font-semibold text-gray-900">{project.projectName}</h3>
                      <p class="text-sm text-gray-600">{project.clientName}</p>
                    </div>
                    <div class="flex items-center space-x-2">
                      <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                        {project.memberCount} members
                      </span>
                    </div>
                  </div>
                  
                  <div class="space-y-2 mb-4">
                    <div class="flex items-center justify-between text-sm">
                      <span class="text-gray-600">Hours:</span>
                      <span class="font-medium">{Math.round(project.totalHours)}h</span>
                    </div>
                    <div class="flex items-center justify-between text-sm">
                      <span class="text-gray-600">Cost:</span>
                      <span class="font-medium">${Math.round(project.totalCost)}</span>
                    </div>
                  </div>
                  
                  <div class="pt-3 border-t border-gray-200">
                    <a 
                      href={`/projects/${project.projectId}`}
                      class="w-full inline-flex items-center justify-center px-3 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium rounded-lg transition-colors"
                    >
                      View Project
                      <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                      </svg>
                    </a>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      <!-- Collaborative Features -->
      <div class="mt-8 grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Team Chat -->
        <div id="team-chat-container" data-team-id={teamId} data-user-id={currentUser.id}></div>
        
        <!-- Team Notes -->
        <div id="team-notes-container" data-team-id={teamId} data-user-id={currentUser.id}></div>
      </div>

      <!-- Team Files -->
      <div class="mt-6">
        <div id="team-files-container" data-team-id={teamId} data-user-id={currentUser.id}></div>
      </div>

      <!-- Recent Activity -->
      <div class="mt-8 bg-white rounded-lg border border-gray-200">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-semibold text-gray-900">Recent Activity</h2>
        </div>
        <div class="p-6">
          <div class="space-y-4">
            {teamDashboard.projects.flatMap(p => p.recentActivity).slice(0, 10).map((activity, index) => (
              <div class="flex items-center space-x-3">
                <div class="h-8 w-8 bg-blue-100 rounded-full flex items-center justify-center">
                  <svg class="h-4 w-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                </div>
                <div class="flex-1">
                  <p class="text-sm text-gray-900">
                    <span class="font-medium">{activity.userName}</span> {activity.action}
                  </p>
                  <p class="text-xs text-gray-500">{new Date(activity.timestamp).toLocaleString()}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Add Project Modal -->
  <div id="addProjectModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-semibold text-gray-900">Assign Project to Team</h3>
        </div>
        <form id="addProjectForm" class="px-6 py-4">
          <div class="space-y-4">
            <div>
              <label for="projectSelect" class="block text-sm font-medium text-gray-700 mb-1">Select Project</label>
              <select 
                id="projectSelect" 
                name="projectId"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">Choose a project...</option>
                <!-- Projects will be loaded dynamically -->
              </select>
            </div>
          </div>
          <div class="flex justify-end space-x-3 mt-6">
            <button 
              type="button" 
              id="cancelAddProject"
              class="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
            >
              Cancel
            </button>
            <button 
              type="submit"
              class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
            >
              Assign Project
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Team Dashboard JavaScript
  document.addEventListener('DOMContentLoaded', function() {
    // Get team ID and user ID from data attributes
    const teamChatContainer = document.getElementById('team-chat-container');
    const teamId = teamChatContainer?.dataset.teamId;
    const currentUserId = teamChatContainer?.dataset.userId;

    // Initialize containers
    const teamNotesContainer = document.getElementById('team-notes-container');
    const teamFilesContainer = document.getElementById('team-files-container');

    // Note: React components would need to be loaded separately
    // For now, we'll show placeholder content
    if (teamChatContainer) {
      teamChatContainer.innerHTML = `
        <div class="bg-white rounded-lg border border-gray-200 p-6">
          <div class="text-center py-8">
            <div class="mx-auto h-12 w-12 bg-gray-100 rounded-full flex items-center justify-center mb-3">
              <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
              </svg>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">Team Chat</h3>
            <p class="text-gray-500">Chat functionality will be available soon.</p>
          </div>
        </div>
      `;
    }

    if (teamNotesContainer) {
      teamNotesContainer.innerHTML = `
        <div class="bg-white rounded-lg border border-gray-200 p-6">
          <div class="text-center py-8">
            <div class="mx-auto h-12 w-12 bg-gray-100 rounded-full flex items-center justify-center mb-3">
              <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">Team Notes</h3>
            <p class="text-gray-500">Notes functionality will be available soon.</p>
          </div>
        </div>
      `;
    }

    if (teamFilesContainer) {
      teamFilesContainer.innerHTML = `
        <div class="bg-white rounded-lg border border-gray-200 p-6">
          <div class="text-center py-8">
            <div class="mx-auto h-12 w-12 bg-gray-100 rounded-full flex items-center justify-center mb-3">
              <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">Team Files</h3>
            <p class="text-gray-500">File sharing functionality will be available soon.</p>
          </div>
        </div>
      `;
    }

    const addProjectBtn = document.getElementById('addProjectBtn');
    const assignFirstProjectBtn = document.getElementById('assignFirstProjectBtn');
    const addProjectModal = document.getElementById('addProjectModal');
    const cancelAddProject = document.getElementById('cancelAddProject');
    const addProjectForm = document.getElementById('addProjectForm');
    const projectSelect = document.getElementById('projectSelect');

    // Show add project modal
    function showAddProjectModal() {
      loadAvailableProjects();
      addProjectModal?.classList.remove('hidden');
    }

    // Hide add project modal
    function hideAddProjectModal() {
      addProjectModal?.classList.add('hidden');
      (addProjectForm as HTMLFormElement)?.reset();
    }

    // Load available projects
    async function loadAvailableProjects() {
      try {
        const response = await fetch('/api/projects');
        const result = await response.json();
        
        if (result.success) {
          projectSelect!.innerHTML = '<option value="">Choose a project...</option>';
          result.data.forEach((project: any) => {
            const option = document.createElement('option');
            option.value = project.id;
            option.textContent = project.name;
            projectSelect!.appendChild(option);
          });
        }
      } catch (error) {
        console.error('Error loading projects:', error);
      }
    }

    // Event listeners
    addProjectBtn?.addEventListener('click', showAddProjectModal);
    assignFirstProjectBtn?.addEventListener('click', showAddProjectModal);
    cancelAddProject?.addEventListener('click', hideAddProjectModal);

    // Close modal when clicking outside
    addProjectModal?.addEventListener('click', function(e) {
      if (e.target === addProjectModal) {
        hideAddProjectModal();
      }
    });

    // Handle form submission
    addProjectForm?.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(addProjectForm as HTMLFormElement);
      const projectId = formData.get('projectId');

      try {
        const response = await fetch(`/api/projects/${projectId}/teams`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ teamId: teamId })
        });

        const result = await response.json();

        if (result.success) {
          // Refresh the page to show the new project
          window.location.reload();
        } else {
          alert('Error assigning project: ' + (result.error || 'Unknown error'));
        }
      } catch (error) {
        console.error('Error assigning project:', error);
        alert('Error assigning project. Please try again.');
      }
    });
  });
</script>
