---
import Layout from '../layouts/Layout.astro';
import { requireAuth } from '../utils/session';
import Timer from '../components/Timer';

// Require authentication
const user = await requireAuth('/login')(Astro) as any;
---

<Layout title="Dashboard - Times10 Time Tracker">
  <div class="min-h-screen bg-gray-50">
    <!-- Loading State (shown immediately) -->
    <div id="loadingState" class="min-h-screen bg-gray-50 flex items-center justify-center">
      <div class="text-center">
        <div class="w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
        <p class="text-gray-600 text-lg">Loading dashboard...</p>
      </div>
    </div>

    <!-- Dashboard Content (hidden initially) -->
    <div id="dashboardContent" class="hidden">
      <!-- Header -->
      <header class="bg-white shadow-sm border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="flex justify-between items-center py-4">
            <div class="flex items-center">
              <h1 class="text-2xl font-bold text-gray-900">Dashboard</h1>
              <span class="ml-3 px-3 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full capitalize">
                {user.role}
              </span>
            </div>
            <div class="flex items-center space-x-4">
              <span class="text-sm text-gray-600">Welcome, {user?.name || 'User'}</span>
              <button
                id="logoutButton"
                class="text-sm text-gray-600 hover:text-gray-900 transition-colors"
              >
                Sign Out
              </button>
            </div>
          </div>
        </div>
      </header>

      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <!-- Main Content -->
          <div class="lg:col-span-2 space-y-8">
            <!-- Timer Section -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h2 class="text-xl font-semibold text-gray-900 mb-6">Task Timer</h2>
              <Timer client:load />
            </div>

            <!-- Recent Time Entries -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
              <div class="px-6 py-4 border-b border-gray-200">
                <h2 class="text-xl font-semibold text-gray-900">Recent Time Entries</h2>
              </div>
              <div class="p-6">
                <div id="recentEntries" class="space-y-4">
                  <div class="text-center py-8">
                    <div class="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                      <span class="text-gray-400 text-xl">‚è±Ô∏è</span>
                    </div>
                    <p class="text-gray-500">Loading your recent time entries...</p>
                  </div>
                </div>
              </div>
            </div>


          </div>

          <!-- Sidebar -->
          <div class="space-y-6">
            <!-- Quick Stats -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">This Week</h3>
              <div class="space-y-4">
                <div class="flex justify-between items-center">
                  <span class="text-sm text-gray-600">Hours Tracked</span>
                  <span id="weeklyHours" class="text-lg font-semibold text-gray-900">-</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-sm text-gray-600">Tasks Completed</span>
                  <span id="weeklyTasks" class="text-lg font-semibold text-gray-900">-</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-sm text-gray-600">Projects</span>
                  <span id="weeklyProjects" class="text-lg font-semibold text-gray-900">-</span>
                </div>
              </div>
            </div>

            <!-- Quick Actions -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
              <div class="space-y-3">
                <button
                  id="addTimeEntryBtn"
                  class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium"
                >
                  Add Manual Time Entry
                </button>
                <button
                  id="viewReportsBtn"
                  class="w-full bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors text-sm font-medium"
                >
                  View Reports
                </button>
                <a
                  href="/test-enhanced-timer"
                  class="w-full bg-green-100 text-green-700 px-4 py-2 rounded-lg hover:bg-green-200 transition-colors text-sm font-medium text-center block"
                >
                  Test Enhanced Timer
                </a>
                <a
                  href="/test-timer-persistence"
                  class="w-full bg-purple-100 text-purple-700 px-4 py-2 rounded-lg hover:bg-purple-200 transition-colors text-sm font-medium text-center block"
                >
                  Test Timer Persistence
                </a>
              </div>
            </div>

            <!-- Recent Projects -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">Recent Projects</h3>
              <div id="recentProjects" class="space-y-3">
                <div class="text-center py-4">
                  <p class="text-gray-500 text-sm">Loading projects...</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Show dashboard content after a brief delay to prevent flash
  document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
      const loadingState = document.getElementById('loadingState');
      const dashboardContent = document.getElementById('dashboardContent');
      
      if (loadingState && dashboardContent) {
        loadingState.classList.add('hidden');
        dashboardContent.classList.remove('hidden');
      }
    }, 100); // Brief delay to ensure smooth transition
  });

  // Get current user ID from session
  async function getCurrentUserId() {
    try {
      const response = await fetch('/api/auth/me');
      if (response.ok) {
        const data = await response.json();
        if (data.success && data.user) {
          return data.user.id;
        } else {
          console.error('Invalid response format:', data);
          return null;
        }
      } else if (response.status === 401) {
        // If unauthorized, redirect to login
        window.location.href = '/login';
        return null;
      } else {
        const errorData = await response.json().catch(() => ({}));
        console.error('Auth error:', errorData.error || 'Unknown error');
      }
    } catch (error) {
      console.error('Error getting current user:', error);
    }
    return null;
  }

  // Load dashboard data
  async function loadDashboardData() {
    try {
      const userId = await getCurrentUserId();
      if (!userId) {
        console.error('No user ID available');
        // Show error state for the sections
        updateRecentEntries([]);
        return;
      }

      // Load user's recent time entries
      const entriesResponse = await fetch('/api/time-entries?userId=' + encodeURIComponent(userId));
      if (entriesResponse.ok) {
        const entriesData = await entriesResponse.json();
        updateRecentEntries(entriesData.data || []);
      } else {
        console.error('Failed to load time entries:', entriesResponse.status);
        updateRecentEntries([]);
      }

      // Load weekly stats
      const statsResponse = await fetch('/api/reports/weekly-stats?userId=' + encodeURIComponent(userId));
      if (statsResponse.ok) {
        const statsData = await statsResponse.json();
        updateWeeklyStats(statsData);
      }

      // Load recent projects
      const projectsResponse = await fetch('/api/projects?recent=true&userId=' + encodeURIComponent(userId));
      if (projectsResponse.ok) {
        const projectsData = await projectsResponse.json();
        updateRecentProjects(projectsData.data || []);
      }

    } catch (error) {
      console.error('Error loading dashboard data:', error);
      // Retry loading after a delay if there was an error
      setTimeout(() => {
        console.log('Retrying dashboard data load...');
        loadDashboardData();
      }, 2000);
    }
  }

  function updateRecentEntries(entries: any[]) {
    const container = document.getElementById('recentEntries');
    if (!container) return;

    if (entries.length === 0) {
      container.innerHTML = `
        <div class="text-center py-8">
          <div class="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span class="text-gray-400 text-xl">‚è±Ô∏è</span>
          </div>
          <p class="text-gray-500">No time entries yet</p>
          <p class="text-gray-400 text-sm mt-1">Start tracking your time to see entries here</p>
        </div>
      `;
      return;
    }

    container.innerHTML = entries.slice(0, 5).map((entry: any) => `
      <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg border border-gray-200">
        <div class="flex items-center">
          <div class="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mr-4">
            <span class="text-blue-600 text-lg">üìù</span>
          </div>
          <div>
            <p class="font-medium text-gray-900">${entry.taskName || 'Unknown Task'}</p>
            <p class="text-sm text-gray-600">${entry.projectName || 'Unknown Project'}</p>
            ${entry.notes ? `<p class="text-sm text-gray-500 mt-1 italic">"${entry.notes}"</p>` : ''}
          </div>
        </div>
        <div class="text-right">
          <p class="text-sm font-medium text-gray-900">
            ${formatDuration(entry.duration || 0)}
          </p>
          <p class="text-xs text-gray-500">
            ${new Date(entry.startTime).toLocaleDateString()}
          </p>
        </div>
      </div>
    `).join('');
  }

  function updateWeeklyStats(stats: any) {
    const weeklyHours = document.getElementById('weeklyHours');
    const weeklyTasks = document.getElementById('weeklyTasks');
    const weeklyProjects = document.getElementById('weeklyProjects');

    if (weeklyHours) weeklyHours.textContent = formatHours(stats.totalHours || 0);
    if (weeklyTasks) weeklyTasks.textContent = stats.completedTasks || 0;
    if (weeklyProjects) weeklyProjects.textContent = stats.activeProjects || 0;
  }

  function updateRecentProjects(projects: any[]) {
    const container = document.getElementById('recentProjects');
    if (!container) return;

    if (projects.length === 0) {
      container.innerHTML = '<p class="text-gray-500 text-sm">No recent projects</p>';
      return;
    }

    container.innerHTML = projects.slice(0, 3).map((project: any) => `
      <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
        <div>
          <p class="font-medium text-gray-900 text-sm">${project.name}</p>
          <p class="text-xs text-gray-600">${project.clientName || 'Unknown Client'}</p>
        </div>
        <span class="w-2 h-2 bg-green-500 rounded-full"></span>
      </div>
    `).join('');
  }

  function formatDuration(seconds: number): string {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${hours}h ${minutes}m`;
  }

  function formatHours(hours: number): string {
    return hours.toFixed(1) + 'h';
  }

  // Logout functionality
  document.getElementById('logoutButton')?.addEventListener('click', async () => {
    try {
      const response = await fetch('/api/auth/logout', {
        method: 'POST',
      });
      
      if (response.ok) {
        window.location.href = '/login';
      }
    } catch (error) {
      console.error('Logout error:', error);
    }
  });

  // Load data when page loads
  document.addEventListener('DOMContentLoaded', loadDashboardData);
</script> 