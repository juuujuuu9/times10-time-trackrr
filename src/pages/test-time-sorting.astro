---
import AdminLayout from '../layouts/AdminLayout.astro';
---

<AdminLayout title="Time Sorting Test" currentPage="test">
  <div class="space-y-6">
    <h1 class="text-2xl font-bold text-white">Time Entry Sorting Test</h1>
    
    <!-- Data Generation Controls -->
    <div class="bg-gray-800 rounded-lg shadow border border-gray-700 p-6">
      <h2 class="text-lg font-medium text-white mb-4">Data Generation</h2>
      <div class="space-y-4">
        <div class="flex gap-4">
          <button 
            id="generateExtendedData" 
            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
          >
            Generate Extended Time Data (Every Weekday - 30 Days)
          </button>
          <button 
            id="generateExtendedDataClear" 
            class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors"
          >
            Clear & Generate Extended Data
          </button>
        </div>
        <div id="dataGenerationStatus" class="text-sm text-gray-300"></div>
      </div>
    </div>

    <!-- Time Entries Display -->
    <div class="bg-gray-800 rounded-lg shadow border border-gray-700 p-6">
      <h2 class="text-lg font-medium text-white mb-4">Time Entries</h2>
      
      <!-- Sorting Controls -->
      <div class="mb-4 flex gap-4 items-center">
        <label class="text-gray-300">Sort by:</label>
        <select id="sortBy" class="bg-gray-700 text-white px-3 py-1 rounded border border-gray-600">
          <option value="startTime">Start Time</option>
          <option value="endTime">End Time</option>
          <option value="duration">Duration</option>
          <option value="user">User</option>
          <option value="task">Task</option>
        </select>
        <select id="sortOrder" class="bg-gray-700 text-white px-3 py-1 rounded border border-gray-600">
          <option value="desc">Newest First</option>
          <option value="asc">Oldest First</option>
        </select>
        <input 
          type="date" 
          id="dateFilter" 
          class="bg-gray-700 text-white px-3 py-1 rounded border border-gray-600"
          placeholder="Filter by date"
        >
        <button 
          id="loadEntries" 
          class="px-4 py-1 bg-green-600 hover:bg-green-700 text-white rounded transition-colors"
        >
          Load Entries
        </button>
      </div>

      <!-- Entries Count -->
      <div class="mb-4">
        <span id="entriesCount" class="text-gray-300">No entries loaded</span>
      </div>

      <!-- Entries Table -->
      <div class="overflow-x-auto">
        <table class="w-full text-sm text-left text-gray-300">
          <thead class="text-xs text-gray-400 uppercase bg-gray-700">
            <tr>
              <th class="px-4 py-3">User</th>
              <th class="px-4 py-3">Task</th>
              <th class="px-4 py-3">Start Time</th>
              <th class="px-4 py-3">End Time</th>
              <th class="px-4 py-3">Duration</th>
              <th class="px-4 py-3">Status</th>
              <th class="px-4 py-3">Notes</th>
            </tr>
          </thead>
          <tbody id="entriesTableBody">
            <tr>
              <td colspan="7" class="px-4 py-3 text-center text-gray-500">No entries to display</td>
            </tr>
          </tbody>
        </table>
      </div>

      <!-- Pagination -->
      <div class="mt-4 flex justify-between items-center">
        <div class="text-sm text-gray-300">
          Showing <span id="showingStart">0</span> to <span id="showingEnd">0</span> of <span id="totalEntries">0</span> entries
        </div>
        <div class="flex gap-2">
          <button id="prevPage" class="px-3 py-1 bg-gray-600 hover:bg-gray-700 text-white rounded disabled:opacity-50">Previous</button>
          <span id="currentPage" class="px-3 py-1 text-gray-300">1</span>
          <button id="nextPage" class="px-3 py-1 bg-gray-600 hover:bg-gray-700 text-white rounded disabled:opacity-50">Next</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Data generation functionality
    document.addEventListener('DOMContentLoaded', function() {
      const generateBtn = document.getElementById('generateExtendedData') as HTMLButtonElement | null;
      const generateClearBtn = document.getElementById('generateExtendedDataClear') as HTMLButtonElement | null;
      const statusDiv = document.getElementById('dataGenerationStatus');
      
      async function generateData(clearExisting = false) {
        if (generateBtn) generateBtn.disabled = true;
        if (generateClearBtn) generateClearBtn.disabled = true;
        
        if (statusDiv) {
          statusDiv.textContent = 'Generating extended time data... This may take a moment.';
          statusDiv.className = 'text-sm text-yellow-300';
        }
        
        try {
          const response = await fetch('/api/generate-extended-time-data', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ clearExisting })
          });
          
          const result = await response.json();
          
          if (result.success) {
            if (statusDiv) {
              statusDiv.textContent = `✅ Success! Generated ${result.data.entriesGenerated} time entries for every weekday spanning past 30 days.`;
              statusDiv.className = 'text-sm text-green-300';
            }
            console.log('Extended time data generated successfully:', result);
          } else {
            throw new Error(result.message || 'Unknown error');
          }
        } catch (error) {
          console.error('Error generating data:', error);
          if (statusDiv) {
            statusDiv.textContent = `❌ Error: ${error instanceof Error ? error.message : 'Unknown error'}`;
            statusDiv.className = 'text-sm text-red-300';
          }
        } finally {
          if (generateBtn) generateBtn.disabled = false;
          if (generateClearBtn) generateClearBtn.disabled = false;
        }
      }
      
      if (generateBtn) {
        generateBtn.addEventListener('click', () => generateData(false));
      }
      
      if (generateClearBtn) {
        generateClearBtn.addEventListener('click', () => generateData(true));
      }

      // Time entries loading and sorting functionality
      let allEntries: any[] = [];
      let currentPage = 1;
      const entriesPerPage = 20;

      async function loadTimeEntries() {
        try {
          const response = await fetch('/api/admin/time-entries');
          const result = await response.json();
          
          if (result.success) {
            allEntries = result.data || [];
            updateEntriesDisplay();
          } else {
            console.error('Failed to load time entries:', result.message);
          }
        } catch (error) {
          console.error('Error loading time entries:', error);
        }
      }

      function updateEntriesDisplay() {
        const sortBy = (document.getElementById('sortBy') as HTMLSelectElement)?.value || 'startTime';
        const sortOrder = (document.getElementById('sortOrder') as HTMLSelectElement)?.value || 'desc';
        const dateFilter = (document.getElementById('dateFilter') as HTMLInputElement)?.value;

        // Filter by date if specified
        let filteredEntries = allEntries;
        if (dateFilter) {
          const filterDate = new Date(dateFilter);
          filteredEntries = allEntries.filter(entry => {
            const entryDate = new Date(entry.startTime);
            return entryDate.toDateString() === filterDate.toDateString();
          });
        }

        // Sort entries
        filteredEntries.sort((a, b) => {
          let aValue, bValue;
          
          switch (sortBy) {
            case 'startTime':
              aValue = new Date(a.startTime).getTime();
              bValue = new Date(b.startTime).getTime();
              break;
            case 'endTime':
              aValue = a.endTime ? new Date(a.endTime).getTime() : 0;
              bValue = b.endTime ? new Date(b.endTime).getTime() : 0;
              break;
            case 'duration':
              aValue = a.durationManual || 0;
              bValue = b.durationManual || 0;
              break;
            case 'user':
              aValue = a.user?.name || '';
              bValue = b.user?.name || '';
              break;
            case 'task':
              aValue = a.task?.name || '';
              bValue = b.task?.name || '';
              break;
            default:
              aValue = new Date(a.startTime).getTime();
              bValue = new Date(b.startTime).getTime();
          }

          if (sortOrder === 'asc') {
            return aValue > bValue ? 1 : -1;
          } else {
            return aValue < bValue ? 1 : -1;
          }
        });

        // Pagination
        const totalEntries = filteredEntries.length;
        const startIndex = (currentPage - 1) * entriesPerPage;
        const endIndex = startIndex + entriesPerPage;
        const pageEntries = filteredEntries.slice(startIndex, endIndex);

        // Update display
        updateEntriesTable(pageEntries);
        updatePagination(totalEntries, startIndex, endIndex);
        updateEntriesCount(totalEntries);
      }

      function updateEntriesTable(entries: any[]) {
        const tbody = document.getElementById('entriesTableBody');
        if (!tbody) return;

        if (entries.length === 0) {
          tbody.innerHTML = '<tr><td colspan="7" class="px-4 py-3 text-center text-gray-500">No entries to display</td></tr>';
          return;
        }

        tbody.innerHTML = entries.map(entry => {
          const startTime = new Date(entry.startTime).toLocaleString();
          const endTime = entry.endTime ? new Date(entry.endTime).toLocaleString() : 'Ongoing';
          const duration = entry.durationManual ? `${(entry.durationManual / 3600).toFixed(2)}h` : 'N/A';
          const status = entry.endTime ? 'Completed' : 'Ongoing';
          
          return `
            <tr class="border-b border-gray-700 hover:bg-gray-700">
              <td class="px-4 py-3">${entry.user?.name || 'Unknown'}</td>
              <td class="px-4 py-3">${entry.task?.name || 'Unknown'}</td>
              <td class="px-4 py-3">${startTime}</td>
              <td class="px-4 py-3">${endTime}</td>
              <td class="px-4 py-3">${duration}</td>
              <td class="px-4 py-3">
                <span class="px-2 py-1 text-xs rounded ${status === 'Completed' ? 'bg-green-600 text-green-100' : 'bg-yellow-600 text-yellow-100'}">
                  ${status}
                </span>
              </td>
              <td class="px-4 py-3 max-w-xs truncate" title="${entry.notes || ''}">${entry.notes || '-'}</td>
            </tr>
          `;
        }).join('');
      }

      function updatePagination(total: number, start: number, end: number) {
        const totalPages = Math.ceil(total / entriesPerPage);
        
        document.getElementById('showingStart')!.textContent = (start + 1).toString();
        document.getElementById('showingEnd')!.textContent = Math.min(end, total).toString();
        document.getElementById('totalEntries')!.textContent = total.toString();
        document.getElementById('currentPage')!.textContent = currentPage.toString();
        
        const prevBtn = document.getElementById('prevPage') as HTMLButtonElement;
        const nextBtn = document.getElementById('nextPage') as HTMLButtonElement;
        
        if (prevBtn) prevBtn.disabled = currentPage <= 1;
        if (nextBtn) nextBtn.disabled = currentPage >= totalPages;
      }

      function updateEntriesCount(total: number) {
        const countElement = document.getElementById('entriesCount');
        if (countElement) {
          countElement.textContent = `Total entries: ${total}`;
        }
      }

      // Event listeners
      const loadBtn = document.getElementById('loadEntries');
      const sortBySelect = document.getElementById('sortBy');
      const sortOrderSelect = document.getElementById('sortOrder');
      const dateFilterInput = document.getElementById('dateFilter');
      const prevBtn = document.getElementById('prevPage');
      const nextBtn = document.getElementById('nextPage');

      if (loadBtn) loadBtn.addEventListener('click', loadTimeEntries);
      if (sortBySelect) sortBySelect.addEventListener('change', updateEntriesDisplay);
      if (sortOrderSelect) sortOrderSelect.addEventListener('change', updateEntriesDisplay);
      if (dateFilterInput) dateFilterInput.addEventListener('change', () => {
        currentPage = 1;
        updateEntriesDisplay();
      });
      if (prevBtn) prevBtn.addEventListener('click', () => {
        if (currentPage > 1) {
          currentPage--;
          updateEntriesDisplay();
        }
      });
      if (nextBtn) nextBtn.addEventListener('click', () => {
        const totalPages = Math.ceil(allEntries.length / entriesPerPage);
        if (currentPage < totalPages) {
          currentPage++;
          updateEntriesDisplay();
        }
      });

      // Load entries on page load
      loadTimeEntries();
    });
  </script>
</AdminLayout> 