---
import Layout from '../layouts/Layout.astro';
import { requireAuth } from '../utils/session';

// Require authentication
const user = await requireAuth('/')(Astro) as any;
---

<Layout title="Test Task Notifications - Times10 Time Tracker">
  <div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <h1 class="text-2xl font-bold text-gray-900 mb-6">Test Task Assignment Notifications</h1>
        
        <div class="space-y-6">
          <!-- Test Email Notification -->
          <div class="border border-gray-200 rounded-lg p-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-4">Test Email Notification</h2>
            <p class="text-gray-600 mb-4">
              This will send a test task assignment email notification to verify the email system is working.
            </p>
            
            <div class="space-y-4">
              <div>
                <label for="testEmail" class="block text-sm font-medium text-gray-700 mb-2">
                  Test Email Address
                </label>
                <input
                  type="email"
                  id="testEmail"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Enter email address to test"
                  value="test@example.com"
                />
              </div>
              
              <button
                id="testEmailBtn"
                class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
              >
                Send Test Email
              </button>
              
              <div id="testEmailResult" class="hidden">
                <div class="p-4 rounded-md">
                  <p id="testEmailMessage" class="text-sm"></p>
                </div>
              </div>
            </div>
          </div>

          <!-- Task Assignment Test -->
          <div class="border border-gray-200 rounded-lg p-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-4">Test Task Assignment</h2>
            <p class="text-gray-600 mb-4">
              This will create a test task and assign it to trigger the email notification system.
            </p>
            
            <div class="space-y-4">
              <div>
                <label for="taskName" class="block text-sm font-medium text-gray-700 mb-2">
                  Task Name
                </label>
                <input
                  type="text"
                  id="taskName"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Enter task name"
                  value="Test Task Assignment"
                />
              </div>
              
              <div>
                <label for="taskDescription" class="block text-sm font-medium text-gray-700 mb-2">
                  Task Description
                </label>
                <textarea
                  id="taskDescription"
                  rows="3"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Enter task description"
                >This is a test task to verify email notifications are working properly.</textarea>
              </div>
              
              <div>
                <label for="assignToEmail" class="block text-sm font-medium text-gray-700 mb-2">
                  Assign To Email
                </label>
                <input
                  type="email"
                  id="assignToEmail"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Enter user email to assign task to"
                  value="test@example.com"
                />
              </div>
              
              <button
                id="testAssignmentBtn"
                class="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors"
              >
                Create and Assign Test Task
              </button>
              
              <div id="testAssignmentResult" class="hidden">
                <div class="p-4 rounded-md">
                  <p id="testAssignmentMessage" class="text-sm"></p>
                </div>
              </div>
            </div>
          </div>

          <!-- Instructions -->
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h3 class="text-sm font-semibold text-blue-900 mb-2">Instructions</h3>
            <ul class="text-sm text-blue-800 space-y-1">
              <li>• Make sure you have a RESEND_API_KEY environment variable set for real email sending</li>
              <li>• Without the API key, emails will be logged to the console for testing</li>
              <li>• Check the browser console and server logs for email delivery status</li>
              <li>• The test will create a real task and assignment in the database</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Test email notification
  document.getElementById('testEmailBtn')?.addEventListener('click', async () => {
    const email = (document.getElementById('testEmail') as HTMLInputElement).value;
    const resultDiv = document.getElementById('testEmailResult');
    const messageEl = document.getElementById('testEmailMessage');
    
    if (!email) {
      showResult(resultDiv, messageEl, 'Please enter an email address', 'error');
      return;
    }
    
    try {
      const response = await fetch('/api/test-task-notification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: email,
          userName: 'Test User',
          taskName: 'Test Task',
          projectName: 'Test Project',
          assignedBy: 'Test Manager',
          taskDescription: 'This is a test task assignment notification.',
          dashboardUrl: window.location.origin + '/dashboard'
        }),
      });
      
      const data = await response.json();
      
      if (response.ok) {
        showResult(resultDiv, messageEl, `Test email sent successfully! Check console for details. Email ID: ${data.id}`, 'success');
      } else {
        showResult(resultDiv, messageEl, `Error: ${data.error}`, 'error');
      }
    } catch (error) {
      showResult(resultDiv, messageEl, `Error: ${error}`, 'error');
    }
  });

  // Test task assignment
  document.getElementById('testAssignmentBtn')?.addEventListener('click', async () => {
    const taskName = (document.getElementById('taskName') as HTMLInputElement).value;
    const taskDescription = (document.getElementById('taskDescription') as HTMLTextAreaElement).value;
    const assignToEmail = (document.getElementById('assignToEmail') as HTMLInputElement).value;
    const resultDiv = document.getElementById('testAssignmentResult');
    const messageEl = document.getElementById('testAssignmentMessage');
    
    if (!taskName || !assignToEmail) {
      showResult(resultDiv, messageEl, 'Please fill in all required fields', 'error');
      return;
    }
    
    try {
      // First, create a test project if needed
      const projectResponse = await fetch('/api/admin/projects', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: 'Test Project for Notifications',
          clientId: 1, // Assuming client ID 1 exists
        }),
      });
      
      let projectId = 1; // Default fallback
      if (projectResponse.ok) {
        const projectData = await projectResponse.json();
        projectId = projectData.id;
      }
      
      // Create the test task
      const taskResponse = await fetch('/api/admin/tasks', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: taskName,
          description: taskDescription,
          projectId: projectId,
          status: 'pending',
        }),
      });
      
      if (!taskResponse.ok) {
        const errorData = await taskResponse.json();
        showResult(resultDiv, messageEl, `Error creating task: ${errorData.error}`, 'error');
        return;
      }
      
      const taskData = await taskResponse.json();
      
      // Find user by email
      const usersResponse = await fetch('/api/admin/users');
      if (!usersResponse.ok) {
        showResult(resultDiv, messageEl, 'Error fetching users', 'error');
        return;
      }
      
      const users = await usersResponse.json();
      const targetUser = users.find((user: any) => user.email === assignToEmail);
      
      if (!targetUser) {
        showResult(resultDiv, messageEl, `User with email ${assignToEmail} not found`, 'error');
        return;
      }
      
      // Assign the task
      const assignResponse = await fetch('/api/admin/tasks/assign', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          taskId: taskData.id,
          userIds: [targetUser.id],
        }),
      });
      
      const assignData = await assignResponse.json();
      
      if (assignResponse.ok) {
        showResult(resultDiv, messageEl, `Task created and assigned successfully! Task ID: ${taskData.id}. Notifications sent: ${assignData.notificationsSent}`, 'success');
      } else {
        showResult(resultDiv, messageEl, `Error assigning task: ${assignData.error}`, 'error');
      }
    } catch (error) {
      showResult(resultDiv, messageEl, `Error: ${error}`, 'error');
    }
  });

  function showResult(resultDiv: HTMLElement | null, messageEl: HTMLElement | null, message: string, type: 'success' | 'error') {
    if (!resultDiv || !messageEl) return;
    
    resultDiv.className = `p-4 rounded-md ${type === 'success' ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'}`;
    messageEl.className = `text-sm ${type === 'success' ? 'text-green-800' : 'text-red-800'}`;
    messageEl.textContent = message;
    resultDiv.classList.remove('hidden');
  }
</script>

