---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { db } from '../../../db/index';
import { tasks, projects, clients, taskAssignments, users, timeEntries } from '../../../db/schema';
import { count, sql } from 'drizzle-orm';

// Get all tasks with project info, assigned users, and time logged
const allTasks = await db
  .select({
    id: tasks.id,
    name: tasks.name,
    description: tasks.description,
    status: tasks.status,
    createdAt: tasks.createdAt,
    projectId: tasks.projectId,
    projectName: projects.name,
    clientName: clients.name,
    assignedUsers: sql<string>`STRING_AGG(${users.name}, ', ')`,
    timeLogged: sql<number>`COALESCE(SUM(EXTRACT(EPOCH FROM (${timeEntries.endTime} - ${timeEntries.startTime}))/3600), 0)`,
  })
  .from(tasks)
  .leftJoin(projects, sql`${tasks.projectId} = ${projects.id}`)
  .leftJoin(clients, sql`${projects.clientId} = ${clients.id}`)
  .leftJoin(taskAssignments, sql`${tasks.id} = ${taskAssignments.taskId}`)
  .leftJoin(users, sql`${taskAssignments.userId} = ${users.id}`)
  .leftJoin(timeEntries, sql`${tasks.id} = ${timeEntries.taskId}`)
  .groupBy(tasks.id, projects.name, clients.name)
  .orderBy(clients.name, projects.name, tasks.name);

// Group tasks by project
const tasksByProject = allTasks.reduce((acc, task) => {
  const projectKey = `${task.clientName} - ${task.projectName}`;
  if (!acc[projectKey]) {
    acc[projectKey] = [];
  }
  acc[projectKey].push(task);
  return acc;
}, {} as Record<string, typeof allTasks>);

// Get all projects for the dropdown
const allProjects = await db
  .select({
    id: projects.id,
    name: projects.name,
    clientName: clients.name,
  })
  .from(projects)
  .leftJoin(clients, sql`${projects.clientId} = ${clients.id}`)
  .orderBy(clients.name, projects.name);

// Get all users for assignment
const allUsers = await db.select().from(users).orderBy(users.name);
---

<AdminLayout title="Tasks" currentPage="tasks">
  <div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-white">Tasks</h1>
        <p class="text-gray-300">Manage tasks organized by project</p>
      </div>
      <button
        id="createTaskBtn"
        class="bg-[#4F46E5] hover:bg-[#3730A3] text-white font-medium py-2 px-4 rounded-lg transition-colors"
      >
        + Add Task
      </button>
    </div>

    <!-- Filters -->
    <div class="bg-gray-800 rounded-lg shadow border border-gray-700 p-6">
      <div class="flex flex-col sm:flex-row gap-4">
        <div class="flex-1">
          <label for="search" class="block text-sm font-medium text-gray-300 mb-1">Search</label>
          <input
            type="text"
            id="search"
            placeholder="Search tasks..."
            class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
          />
        </div>
        <div class="sm:w-48">
          <label for="statusFilter" class="block text-sm font-medium text-gray-300 mb-1">Status</label>
          <select
            id="statusFilter"
            class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
          >
            <option value="">All Statuses</option>
            <option value="pending">Pending</option>
            <option value="in-progress">In Progress</option>
            <option value="completed">Completed</option>
            <option value="archived">Archived</option>
          </select>
        </div>
        <div class="sm:w-48">
          <label for="userFilter" class="block text-sm font-medium text-gray-300 mb-1">Assigned User</label>
          <select
            id="userFilter"
            class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
          >
            <option value="">All Users</option>
            {allUsers.map((user) => (
              <option value={user.name}>{user.name}</option>
            ))}
          </select>
        </div>
      </div>
    </div>

    <!-- Tasks by Project -->
    <div class="space-y-6">
      {Object.entries(tasksByProject).map(([projectKey, projectTasks]) => (
        <div class="bg-gray-800 rounded-lg shadow border border-gray-700 overflow-hidden">
          <div class="px-6 py-4 bg-gray-700 border-b border-gray-600">
            <h3 class="text-lg font-medium text-white">{projectKey}</h3>
            <p class="text-sm text-gray-300">{projectTasks.length} tasks</p>
          </div>
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-700">
              <thead class="bg-gray-700">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Task Name
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Status
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Assigned Users
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Time Logged
                  </th>
                  <th class="px-6 py-3 text-right text-xs font-medium text-gray-300 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody class="bg-gray-800 divide-y divide-gray-700">
                {projectTasks.map((task) => (
                  <tr class="hover:bg-gray-700">
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="text-sm font-medium text-white">{task.name}</div>
                      {task.description && (
                        <div class="text-sm text-gray-400 truncate max-w-xs">{task.description}</div>
                      )}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        task.status === 'completed' ? 'bg-[#10B981] text-white' :
                        task.status === 'in-progress' ? 'bg-[#F59E0B] text-white' :
                        task.status === 'archived' ? 'bg-gray-600 text-gray-300' :
                        'bg-[#4F46E5] text-white'
                      }`}>
                        {task.status}
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-white">
                      {task.assignedUsers || 'Unassigned'}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-white">
                      {task.timeLogged ? Math.round(task.timeLogged * 10) / 10 : 0} hours
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div class="flex justify-end space-x-2">
                        <button
                          class="text-[#4F46E5] hover:text-[#3730A3]"
                          onclick={`assignUsers(${task.id})`}
                        >
                          Assign
                        </button>
                        <button
                          class="text-[#EC4899] hover:text-[#DB2777]"
                          onclick={`editTask(${task.id})`}
                        >
                          Edit
                        </button>
                        <button
                          class="text-red-400 hover:text-red-300"
                          onclick={`deleteTask(${task.id})`}
                        >
                          Delete
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      ))}
    </div>

    {Object.keys(tasksByProject).length === 0 && (
      <div class="text-center py-12">
        <div class="text-6xl mb-4">âœ…</div>
        <h3 class="text-lg font-medium text-white mb-2">No tasks yet</h3>
        <p class="text-gray-300 mb-4">Get started by adding your first task</p>
        <button
          class="bg-[#4F46E5] hover:bg-[#3730A3] text-white font-medium py-2 px-4 rounded-lg transition-colors"
          onclick="document.getElementById('createTaskBtn').click()"
        >
          Add Your First Task
        </button>
      </div>
    )}
  </div>

  <!-- Create/Edit Task Modal -->
  <div id="taskModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-[#1F2937] rounded-lg shadow-xl max-w-md w-full border border-gray-700">
        <div class="px-6 py-4 border-b border-gray-700">
          <h3 id="taskModalTitle" class="text-lg font-medium text-white">Add New Task</h3>
        </div>
        <form id="taskForm" class="p-6">
          <input type="hidden" id="taskId" />
          <div class="mb-4">
            <label for="taskName" class="block text-sm font-medium text-gray-300 mb-1">
              Task Name
            </label>
            <input
              type="text"
              id="taskName"
              required
              class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
            />
          </div>
          <div class="mb-4">
            <label for="taskDescription" class="block text-sm font-medium text-gray-300 mb-1">
              Description
            </label>
            <textarea
              id="taskDescription"
              rows="3"
              class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
            ></textarea>
          </div>
          <div class="mb-4">
            <label for="taskProject" class="block text-sm font-medium text-gray-300 mb-1">
              Project
            </label>
            <select
              id="taskProject"
              required
              class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
            >
              <option value="">Select a project</option>
              {allProjects.map((project) => (
                <option value={project.id}>{project.clientName} - {project.name}</option>
              ))}
            </select>
          </div>
          <div class="mb-4">
            <label for="taskStatus" class="block text-sm font-medium text-gray-300 mb-1">
              Status
            </label>
            <select
              id="taskStatus"
              required
              class="w-full px-3 py-2 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-gray-700 text-white"
            >
              <option value="pending">Pending</option>
              <option value="in-progress">In Progress</option>
              <option value="completed">Completed</option>
              <option value="archived">Archived</option>
            </select>
          </div>
          <div class="flex justify-end space-x-3">
            <button
              type="button"
              onclick="closeTaskModal()"
              class="px-4 py-2 text-gray-300 bg-gray-700 hover:bg-gray-600 rounded-md transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-[#4F46E5] hover:bg-[#3730A3] text-white rounded-md transition-colors"
            >
              Save Task
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- User Assignment Modal -->
  <div id="assignmentModal" class="fixed inset-0 bg-black/50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-[#1F2937] rounded-lg shadow-xl max-w-md w-full border border-gray-700">
        <div class="px-6 py-4 border-b border-gray-700">
          <h3 class="text-lg font-medium text-white">Assign Users to Task</h3>
        </div>
        <div class="p-6">
          <input type="hidden" id="assignmentTaskId" />
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-300 mb-2">Select Users</label>
            <div class="space-y-2 max-h-48 overflow-y-auto">
              {allUsers.map((user) => (
                <label class="flex items-center">
                  <input
                    type="checkbox"
                    value={user.id}
                    class="rounded border-gray-500 text-[#4F46E5] focus:ring-[#4F46E5] bg-gray-700"
                  />
                  <span class="ml-2 text-sm text-white">{user.name}</span>
                </label>
              ))}
            </div>
          </div>
          <div class="flex justify-end space-x-3">
            <button
              type="button"
              onclick="closeAssignmentModal()"
              class="px-4 py-2 text-gray-300 bg-gray-700 hover:bg-gray-600 rounded-md transition-colors"
            >
              Cancel
            </button>
            <button
              onclick="saveAssignments()"
              class="px-4 py-2 bg-[#4F46E5] hover:bg-[#3730A3] text-white rounded-md transition-colors"
            >
              Save Assignments
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Task management JavaScript
    const createTaskBtn = document.getElementById('createTaskBtn');
    const taskForm = document.getElementById('taskForm');
    const searchInput = document.getElementById('search');
    const statusFilter = document.getElementById('statusFilter');
    const userFilter = document.getElementById('userFilter');

    if (createTaskBtn) {
      createTaskBtn.addEventListener('click', () => {
        const modalTitle = document.getElementById('taskModalTitle');
        const taskId = document.getElementById('taskId') as HTMLInputElement;
        const taskName = document.getElementById('taskName') as HTMLInputElement;
        const taskDescription = document.getElementById('taskDescription') as HTMLTextAreaElement;
        const taskProject = document.getElementById('taskProject') as HTMLSelectElement;
        const taskStatus = document.getElementById('taskStatus') as HTMLSelectElement;
        const taskModal = document.getElementById('taskModal');
        
        if (modalTitle) modalTitle.textContent = 'Add New Task';
        if (taskId) taskId.value = '';
        if (taskName) taskName.value = '';
        if (taskDescription) taskDescription.value = '';
        if (taskProject) taskProject.value = '';
        if (taskStatus) taskStatus.value = 'pending';
        if (taskModal) taskModal.classList.remove('hidden');
      });
    }

    if (taskForm) {
      taskForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const taskId = (document.getElementById('taskId') as HTMLInputElement)?.value;
        const taskName = (document.getElementById('taskName') as HTMLInputElement)?.value;
        const taskDescription = (document.getElementById('taskDescription') as HTMLTextAreaElement)?.value;
        const taskProject = (document.getElementById('taskProject') as HTMLSelectElement)?.value;
        const taskStatus = (document.getElementById('taskStatus') as HTMLSelectElement)?.value;
        
        try {
          const response = await fetch('/api/admin/tasks', {
            method: taskId ? 'PUT' : 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              id: taskId, 
              name: taskName,
              description: taskDescription,
              projectId: parseInt(taskProject),
              status: taskStatus
            }),
          });
          
          if (response.ok) {
            window.location.reload();
          } else {
            alert('Error saving task');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error saving task');
        }
      });
    }

    function closeTaskModal() {
      const taskModal = document.getElementById('taskModal');
      if (taskModal) taskModal.classList.add('hidden');
    }

    function closeAssignmentModal() {
      const assignmentModal = document.getElementById('assignmentModal');
      if (assignmentModal) assignmentModal.classList.add('hidden');
    }

    function editTask(id: number) {
      const modalTitle = document.getElementById('taskModalTitle');
      const taskId = document.getElementById('taskId') as HTMLInputElement;
      const taskModal = document.getElementById('taskModal');
      
      if (modalTitle) modalTitle.textContent = 'Edit Task';
      if (taskId) taskId.value = id.toString();
      if (taskModal) taskModal.classList.remove('hidden');
    }

    function assignUsers(id: number) {
      const assignmentTaskId = document.getElementById('assignmentTaskId') as HTMLInputElement;
      const assignmentModal = document.getElementById('assignmentModal');
      
      if (assignmentTaskId) assignmentTaskId.value = id.toString();
      if (assignmentModal) assignmentModal.classList.remove('hidden');
    }

    function saveAssignments() {
      const taskId = (document.getElementById('assignmentTaskId') as HTMLInputElement)?.value;
      const checkboxes = document.querySelectorAll('#assignmentModal input[type="checkbox"]:checked');
      const userIds = Array.from(checkboxes).map(cb => (cb as HTMLInputElement).value);
      
      fetch('/api/admin/tasks/assign', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ taskId: parseInt(taskId), userIds: userIds.map(id => parseInt(id)) }),
      })
      .then(response => {
        if (response.ok) {
          window.location.reload();
        } else {
          alert('Error saving assignments');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Error saving assignments');
      });
    }

    function deleteTask(id: number) {
      if (confirm('Are you sure you want to delete this task?')) {
        fetch(`/api/admin/tasks/${id}`, { method: 'DELETE' })
          .then(response => {
            if (response.ok) {
              window.location.reload();
            } else {
              alert('Error deleting task');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            alert('Error deleting task');
          });
      }
    }

    // Search functionality
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        const searchTerm = target.value.toLowerCase();
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          const firstCell = row.querySelector('td:first-child');
          const taskName = firstCell?.textContent?.toLowerCase() || '';
          (row as HTMLElement).style.display = taskName.includes(searchTerm) ? '' : 'none';
        });
      });
    }

    // Status filter functionality
    if (statusFilter) {
      statusFilter.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        const selectedStatus = target.value;
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          const statusCell = row.querySelector('td:nth-child(2)');
          const status = statusCell?.textContent?.trim() || '';
          if (!selectedStatus || status === selectedStatus) {
            (row as HTMLElement).style.display = '';
          } else {
            (row as HTMLElement).style.display = 'none';
          }
        });
      });
    }

    // User filter functionality
    if (userFilter) {
      userFilter.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        const selectedUser = target.value;
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          const userCell = row.querySelector('td:nth-child(3)');
          const users = userCell?.textContent?.toLowerCase() || '';
          if (!selectedUser || users.includes(selectedUser.toLowerCase())) {
            (row as HTMLElement).style.display = '';
          } else {
            (row as HTMLElement).style.display = 'none';
          }
        });
      });
    }
  </script>
</AdminLayout> 