const E=document.getElementById("createClientBtn"),g=document.getElementById("clientForm"),f=document.getElementById("search");E&&E.addEventListener("click",()=>{const t=document.getElementById("modalTitle"),e=document.getElementById("clientId"),o=document.getElementById("clientName"),n=document.getElementById("clientModal");t&&(t.textContent="Add New Client"),e&&(e.value=""),o&&(o.value=""),n&&n.classList.remove("hidden")});g&&g.addEventListener("submit",async t=>{t.preventDefault();const e=document.getElementById("clientId")?.value,o=document.getElementById("clientName")?.value;try{(await fetch("/api/admin/clients",{method:e?"PUT":"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:e,name:o})})).ok?window.location.reload():alert("Error saving client")}catch(n){console.error("Error:",n),alert("Error saving client")}});window.closeModal=function(){const t=document.getElementById("clientModal");t&&t.classList.add("hidden")};window.editClient=async function(t){try{const e=await fetch(`/api/admin/clients/${t}`);if(!e.ok)throw new Error("Failed to fetch client");const o=await e.json(),n=document.getElementById("modalTitle"),i=document.getElementById("clientId"),c=document.getElementById("clientName"),r=document.getElementById("clientModal");n&&(n.textContent="Edit Client"),i&&(i.value=o.id.toString()),c&&(c.value=o.name),r&&r.classList.remove("hidden")}catch(e){console.error("Error fetching client:",e),alert("Error loading client details")}};window.archiveClient=async function(t){if(confirm("Are you sure you want to archive this client? This will hide it from the main view."))try{(await fetch("/api/admin/clients",{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:t,archived:!0})})).ok?window.location.reload():alert("Error archiving client")}catch(e){console.error("Error:",e),alert("Error archiving client")}};window.unarchiveClient=async function(t){if(confirm("Are you sure you want to unarchive this client?"))try{(await fetch("/api/admin/clients",{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:t,archived:!1})})).ok?window.location.reload():alert("Error unarchiving client")}catch(e){console.error("Error:",e),alert("Error unarchiving client")}};window.deleteClient=function(t){confirm("Are you sure you want to delete this client? This action cannot be undone.")&&fetch(`/api/admin/clients/${t}`,{method:"DELETE"}).then(e=>{e.ok?window.location.reload():alert("Error deleting client")}).catch(e=>{console.error("Error:",e),alert("Error deleting client")})};const p=document.getElementById("archiveFilter");function h(){const t=f?.value.toLowerCase()||"",e=p?.value||"active",o=document.querySelectorAll("tbody tr");let n=0;o.forEach((c,r)=>{const a=c.querySelector("td:first-child"),s=c.querySelector("td:nth-child(5)"),P=a?.textContent?.toLowerCase()||"",w=s?.textContent?.trim()||"";let C=P.includes(t),u=!0;e==="active"?u=w==="Active":e==="archived"&&(u=w==="Archived");const j=C&&u;c.style.display=j?"":"none",j&&n++});const i=document.getElementById("emptyState");i&&(n===0?(i.classList.remove("hidden"),B(e,t)):i.classList.add("hidden"))}function B(t,e){const o=document.getElementById("emptyState");if(!o)return;const n=o.querySelector("h3"),i=o.querySelector("p");e?(n&&(n.textContent="No clients found"),i&&(i.textContent=`No clients match "${e}"`)):t==="active"?(n&&(n.textContent="No active clients"),i&&(i.textContent="Get started by adding your first client or check archived clients")):t==="archived"?(n&&(n.textContent="No archived clients"),i&&(i.textContent="No clients have been archived yet")):(n&&(n.textContent="No clients yet"),i&&(i.textContent="Get started by adding your first client"))}f&&f.addEventListener("input",h);p&&p.addEventListener("change",h);setTimeout(()=>{h()},100);let l=null,d=null;window.viewProjects=async function(t,e,o=!1){l=t;const n=document.getElementById("projectsModal"),i=document.getElementById("clientNameHeader"),c=document.getElementById("clientDescription");document.getElementById("projectsList");const r=document.getElementById("newProjectBtn");i&&(i.textContent=e,o&&(i.innerHTML=`${e} <span class="text-gray-400 text-sm">(Archived)</span>`)),c&&(o?c.innerHTML='<span class="text-yellow-400">‚ö†Ô∏è This client is archived. Projects are read-only.</span>':c.textContent="Manage projects for this client"),r&&(r.style.display=o?"none":"block"),n&&n.classList.remove("hidden"),await m(t,o)};window.closeProjectsModal=function(){const t=document.getElementById("projectsModal");t&&t.classList.add("hidden"),l=null};window.closeNewProjectModal=function(){const t=document.getElementById("newProjectModal"),e=document.getElementById("projectName");t&&t.classList.add("hidden"),e&&(e.value="")};async function m(t,e=!1){try{const o=await fetch("/api/admin/projects");if(!o.ok)throw new Error("Failed to fetch projects");const i=(await o.json()).filter(r=>r.clientId===t),c=document.getElementById("projectsList");if(c)if(i.length===0){const r=e?"This archived client has no projects":"Get started by creating your first project";c.innerHTML=`
              <div class="text-center py-8">
                <div class="text-4xl mb-4">üìÅ</div>
                <h3 class="text-lg font-medium text-white mb-2">No projects yet</h3>
                <p class="text-gray-300">${r}</p>
              </div>
            `}else c.innerHTML=i.map(r=>`
              <div class="bg-gray-700 rounded-lg p-4 flex justify-between items-center">
                <div>
                  <h5 class="text-white font-medium">${r.name}</h5>
                  <p class="text-gray-300 text-sm">Created ${new Date(r.createdAt).toLocaleDateString()}</p>
                </div>
                <div class="flex space-x-2">
                  <button
                    class="text-[#4F46E5] hover:text-[#3730A3] text-sm"
                    onclick="viewProjectDetails(${r.id})"
                  >
                    View Details
                  </button>
                  <button
                    class="text-[#EC4899] hover:text-[#DB2777] text-sm"
                    onclick="console.log('Edit button clicked for project ${r.id}'); editProject(${r.id})"
                  >
                    Edit
                  </button>
                  <button
                    class="text-red-400 hover:text-red-300 text-sm"
                    onclick="deleteProject(${r.id})"
                  >
                    Delete
                  </button>
                </div>
              </div>
            `).join("")}catch(o){console.error("Error loading projects:",o);const n=document.getElementById("projectsList");n&&(n.innerHTML=`
            <div class="text-center py-8">
              <p class="text-red-400">Error loading projects</p>
            </div>
          `)}}const v=document.getElementById("newProjectBtn"),I=document.getElementById("newProjectForm");v&&v.addEventListener("click",()=>{d=null;const t=document.getElementById("newProjectModal"),e=document.getElementById("projectClientId"),o=document.getElementById("projectName"),n=t?.querySelector("h3"),i=t?.querySelector('button[type="submit"]');e&&l&&(e.value=l.toString()),o&&(o.value=""),n&&(n.textContent="Add New Project"),i&&(i.textContent="Create Project"),t&&t.classList.remove("hidden");const c=document.getElementById("newProjectForm");c&&(c.removeEventListener("submit",window.handleEditProjectSubmit),c.addEventListener("submit",window.handleNewProjectSubmit))});I&&I.addEventListener("submit",window.handleNewProjectSubmit);async function y(t){try{const e=await fetch("/api/admin/projects");if(!e.ok)throw new Error("Failed to fetch projects");const n=(await e.json()).filter(c=>c.clientId===t),i=document.querySelector(`[data-client-id="${t}"]`);i&&(i.textContent=`${n.length} projects`)}catch(e){console.error("Error updating project counter:",e)}}window.viewProjectDetails=function(t){alert("Project details view coming soon!")};window.editProject=async function(t){console.log("editProject called with id:",t),d=t;try{console.log("Fetching project details...");const e=await fetch(`/api/admin/projects/${t}`);if(console.log("Response status:",e.status),e.ok){const o=await e.json();console.log("Project data:",o);const n=document.getElementById("projectName"),i=document.getElementById("projectClientId"),c=document.getElementById("newProjectModal"),r=c?.querySelector("h3"),a=c?.querySelector('button[type="submit"]');n&&(n.value=o.name),i&&(i.value=o.clientId.toString()),r&&(r.textContent="Edit Project"),a&&(a.textContent="Update Project"),c&&c.classList.remove("hidden"),console.log("Modal should be open now");const s=document.getElementById("newProjectForm");s&&(s.removeEventListener("submit",window.handleNewProjectSubmit),s.addEventListener("submit",window.handleEditProjectSubmit))}else alert("Error loading project details")}catch(e){console.error("Error:",e),alert("Error loading project details")}};window.handleEditProjectSubmit=async function(t){t.preventDefault();const e=document.getElementById("projectName")?.value,o=document.getElementById("projectClientId")?.value;console.log("Edit form submission:",{projectName:e,projectClientId:o,currentProjectId:d});try{const n=await fetch("/api/admin/projects",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:d,name:e,clientId:parseInt(o)})});if(console.log("Response status:",n.status),n.ok)console.log("Success! Closing modal and refreshing..."),window.closeNewProjectModal(),l&&(await m(l,!1),await y(l));else{const i=await n.text();console.error("Error response:",i),alert("Error updating project")}}catch(n){console.error("Error:",n),alert("Error updating project")}};window.handleNewProjectSubmit=async function(t){t.preventDefault();const e=document.getElementById("projectClientId")?.value,o=document.getElementById("projectName")?.value;console.log("New project form submission:",{projectName:o,projectClientId:e});try{(await fetch("/api/admin/projects",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:o,clientId:parseInt(e)})})).ok?(window.closeNewProjectModal(),l&&(await m(l,!1),await y(l))):alert("Error creating project")}catch(n){console.error("Error:",n),alert("Error creating project")}};window.deleteProject=function(t){confirm("Are you sure you want to delete this project? This action cannot be undone.")&&fetch(`/api/admin/projects/${t}`,{method:"DELETE"}).then(e=>{e.ok?l&&(m(l,!1),y(l)):alert("Error deleting project")}).catch(e=>{console.error("Error:",e),alert("Error deleting project")})};
