# Cursor Rules: Times10 Time Tracker
# Goal: NEVER invent or modify server endpoints. ONLY call the existing API routes in /src/pages/api.

[hard-constraints]
- Do not create new HTTP routes, URL paths, or controllers in /src/pages/api.
- Do not change request/response shapes of existing API endpoints.
- Do not bypass the typed API client in src/lib/api/client.ts.
- Do not add fetch/axios calls outside src/lib/api/.
- If a required field isn't available from existing endpoints, STOP and emit a TODO comment instead of guessing.
- Preserve idempotency of mutations; never send duplicate start/stop/update calls in a single user action.
- All new UI/logic must compile with strict TypeScript; no `any`.
- Do not modify database schema in src/db/schema.ts without explicit approval.
- Do not change existing service classes in src/services/ without explicit approval.

[how-to-call-api]
- Import from "src/lib/api/client".
- Use the Zod schemas in "src/lib/api/schemas" for all inputs.
- Use the typed helpers for time entry operations: startEntry, stopEntry, updateEntry, listEntries, deleteEntry.
- Respect optimistic update contract documented in src/lib/api/contracts.md.

[existing-endpoints]
- GET /api/time-entries-unified - List time entries with optional userId filter
- POST /api/time-entries-unified - Create new time entry
- GET /api/time-entries-unified/[id] - Get specific time entry
- PATCH /api/time-entries-unified/[id] - Update time entry
- DELETE /api/time-entries-unified/[id] - Delete time entry
- POST /api/timers/ongoing - Start ongoing timer
- GET /api/timers/user-ongoing - Get user's ongoing timer
- POST /api/timers/ongoing/stop - Stop ongoing timer
- GET /api/time-entries - Legacy time entries endpoint
- POST /api/time-entries - Legacy create time entry

[data-models]
- TimeEntry: id, userId, taskId, startTime, endTime, durationManual, notes, createdAt, updatedAt
- User: id, email, name, role, status, payRate, createdAt, updatedAt
- Project: id, clientId, name, archived, isSystem, createdAt, updatedAt
- Task: id, projectId, name, description, status, priority, archived, isSystem, createdAt, updatedAt
- Client: id, name, createdBy, archived, createdAt, updatedAt

[tests]
- Any new component using mutations must have an MSW-backed test covering: happy path, 4xx, 5xx, network timeout.
- E2E must assert we do not issue duplicate mutation calls on rapid clicks.
- Test files should be in src/tests/ with .spec.ts extension.

[ui-state]
- Mutations use React Query with `mutationKey` = ["timeEntry", id, action] and `networkMode: 'online'` only.
- Disable buttons during pending state; prevent concurrent submits.
- Use the existing useRealtimeTimer hook for timer functionality.

[rejections]
- Reject tasks that require new endpoints or changing schema. Output a TODO that references /docs/api/extension-proposal.md.
- Reject tasks that modify existing service classes without explicit approval.
- Reject tasks that change database schema without explicit approval.

[file-banner]
Add this banner to the top of any new file:
/**
 * IMPORTANT: This file MUST call the API only via src/lib/api/client.ts.
 * Changing endpoints, paths, or schemas is forbidden. If impossible, add a
 * TODO(api-extension) and stop. See /docs/api/extension-proposal.md.
 */

[timezone-handling]
- Always use TimezoneService for time conversions
- Preserve user's intended wall time regardless of server timezone
- Use fromUserISOString and toUserISOString utilities
- Never assume server timezone for user-facing times

[validation]
- Use ValidationService for all time entry validation
- Support flexible time formats: "9:30 AM", "5:30 PM", "930am", "1230"
- Support duration formats: "2h", "1.5hr", "90m", "4:15"
- Validate all inputs with Zod schemas before API calls

[authentication]
- Use existing session-based authentication
- Check isTokenExpired for session validation
- Respect user roles: 'admin', 'user'
- Handle unauthorized access gracefully

[error-handling]
- Always provide meaningful error messages
- Log errors with context for debugging
- Handle network failures gracefully
- Show user-friendly error states in UI
